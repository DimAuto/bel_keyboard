
bel_keyboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073f8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080075b8  080075b8  000175b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007698  08007698  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007698  08007698  00017698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076a0  080076a0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076a0  080076a0  000176a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076a4  080076a4  000176a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080076a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a0c  20000010  080076b8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a1c  080076b8  00021a1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e4f2  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003be4  00000000  00000000  0003e532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001860  00000000  00000000  00042118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016e8  00000000  00000000  00043978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d217  00000000  00000000  00045060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c8b9  00000000  00000000  00072277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116c14  00000000  00000000  0008eb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a5744  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006614  00000000  00000000  001a5794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000010 	.word	0x20000010
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080075a0 	.word	0x080075a0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000014 	.word	0x20000014
 80001fc:	080075a0 	.word	0x080075a0

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b974 	b.w	8000500 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468e      	mov	lr, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14d      	bne.n	80002da <__udivmoddi4+0xaa>
 800023e:	428a      	cmp	r2, r1
 8000240:	4694      	mov	ip, r2
 8000242:	d969      	bls.n	8000318 <__udivmoddi4+0xe8>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b152      	cbz	r2, 8000260 <__udivmoddi4+0x30>
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	f1c2 0120 	rsb	r1, r2, #32
 8000252:	fa20 f101 	lsr.w	r1, r0, r1
 8000256:	fa0c fc02 	lsl.w	ip, ip, r2
 800025a:	ea41 0e03 	orr.w	lr, r1, r3
 800025e:	4094      	lsls	r4, r2
 8000260:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000264:	0c21      	lsrs	r1, r4, #16
 8000266:	fbbe f6f8 	udiv	r6, lr, r8
 800026a:	fa1f f78c 	uxth.w	r7, ip
 800026e:	fb08 e316 	mls	r3, r8, r6, lr
 8000272:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000276:	fb06 f107 	mul.w	r1, r6, r7
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 811f 	bcs.w	80004c8 <__udivmoddi4+0x298>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 811c 	bls.w	80004c8 <__udivmoddi4+0x298>
 8000290:	3e02      	subs	r6, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 f707 	mul.w	r7, r0, r7
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x92>
 80002ac:	eb1c 0404 	adds.w	r4, ip, r4
 80002b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b4:	f080 810a 	bcs.w	80004cc <__udivmoddi4+0x29c>
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	f240 8107 	bls.w	80004cc <__udivmoddi4+0x29c>
 80002be:	4464      	add	r4, ip
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c6:	1be4      	subs	r4, r4, r7
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa4>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xc2>
 80002de:	2d00      	cmp	r5, #0
 80002e0:	f000 80ef 	beq.w	80004c2 <__udivmoddi4+0x292>
 80002e4:	2600      	movs	r6, #0
 80002e6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ea:	4630      	mov	r0, r6
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f683 	clz	r6, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d14a      	bne.n	8000390 <__udivmoddi4+0x160>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd4>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80f9 	bhi.w	80004f6 <__udivmoddi4+0x2c6>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	469e      	mov	lr, r3
 800030e:	2d00      	cmp	r5, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa4>
 8000312:	e9c5 4e00 	strd	r4, lr, [r5]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa4>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xec>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 8092 	bne.w	800044a <__udivmoddi4+0x21a>
 8000326:	eba1 010c 	sub.w	r1, r1, ip
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2601      	movs	r6, #1
 8000334:	0c20      	lsrs	r0, r4, #16
 8000336:	fbb1 f3f7 	udiv	r3, r1, r7
 800033a:	fb07 1113 	mls	r1, r7, r3, r1
 800033e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000342:	fb0e f003 	mul.w	r0, lr, r3
 8000346:	4288      	cmp	r0, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x12c>
 800034a:	eb1c 0101 	adds.w	r1, ip, r1
 800034e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x12a>
 8000354:	4288      	cmp	r0, r1
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2c0>
 800035a:	4643      	mov	r3, r8
 800035c:	1a09      	subs	r1, r1, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb1 f0f7 	udiv	r0, r1, r7
 8000364:	fb07 1110 	mls	r1, r7, r0, r1
 8000368:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x156>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 31ff 	add.w	r1, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x154>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 8000384:	4608      	mov	r0, r1
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038e:	e79c      	b.n	80002ca <__udivmoddi4+0x9a>
 8000390:	f1c6 0720 	rsb	r7, r6, #32
 8000394:	40b3      	lsls	r3, r6
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa20 f407 	lsr.w	r4, r0, r7
 80003a2:	fa01 f306 	lsl.w	r3, r1, r6
 80003a6:	431c      	orrs	r4, r3
 80003a8:	40f9      	lsrs	r1, r7
 80003aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ae:	fa00 f306 	lsl.w	r3, r0, r6
 80003b2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b6:	0c20      	lsrs	r0, r4, #16
 80003b8:	fa1f fe8c 	uxth.w	lr, ip
 80003bc:	fb09 1118 	mls	r1, r9, r8, r1
 80003c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c4:	fb08 f00e 	mul.w	r0, r8, lr
 80003c8:	4288      	cmp	r0, r1
 80003ca:	fa02 f206 	lsl.w	r2, r2, r6
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b8>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2bc>
 80003dc:	4288      	cmp	r0, r1
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2bc>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4461      	add	r1, ip
 80003e8:	1a09      	subs	r1, r1, r0
 80003ea:	b2a4      	uxth	r4, r4
 80003ec:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f0:	fb09 1110 	mls	r1, r9, r0, r1
 80003f4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003fc:	458e      	cmp	lr, r1
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1e2>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f100 34ff 	add.w	r4, r0, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2b4>
 800040a:	458e      	cmp	lr, r1
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2b4>
 800040e:	3802      	subs	r0, #2
 8000410:	4461      	add	r1, ip
 8000412:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000416:	fba0 9402 	umull	r9, r4, r0, r2
 800041a:	eba1 010e 	sub.w	r1, r1, lr
 800041e:	42a1      	cmp	r1, r4
 8000420:	46c8      	mov	r8, r9
 8000422:	46a6      	mov	lr, r4
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x2a4>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x2a0>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x212>
 800042a:	ebb3 0208 	subs.w	r2, r3, r8
 800042e:	eb61 010e 	sbc.w	r1, r1, lr
 8000432:	fa01 f707 	lsl.w	r7, r1, r7
 8000436:	fa22 f306 	lsr.w	r3, r2, r6
 800043a:	40f1      	lsrs	r1, r6
 800043c:	431f      	orrs	r7, r3
 800043e:	e9c5 7100 	strd	r7, r1, [r5]
 8000442:	2600      	movs	r6, #0
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	f1c2 0320 	rsb	r3, r2, #32
 800044e:	40d8      	lsrs	r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa21 f303 	lsr.w	r3, r1, r3
 8000458:	4091      	lsls	r1, r2
 800045a:	4301      	orrs	r1, r0
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb3 f0f7 	udiv	r0, r3, r7
 8000468:	fb07 3610 	mls	r6, r7, r0, r3
 800046c:	0c0b      	lsrs	r3, r1, #16
 800046e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000472:	fb00 f60e 	mul.w	r6, r0, lr
 8000476:	429e      	cmp	r6, r3
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x260>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b8>
 8000488:	429e      	cmp	r6, r3
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b8>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1b9b      	subs	r3, r3, r6
 8000492:	b289      	uxth	r1, r1
 8000494:	fbb3 f6f7 	udiv	r6, r3, r7
 8000498:	fb07 3316 	mls	r3, r7, r6, r3
 800049c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a0:	fb06 f30e 	mul.w	r3, r6, lr
 80004a4:	428b      	cmp	r3, r1
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x28a>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 80004b6:	3e02      	subs	r6, #2
 80004b8:	4461      	add	r1, ip
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0x104>
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e705      	b.n	80002d4 <__udivmoddi4+0xa4>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e3      	b.n	8000294 <__udivmoddi4+0x64>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6f8      	b.n	80002c2 <__udivmoddi4+0x92>
 80004d0:	454b      	cmp	r3, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f8>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004dc:	3801      	subs	r0, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f8>
 80004e0:	4646      	mov	r6, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x28a>
 80004e4:	4620      	mov	r0, r4
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1e2>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x260>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b8>
 80004f0:	3b02      	subs	r3, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x12c>
 80004f6:	4630      	mov	r0, r6
 80004f8:	e709      	b.n	800030e <__udivmoddi4+0xde>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x156>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of eventQueue */
  eventQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &eventQueue_attributes);
 8000508:	4a08      	ldr	r2, [pc, #32]	; (800052c <MX_FREERTOS_Init+0x28>)
 800050a:	2102      	movs	r1, #2
 800050c:	2010      	movs	r0, #16
 800050e:	f004 fb08 	bl	8004b22 <osMessageQueueNew>
 8000512:	4603      	mov	r3, r0
 8000514:	4a06      	ldr	r2, [pc, #24]	; (8000530 <MX_FREERTOS_Init+0x2c>)
 8000516:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of eventHandlTask */
  eventHandlTaskHandle = osThreadNew(EventHandlerTask, NULL, &eventHandlTask_attributes);
 8000518:	4a06      	ldr	r2, [pc, #24]	; (8000534 <MX_FREERTOS_Init+0x30>)
 800051a:	2100      	movs	r1, #0
 800051c:	4806      	ldr	r0, [pc, #24]	; (8000538 <MX_FREERTOS_Init+0x34>)
 800051e:	f004 fa53 	bl	80049c8 <osThreadNew>
 8000522:	4603      	mov	r3, r0
 8000524:	4a05      	ldr	r2, [pc, #20]	; (800053c <MX_FREERTOS_Init+0x38>)
 8000526:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	08007610 	.word	0x08007610
 8000530:	20000030 	.word	0x20000030
 8000534:	080075ec 	.word	0x080075ec
 8000538:	08000541 	.word	0x08000541
 800053c:	2000002c 	.word	0x2000002c

08000540 <EventHandlerTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_EventHandlerTask */
void EventHandlerTask(void *argument)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EventHandlerTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000548:	2001      	movs	r0, #1
 800054a:	f004 facf 	bl	8004aec <osDelay>
 800054e:	e7fb      	b.n	8000548 <EventHandlerTask+0x8>

08000550 <MX_GPIO_Init>:
     PD6   ------> USART2_RX
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b08c      	sub	sp, #48	; 0x30
 8000554:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000556:	f107 031c 	add.w	r3, r7, #28
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
 8000564:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000566:	4bb9      	ldr	r3, [pc, #740]	; (800084c <MX_GPIO_Init+0x2fc>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056a:	4ab8      	ldr	r2, [pc, #736]	; (800084c <MX_GPIO_Init+0x2fc>)
 800056c:	f043 0310 	orr.w	r3, r3, #16
 8000570:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000572:	4bb6      	ldr	r3, [pc, #728]	; (800084c <MX_GPIO_Init+0x2fc>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000576:	f003 0310 	and.w	r3, r3, #16
 800057a:	61bb      	str	r3, [r7, #24]
 800057c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057e:	4bb3      	ldr	r3, [pc, #716]	; (800084c <MX_GPIO_Init+0x2fc>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	4ab2      	ldr	r2, [pc, #712]	; (800084c <MX_GPIO_Init+0x2fc>)
 8000584:	f043 0304 	orr.w	r3, r3, #4
 8000588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058a:	4bb0      	ldr	r3, [pc, #704]	; (800084c <MX_GPIO_Init+0x2fc>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058e:	f003 0304 	and.w	r3, r3, #4
 8000592:	617b      	str	r3, [r7, #20]
 8000594:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000596:	4bad      	ldr	r3, [pc, #692]	; (800084c <MX_GPIO_Init+0x2fc>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059a:	4aac      	ldr	r2, [pc, #688]	; (800084c <MX_GPIO_Init+0x2fc>)
 800059c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a2:	4baa      	ldr	r3, [pc, #680]	; (800084c <MX_GPIO_Init+0x2fc>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005aa:	613b      	str	r3, [r7, #16]
 80005ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	4ba7      	ldr	r3, [pc, #668]	; (800084c <MX_GPIO_Init+0x2fc>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b2:	4aa6      	ldr	r2, [pc, #664]	; (800084c <MX_GPIO_Init+0x2fc>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ba:	4ba4      	ldr	r3, [pc, #656]	; (800084c <MX_GPIO_Init+0x2fc>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c6:	4ba1      	ldr	r3, [pc, #644]	; (800084c <MX_GPIO_Init+0x2fc>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ca:	4aa0      	ldr	r2, [pc, #640]	; (800084c <MX_GPIO_Init+0x2fc>)
 80005cc:	f043 0302 	orr.w	r3, r3, #2
 80005d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d2:	4b9e      	ldr	r3, [pc, #632]	; (800084c <MX_GPIO_Init+0x2fc>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d6:	f003 0302 	and.w	r3, r3, #2
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005de:	4b9b      	ldr	r3, [pc, #620]	; (800084c <MX_GPIO_Init+0x2fc>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	4a9a      	ldr	r2, [pc, #616]	; (800084c <MX_GPIO_Init+0x2fc>)
 80005e4:	f043 0308 	orr.w	r3, r3, #8
 80005e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ea:	4b98      	ldr	r3, [pc, #608]	; (800084c <MX_GPIO_Init+0x2fc>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ee:	f003 0308 	and.w	r3, r3, #8
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	f240 1105 	movw	r1, #261	; 0x105
 80005fc:	4894      	ldr	r0, [pc, #592]	; (8000850 <MX_GPIO_Init+0x300>)
 80005fe:	f000 ff5f 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8000602:	2200      	movs	r2, #0
 8000604:	f248 111c 	movw	r1, #33052	; 0x811c
 8000608:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060c:	f000 ff58 	bl	80014c0 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000610:	2200      	movs	r2, #0
 8000612:	f24f 0134 	movw	r1, #61492	; 0xf034
 8000616:	488f      	ldr	r0, [pc, #572]	; (8000854 <MX_GPIO_Init+0x304>)
 8000618:	f000 ff52 	bl	80014c0 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	f242 0183 	movw	r1, #8323	; 0x2083
 8000622:	488d      	ldr	r0, [pc, #564]	; (8000858 <MX_GPIO_Init+0x308>)
 8000624:	f000 ff4c 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800062e:	488b      	ldr	r0, [pc, #556]	; (800085c <MX_GPIO_Init+0x30c>)
 8000630:	f000 ff46 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000634:	f240 1305 	movw	r3, #261	; 0x105
 8000638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063a:	2301      	movs	r3, #1
 800063c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	2300      	movs	r3, #0
 8000644:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000646:	f107 031c 	add.w	r3, r7, #28
 800064a:	4619      	mov	r1, r3
 800064c:	4880      	ldr	r0, [pc, #512]	; (8000850 <MX_GPIO_Init+0x300>)
 800064e:	f000 fda5 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 8000652:	237a      	movs	r3, #122	; 0x7a
 8000654:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000656:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800065a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000660:	f107 031c 	add.w	r3, r7, #28
 8000664:	4619      	mov	r1, r3
 8000666:	487a      	ldr	r0, [pc, #488]	; (8000850 <MX_GPIO_Init+0x300>)
 8000668:	f000 fd98 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 800066c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000672:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	4876      	ldr	r0, [pc, #472]	; (800085c <MX_GPIO_Init+0x30c>)
 8000684:	f000 fd8a 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000688:	233f      	movs	r3, #63	; 0x3f
 800068a:	61fb      	str	r3, [r7, #28]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800068c:	230b      	movs	r3, #11
 800068e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000694:	f107 031c 	add.w	r3, r7, #28
 8000698:	4619      	mov	r1, r3
 800069a:	4870      	ldr	r0, [pc, #448]	; (800085c <MX_GPIO_Init+0x30c>)
 800069c:	f000 fd7e 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80006a0:	2303      	movs	r3, #3
 80006a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a4:	2302      	movs	r3, #2
 80006a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ac:	2303      	movs	r3, #3
 80006ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80006b0:	2308      	movs	r3, #8
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	4619      	mov	r1, r3
 80006ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006be:	f000 fd6d 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 80006c2:	f248 131c 	movw	r3, #33052	; 0x811c
 80006c6:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c8:	2301      	movs	r3, #1
 80006ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d0:	2300      	movs	r3, #0
 80006d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d4:	f107 031c 	add.w	r3, r7, #28
 80006d8:	4619      	mov	r1, r3
 80006da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006de:	f000 fd5d 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80006e2:	23e0      	movs	r3, #224	; 0xe0
 80006e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e6:	2302      	movs	r3, #2
 80006e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ee:	2303      	movs	r3, #3
 80006f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006f2:	2305      	movs	r3, #5
 80006f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	4619      	mov	r1, r3
 80006fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000700:	f000 fd4c 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000704:	2301      	movs	r3, #1
 8000706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000708:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800070c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	4619      	mov	r1, r3
 8000718:	484e      	ldr	r0, [pc, #312]	; (8000854 <MX_GPIO_Init+0x304>)
 800071a:	f000 fd3f 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800071e:	2302      	movs	r3, #2
 8000720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000722:	2302      	movs	r3, #2
 8000724:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072a:	2300      	movs	r3, #0
 800072c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800072e:	2302      	movs	r3, #2
 8000730:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	4619      	mov	r1, r3
 8000738:	4846      	ldr	r0, [pc, #280]	; (8000854 <MX_GPIO_Init+0x304>)
 800073a:	f000 fd2f 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800073e:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000742:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000744:	2301      	movs	r3, #1
 8000746:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	2300      	movs	r3, #0
 800074e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000750:	f107 031c 	add.w	r3, r7, #28
 8000754:	4619      	mov	r1, r3
 8000756:	483f      	ldr	r0, [pc, #252]	; (8000854 <MX_GPIO_Init+0x304>)
 8000758:	f000 fd20 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800075c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000762:	2302      	movs	r3, #2
 8000764:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800076e:	2306      	movs	r3, #6
 8000770:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	4619      	mov	r1, r3
 8000778:	4835      	ldr	r0, [pc, #212]	; (8000850 <MX_GPIO_Init+0x300>)
 800077a:	f000 fd0f 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800077e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000782:	61fb      	str	r3, [r7, #28]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000784:	2302      	movs	r3, #2
 8000786:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078c:	2303      	movs	r3, #3
 800078e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000790:	230a      	movs	r3, #10
 8000792:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000794:	f107 031c 	add.w	r3, r7, #28
 8000798:	4619      	mov	r1, r3
 800079a:	482d      	ldr	r0, [pc, #180]	; (8000850 <MX_GPIO_Init+0x300>)
 800079c:	f000 fcfe 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80007a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80007a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007a6:	2312      	movs	r3, #18
 80007a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ae:	2303      	movs	r3, #3
 80007b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80007b2:	2304      	movs	r3, #4
 80007b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	4619      	mov	r1, r3
 80007bc:	4825      	ldr	r0, [pc, #148]	; (8000854 <MX_GPIO_Init+0x304>)
 80007be:	f000 fced 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80007c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c8:	2302      	movs	r3, #2
 80007ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d0:	2303      	movs	r3, #3
 80007d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80007d4:	2307      	movs	r3, #7
 80007d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	4619      	mov	r1, r3
 80007de:	481e      	ldr	r0, [pc, #120]	; (8000858 <MX_GPIO_Init+0x308>)
 80007e0:	f000 fcdc 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 80007e4:	f64d 4304 	movw	r3, #56324	; 0xdc04
 80007e8:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007f4:	f107 031c 	add.w	r3, r7, #28
 80007f8:	4619      	mov	r1, r3
 80007fa:	4817      	ldr	r0, [pc, #92]	; (8000858 <MX_GPIO_Init+0x308>)
 80007fc:	f000 fcce 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8000800:	f242 0383 	movw	r3, #8323	; 0x2083
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	480f      	ldr	r0, [pc, #60]	; (8000858 <MX_GPIO_Init+0x308>)
 800081a:	f000 fcbf 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800081e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	4619      	mov	r1, r3
 8000836:	4809      	ldr	r0, [pc, #36]	; (800085c <MX_GPIO_Init+0x30c>)
 8000838:	f000 fcb0 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 800083c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000842:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	e009      	b.n	8000860 <MX_GPIO_Init+0x310>
 800084c:	40021000 	.word	0x40021000
 8000850:	48001000 	.word	0x48001000
 8000854:	48000400 	.word	0x48000400
 8000858:	48000c00 	.word	0x48000c00
 800085c:	48000800 	.word	0x48000800
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	4838      	ldr	r0, [pc, #224]	; (800094c <MX_GPIO_Init+0x3fc>)
 800086a:	f000 fc97 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800086e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000886:	f000 fc89 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800088a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000890:	2303      	movs	r3, #3
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a2:	f000 fc7b 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80008a6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b4:	2303      	movs	r3, #3
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008b8:	2306      	movs	r3, #6
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	4822      	ldr	r0, [pc, #136]	; (800094c <MX_GPIO_Init+0x3fc>)
 80008c4:	f000 fc6a 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80008c8:	2378      	movs	r3, #120	; 0x78
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d4:	2303      	movs	r3, #3
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008d8:	2307      	movs	r3, #7
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	481b      	ldr	r0, [pc, #108]	; (8000950 <MX_GPIO_Init+0x400>)
 80008e4:	f000 fc5a 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008e8:	2308      	movs	r3, #8
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ec:	2303      	movs	r3, #3
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4816      	ldr	r0, [pc, #88]	; (8000954 <MX_GPIO_Init+0x404>)
 80008fc:	f000 fc4e 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000900:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000906:	2312      	movs	r3, #18
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800090a:	2301      	movs	r3, #1
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090e:	2303      	movs	r3, #3
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000912:	2304      	movs	r3, #4
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	480e      	ldr	r0, [pc, #56]	; (8000958 <MX_GPIO_Init+0x408>)
 800091e:	f000 fc3d 	bl	800119c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	2105      	movs	r1, #5
 8000926:	2017      	movs	r0, #23
 8000928:	f000 fb52 	bl	8000fd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800092c:	2017      	movs	r0, #23
 800092e:	f000 fb6b 	bl	8001008 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	2105      	movs	r1, #5
 8000936:	2028      	movs	r0, #40	; 0x28
 8000938:	f000 fb4a 	bl	8000fd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800093c:	2028      	movs	r0, #40	; 0x28
 800093e:	f000 fb63 	bl	8001008 <HAL_NVIC_EnableIRQ>

}
 8000942:	bf00      	nop
 8000944:	3730      	adds	r7, #48	; 0x30
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	48000800 	.word	0x48000800
 8000950:	48000c00 	.word	0x48000c00
 8000954:	48001c00 	.word	0x48001c00
 8000958:	48000400 	.word	0x48000400

0800095c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000960:	f000 fa45 	bl	8000dee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000964:	f000 f80b 	bl	800097e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000968:	f7ff fdf2 	bl	8000550 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800096c:	f000 f97e 	bl	8000c6c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000970:	f003 ffe0 	bl	8004934 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000974:	f7ff fdc6 	bl	8000504 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000978:	f004 f800 	bl	800497c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800097c:	e7fe      	b.n	800097c <main+0x20>

0800097e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b0bc      	sub	sp, #240	; 0xf0
 8000982:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000984:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000988:	2244      	movs	r2, #68	; 0x44
 800098a:	2100      	movs	r1, #0
 800098c:	4618      	mov	r0, r3
 800098e:	f006 fdff 	bl	8007590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000992:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	2294      	movs	r2, #148	; 0x94
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f006 fdf1 	bl	8007590 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80009ae:	2000      	movs	r0, #0
 80009b0:	f000 fde2 	bl	8001578 <HAL_PWREx_ControlVoltageScaling>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0x40>
  {
    Error_Handler();
 80009ba:	f000 f869 	bl	8000a90 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80009be:	2310      	movs	r3, #16
 80009c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009c4:	2301      	movs	r3, #1
 80009c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009d0:	2360      	movs	r3, #96	; 0x60
 80009d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d6:	2302      	movs	r3, #2
 80009d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80009dc:	2301      	movs	r3, #1
 80009de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009e2:	2301      	movs	r3, #1
 80009e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 60;
 80009e8:	233c      	movs	r3, #60	; 0x3c
 80009ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009ee:	2302      	movs	r3, #2
 80009f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009f4:	2302      	movs	r3, #2
 80009f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009fa:	2302      	movs	r3, #2
 80009fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a00:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a04:	4618      	mov	r0, r3
 8000a06:	f000 fe5b 	bl	80016c0 <HAL_RCC_OscConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a10:	f000 f83e 	bl	8000a90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a14:	230f      	movs	r3, #15
 8000a16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a26:	2300      	movs	r3, #0
 8000a28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a32:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a36:	2105      	movs	r1, #5
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f001 fa5b 	bl	8001ef4 <HAL_RCC_ClockConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a44:	f000 f824 	bl	8000a90 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	4618      	mov	r0, r3
 8000a54:	f001 fd3e 	bl	80024d4 <HAL_RCCEx_PeriphCLKConfig>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000a5e:	f000 f817 	bl	8000a90 <Error_Handler>
  }
}
 8000a62:	bf00      	nop
 8000a64:	37f0      	adds	r7, #240	; 0xf0
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d101      	bne.n	8000a82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a7e:	f000 f9cf 	bl	8000e20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40001000 	.word	0x40001000

08000a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a94:	b672      	cpsid	i
}
 8000a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <Error_Handler+0x8>
	...

08000a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aa6:	4a10      	ldr	r2, [pc, #64]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6613      	str	r3, [r2, #96]	; 0x60
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000abe:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <HAL_MspInit+0x4c>)
 8000ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	210f      	movs	r1, #15
 8000ad6:	f06f 0001 	mvn.w	r0, #1
 8000ada:	f000 fa79 	bl	8000fd0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40021000 	.word	0x40021000

08000aec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08c      	sub	sp, #48	; 0x30
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000afc:	2200      	movs	r2, #0
 8000afe:	6879      	ldr	r1, [r7, #4]
 8000b00:	2036      	movs	r0, #54	; 0x36
 8000b02:	f000 fa65 	bl	8000fd0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b06:	2036      	movs	r0, #54	; 0x36
 8000b08:	f000 fa7e 	bl	8001008 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b0c:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <HAL_InitTick+0x9c>)
 8000b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b10:	4a1d      	ldr	r2, [pc, #116]	; (8000b88 <HAL_InitTick+0x9c>)
 8000b12:	f043 0310 	orr.w	r3, r3, #16
 8000b16:	6593      	str	r3, [r2, #88]	; 0x58
 8000b18:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <HAL_InitTick+0x9c>)
 8000b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1c:	f003 0310 	and.w	r3, r3, #16
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b24:	f107 0210 	add.w	r2, r7, #16
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4611      	mov	r1, r2
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f001 fbde 	bl	80022f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b34:	f001 fbb0 	bl	8002298 <HAL_RCC_GetPCLK1Freq>
 8000b38:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b3c:	4a13      	ldr	r2, [pc, #76]	; (8000b8c <HAL_InitTick+0xa0>)
 8000b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b42:	0c9b      	lsrs	r3, r3, #18
 8000b44:	3b01      	subs	r3, #1
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <HAL_InitTick+0xa4>)
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <HAL_InitTick+0xa8>)
 8000b4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <HAL_InitTick+0xa4>)
 8000b50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b54:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_InitTick+0xa4>)
 8000b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b5a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_InitTick+0xa4>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <HAL_InitTick+0xa4>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b68:	4809      	ldr	r0, [pc, #36]	; (8000b90 <HAL_InitTick+0xa4>)
 8000b6a:	f002 f9cb 	bl	8002f04 <HAL_TIM_Base_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d104      	bne.n	8000b7e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000b74:	4806      	ldr	r0, [pc, #24]	; (8000b90 <HAL_InitTick+0xa4>)
 8000b76:	f002 fa27 	bl	8002fc8 <HAL_TIM_Base_Start_IT>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	e000      	b.n	8000b80 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3730      	adds	r7, #48	; 0x30
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	431bde83 	.word	0x431bde83
 8000b90:	20000034 	.word	0x20000034
 8000b94:	40001000 	.word	0x40001000

08000b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <NMI_Handler+0x4>

08000b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <HardFault_Handler+0x4>

08000ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <MemManage_Handler+0x4>

08000baa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <BusFault_Handler+0x4>

08000bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <UsageFault_Handler+0x4>

08000bb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000bc8:	2020      	movs	r0, #32
 8000bca:	f000 fc91 	bl	80014f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000bce:	2040      	movs	r0, #64	; 0x40
 8000bd0:	f000 fc8e 	bl	80014f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000bd4:	2080      	movs	r0, #128	; 0x80
 8000bd6:	f000 fc8b 	bl	80014f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000bda:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000bde:	f000 fc87 	bl	80014f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bec:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <USART1_IRQHandler+0x10>)
 8000bee:	f002 fcab 	bl	8003548 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000080 	.word	0x20000080

08000bfc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000c00:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000c04:	f000 fc74 	bl	80014f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000c08:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000c0c:	f000 fc70 	bl	80014f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000c10:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000c14:	f000 fc6c 	bl	80014f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c18:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c1c:	f000 fc68 	bl	80014f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000c20:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000c24:	f000 fc64 	bl	80014f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000c28:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000c2c:	f000 fc60 	bl	80014f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c38:	4802      	ldr	r0, [pc, #8]	; (8000c44 <TIM6_DAC_IRQHandler+0x10>)
 8000c3a:	f002 fa35 	bl	80030a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000034 	.word	0x20000034

08000c48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <SystemInit+0x20>)
 8000c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c52:	4a05      	ldr	r2, [pc, #20]	; (8000c68 <SystemInit+0x20>)
 8000c54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c70:	4b22      	ldr	r3, [pc, #136]	; (8000cfc <MX_USART1_UART_Init+0x90>)
 8000c72:	4a23      	ldr	r2, [pc, #140]	; (8000d00 <MX_USART1_UART_Init+0x94>)
 8000c74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c76:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <MX_USART1_UART_Init+0x90>)
 8000c78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7e:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <MX_USART1_UART_Init+0x90>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c84:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <MX_USART1_UART_Init+0x90>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <MX_USART1_UART_Init+0x90>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c90:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <MX_USART1_UART_Init+0x90>)
 8000c92:	220c      	movs	r2, #12
 8000c94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <MX_USART1_UART_Init+0x90>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c9c:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <MX_USART1_UART_Init+0x90>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <MX_USART1_UART_Init+0x90>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ca8:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <MX_USART1_UART_Init+0x90>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cae:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <MX_USART1_UART_Init+0x90>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cb4:	4811      	ldr	r0, [pc, #68]	; (8000cfc <MX_USART1_UART_Init+0x90>)
 8000cb6:	f002 fbf7 	bl	80034a8 <HAL_UART_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000cc0:	f7ff fee6 	bl	8000a90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	480d      	ldr	r0, [pc, #52]	; (8000cfc <MX_USART1_UART_Init+0x90>)
 8000cc8:	f003 fd25 	bl	8004716 <HAL_UARTEx_SetTxFifoThreshold>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000cd2:	f7ff fedd 	bl	8000a90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4808      	ldr	r0, [pc, #32]	; (8000cfc <MX_USART1_UART_Init+0x90>)
 8000cda:	f003 fd5a 	bl	8004792 <HAL_UARTEx_SetRxFifoThreshold>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ce4:	f7ff fed4 	bl	8000a90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ce8:	4804      	ldr	r0, [pc, #16]	; (8000cfc <MX_USART1_UART_Init+0x90>)
 8000cea:	f003 fcdb 	bl	80046a4 <HAL_UARTEx_DisableFifoMode>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000cf4:	f7ff fecc 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000080 	.word	0x20000080
 8000d00:	40013800 	.word	0x40013800

08000d04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	; 0x28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a1b      	ldr	r2, [pc, #108]	; (8000d90 <HAL_UART_MspInit+0x8c>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d12f      	bne.n	8000d86 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d26:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <HAL_UART_MspInit+0x90>)
 8000d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d2a:	4a1a      	ldr	r2, [pc, #104]	; (8000d94 <HAL_UART_MspInit+0x90>)
 8000d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d30:	6613      	str	r3, [r2, #96]	; 0x60
 8000d32:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <HAL_UART_MspInit+0x90>)
 8000d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <HAL_UART_MspInit+0x90>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	4a14      	ldr	r2, [pc, #80]	; (8000d94 <HAL_UART_MspInit+0x90>)
 8000d44:	f043 0302 	orr.w	r3, r3, #2
 8000d48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4a:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <HAL_UART_MspInit+0x90>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000d56:	23c0      	movs	r3, #192	; 0xc0
 8000d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d66:	2307      	movs	r3, #7
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4809      	ldr	r0, [pc, #36]	; (8000d98 <HAL_UART_MspInit+0x94>)
 8000d72:	f000 fa13 	bl	800119c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2105      	movs	r1, #5
 8000d7a:	2025      	movs	r0, #37	; 0x25
 8000d7c:	f000 f928 	bl	8000fd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d80:	2025      	movs	r0, #37	; 0x25
 8000d82:	f000 f941 	bl	8001008 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d86:	bf00      	nop
 8000d88:	3728      	adds	r7, #40	; 0x28
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40013800 	.word	0x40013800
 8000d94:	40021000 	.word	0x40021000
 8000d98:	48000400 	.word	0x48000400

08000d9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000da0:	f7ff ff52 	bl	8000c48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da4:	480c      	ldr	r0, [pc, #48]	; (8000dd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000da6:	490d      	ldr	r1, [pc, #52]	; (8000ddc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000da8:	4a0d      	ldr	r2, [pc, #52]	; (8000de0 <LoopForever+0xe>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dac:	e002      	b.n	8000db4 <LoopCopyDataInit>

08000dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db2:	3304      	adds	r3, #4

08000db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db8:	d3f9      	bcc.n	8000dae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dba:	4a0a      	ldr	r2, [pc, #40]	; (8000de4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dbc:	4c0a      	ldr	r4, [pc, #40]	; (8000de8 <LoopForever+0x16>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc0:	e001      	b.n	8000dc6 <LoopFillZerobss>

08000dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc4:	3204      	adds	r2, #4

08000dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc8:	d3fb      	bcc.n	8000dc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dca:	f006 fbaf 	bl	800752c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dce:	f7ff fdc5 	bl	800095c <main>

08000dd2 <LoopForever>:

LoopForever:
    b LoopForever
 8000dd2:	e7fe      	b.n	8000dd2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dd4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000dd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ddc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000de0:	080076a8 	.word	0x080076a8
  ldr r2, =_sbss
 8000de4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000de8:	20001a1c 	.word	0x20001a1c

08000dec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dec:	e7fe      	b.n	8000dec <ADC1_IRQHandler>

08000dee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000df4:	2300      	movs	r3, #0
 8000df6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df8:	2003      	movs	r0, #3
 8000dfa:	f000 f8de 	bl	8000fba <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f7ff fe74 	bl	8000aec <HAL_InitTick>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d002      	beq.n	8000e10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	71fb      	strb	r3, [r7, #7]
 8000e0e:	e001      	b.n	8000e14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e10:	f7ff fe44 	bl	8000a9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e14:	79fb      	ldrb	r3, [r7, #7]
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_IncTick+0x20>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_IncTick+0x24>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <HAL_IncTick+0x24>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000008 	.word	0x20000008
 8000e44:	20000110 	.word	0x20000110

08000e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <HAL_GetTick+0x14>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000110 	.word	0x20000110

08000e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e76:	68ba      	ldr	r2, [r7, #8]
 8000e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e92:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	60d3      	str	r3, [r2, #12]
}
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	0a1b      	lsrs	r3, r3, #8
 8000eb2:	f003 0307 	and.w	r3, r3, #7
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	db0b      	blt.n	8000eee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	f003 021f 	and.w	r2, r3, #31
 8000edc:	4907      	ldr	r1, [pc, #28]	; (8000efc <__NVIC_EnableIRQ+0x38>)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	095b      	lsrs	r3, r3, #5
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000e100 	.word	0xe000e100

08000f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	db0a      	blt.n	8000f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	490c      	ldr	r1, [pc, #48]	; (8000f4c <__NVIC_SetPriority+0x4c>)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	0112      	lsls	r2, r2, #4
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	440b      	add	r3, r1
 8000f24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f28:	e00a      	b.n	8000f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4908      	ldr	r1, [pc, #32]	; (8000f50 <__NVIC_SetPriority+0x50>)
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	f003 030f 	and.w	r3, r3, #15
 8000f36:	3b04      	subs	r3, #4
 8000f38:	0112      	lsls	r2, r2, #4
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	761a      	strb	r2, [r3, #24]
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000e100 	.word	0xe000e100
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b089      	sub	sp, #36	; 0x24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f1c3 0307 	rsb	r3, r3, #7
 8000f6e:	2b04      	cmp	r3, #4
 8000f70:	bf28      	it	cs
 8000f72:	2304      	movcs	r3, #4
 8000f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3304      	adds	r3, #4
 8000f7a:	2b06      	cmp	r3, #6
 8000f7c:	d902      	bls.n	8000f84 <NVIC_EncodePriority+0x30>
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3b03      	subs	r3, #3
 8000f82:	e000      	b.n	8000f86 <NVIC_EncodePriority+0x32>
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	f04f 32ff 	mov.w	r2, #4294967295
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43da      	mvns	r2, r3
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	401a      	ands	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa6:	43d9      	mvns	r1, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	4313      	orrs	r3, r2
         );
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3724      	adds	r7, #36	; 0x24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff ff4c 	bl	8000e60 <__NVIC_SetPriorityGrouping>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe2:	f7ff ff61 	bl	8000ea8 <__NVIC_GetPriorityGrouping>
 8000fe6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	68b9      	ldr	r1, [r7, #8]
 8000fec:	6978      	ldr	r0, [r7, #20]
 8000fee:	f7ff ffb1 	bl	8000f54 <NVIC_EncodePriority>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff ff80 	bl	8000f00 <__NVIC_SetPriority>
}
 8001000:	bf00      	nop
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff ff54 	bl	8000ec4 <__NVIC_EnableIRQ>
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800102c:	2300      	movs	r3, #0
 800102e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d008      	beq.n	800104e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2204      	movs	r2, #4
 8001040:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e040      	b.n	80010d0 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f022 020e 	bic.w	r2, r2, #14
 800105c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001068:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800106c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f022 0201 	bic.w	r2, r2, #1
 800107c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	f003 021c 	and.w	r2, r3, #28
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	2101      	movs	r1, #1
 800108c:	fa01 f202 	lsl.w	r2, r1, r2
 8001090:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800109a:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d00c      	beq.n	80010be <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010b2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80010bc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2201      	movs	r2, #1
 80010c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010e4:	2300      	movs	r3, #0
 80010e6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d005      	beq.n	8001100 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2204      	movs	r2, #4
 80010f8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	73fb      	strb	r3, [r7, #15]
 80010fe:	e047      	b.n	8001190 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 020e 	bic.w	r2, r2, #14
 800110e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f022 0201 	bic.w	r2, r2, #1
 800111e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800112a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800112e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001134:	f003 021c 	and.w	r2, r3, #28
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	2101      	movs	r1, #1
 800113e:	fa01 f202 	lsl.w	r2, r1, r2
 8001142:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800114c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001152:	2b00      	cmp	r3, #0
 8001154:	d00c      	beq.n	8001170 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001160:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001164:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800116e:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2201      	movs	r2, #1
 8001174:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	4798      	blx	r3
    }
  }
  return status;
 8001190:	7bfb      	ldrb	r3, [r7, #15]
}
 8001192:	4618      	mov	r0, r3
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800119c:	b480      	push	{r7}
 800119e:	b087      	sub	sp, #28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011aa:	e166      	b.n	800147a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	2101      	movs	r1, #1
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	fa01 f303 	lsl.w	r3, r1, r3
 80011b8:	4013      	ands	r3, r2
 80011ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f000 8158 	beq.w	8001474 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d005      	beq.n	80011dc <HAL_GPIO_Init+0x40>
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0303 	and.w	r3, r3, #3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d130      	bne.n	800123e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	2203      	movs	r2, #3
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4013      	ands	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	68da      	ldr	r2, [r3, #12]
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4313      	orrs	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001212:	2201      	movs	r2, #1
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	091b      	lsrs	r3, r3, #4
 8001228:	f003 0201 	and.w	r2, r3, #1
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	2b03      	cmp	r3, #3
 8001248:	d017      	beq.n	800127a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	2203      	movs	r2, #3
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4013      	ands	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 0303 	and.w	r3, r3, #3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d123      	bne.n	80012ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	08da      	lsrs	r2, r3, #3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	3208      	adds	r2, #8
 800128e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001292:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	220f      	movs	r2, #15
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4013      	ands	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	691a      	ldr	r2, [r3, #16]
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	f003 0307 	and.w	r3, r3, #7
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	08da      	lsrs	r2, r3, #3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3208      	adds	r2, #8
 80012c8:	6939      	ldr	r1, [r7, #16]
 80012ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	2203      	movs	r2, #3
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4013      	ands	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 0203 	and.w	r2, r3, #3
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 80b2 	beq.w	8001474 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001310:	4b61      	ldr	r3, [pc, #388]	; (8001498 <HAL_GPIO_Init+0x2fc>)
 8001312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001314:	4a60      	ldr	r2, [pc, #384]	; (8001498 <HAL_GPIO_Init+0x2fc>)
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	6613      	str	r3, [r2, #96]	; 0x60
 800131c:	4b5e      	ldr	r3, [pc, #376]	; (8001498 <HAL_GPIO_Init+0x2fc>)
 800131e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001328:	4a5c      	ldr	r2, [pc, #368]	; (800149c <HAL_GPIO_Init+0x300>)
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	089b      	lsrs	r3, r3, #2
 800132e:	3302      	adds	r3, #2
 8001330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001334:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	f003 0303 	and.w	r3, r3, #3
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	220f      	movs	r2, #15
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4013      	ands	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001352:	d02b      	beq.n	80013ac <HAL_GPIO_Init+0x210>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a52      	ldr	r2, [pc, #328]	; (80014a0 <HAL_GPIO_Init+0x304>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d025      	beq.n	80013a8 <HAL_GPIO_Init+0x20c>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a51      	ldr	r2, [pc, #324]	; (80014a4 <HAL_GPIO_Init+0x308>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d01f      	beq.n	80013a4 <HAL_GPIO_Init+0x208>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a50      	ldr	r2, [pc, #320]	; (80014a8 <HAL_GPIO_Init+0x30c>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d019      	beq.n	80013a0 <HAL_GPIO_Init+0x204>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a4f      	ldr	r2, [pc, #316]	; (80014ac <HAL_GPIO_Init+0x310>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d013      	beq.n	800139c <HAL_GPIO_Init+0x200>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a4e      	ldr	r2, [pc, #312]	; (80014b0 <HAL_GPIO_Init+0x314>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d00d      	beq.n	8001398 <HAL_GPIO_Init+0x1fc>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a4d      	ldr	r2, [pc, #308]	; (80014b4 <HAL_GPIO_Init+0x318>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d007      	beq.n	8001394 <HAL_GPIO_Init+0x1f8>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4a4c      	ldr	r2, [pc, #304]	; (80014b8 <HAL_GPIO_Init+0x31c>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d101      	bne.n	8001390 <HAL_GPIO_Init+0x1f4>
 800138c:	2307      	movs	r3, #7
 800138e:	e00e      	b.n	80013ae <HAL_GPIO_Init+0x212>
 8001390:	2308      	movs	r3, #8
 8001392:	e00c      	b.n	80013ae <HAL_GPIO_Init+0x212>
 8001394:	2306      	movs	r3, #6
 8001396:	e00a      	b.n	80013ae <HAL_GPIO_Init+0x212>
 8001398:	2305      	movs	r3, #5
 800139a:	e008      	b.n	80013ae <HAL_GPIO_Init+0x212>
 800139c:	2304      	movs	r3, #4
 800139e:	e006      	b.n	80013ae <HAL_GPIO_Init+0x212>
 80013a0:	2303      	movs	r3, #3
 80013a2:	e004      	b.n	80013ae <HAL_GPIO_Init+0x212>
 80013a4:	2302      	movs	r3, #2
 80013a6:	e002      	b.n	80013ae <HAL_GPIO_Init+0x212>
 80013a8:	2301      	movs	r3, #1
 80013aa:	e000      	b.n	80013ae <HAL_GPIO_Init+0x212>
 80013ac:	2300      	movs	r3, #0
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	f002 0203 	and.w	r2, r2, #3
 80013b4:	0092      	lsls	r2, r2, #2
 80013b6:	4093      	lsls	r3, r2
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013be:	4937      	ldr	r1, [pc, #220]	; (800149c <HAL_GPIO_Init+0x300>)
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	089b      	lsrs	r3, r3, #2
 80013c4:	3302      	adds	r3, #2
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013cc:	4b3b      	ldr	r3, [pc, #236]	; (80014bc <HAL_GPIO_Init+0x320>)
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4013      	ands	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013f0:	4a32      	ldr	r2, [pc, #200]	; (80014bc <HAL_GPIO_Init+0x320>)
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013f6:	4b31      	ldr	r3, [pc, #196]	; (80014bc <HAL_GPIO_Init+0x320>)
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	43db      	mvns	r3, r3
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	4013      	ands	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4313      	orrs	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800141a:	4a28      	ldr	r2, [pc, #160]	; (80014bc <HAL_GPIO_Init+0x320>)
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001420:	4b26      	ldr	r3, [pc, #152]	; (80014bc <HAL_GPIO_Init+0x320>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	43db      	mvns	r3, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4013      	ands	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4313      	orrs	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001444:	4a1d      	ldr	r2, [pc, #116]	; (80014bc <HAL_GPIO_Init+0x320>)
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800144a:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <HAL_GPIO_Init+0x320>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	43db      	mvns	r3, r3
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4013      	ands	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4313      	orrs	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800146e:	4a13      	ldr	r2, [pc, #76]	; (80014bc <HAL_GPIO_Init+0x320>)
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	3301      	adds	r3, #1
 8001478:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	fa22 f303 	lsr.w	r3, r2, r3
 8001484:	2b00      	cmp	r3, #0
 8001486:	f47f ae91 	bne.w	80011ac <HAL_GPIO_Init+0x10>
  }
}
 800148a:	bf00      	nop
 800148c:	bf00      	nop
 800148e:	371c      	adds	r7, #28
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	40021000 	.word	0x40021000
 800149c:	40010000 	.word	0x40010000
 80014a0:	48000400 	.word	0x48000400
 80014a4:	48000800 	.word	0x48000800
 80014a8:	48000c00 	.word	0x48000c00
 80014ac:	48001000 	.word	0x48001000
 80014b0:	48001400 	.word	0x48001400
 80014b4:	48001800 	.word	0x48001800
 80014b8:	48001c00 	.word	0x48001c00
 80014bc:	40010400 	.word	0x40010400

080014c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	807b      	strh	r3, [r7, #2]
 80014cc:	4613      	mov	r3, r2
 80014ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014d0:	787b      	ldrb	r3, [r7, #1]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014d6:	887a      	ldrh	r2, [r7, #2]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014dc:	e002      	b.n	80014e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014de:	887a      	ldrh	r2, [r7, #2]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014fc:	695a      	ldr	r2, [r3, #20]
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	4013      	ands	r3, r2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d006      	beq.n	8001514 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001506:	4a05      	ldr	r2, [pc, #20]	; (800151c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001508:	88fb      	ldrh	r3, [r7, #6]
 800150a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800150c:	88fb      	ldrh	r3, [r7, #6]
 800150e:	4618      	mov	r0, r3
 8001510:	f000 f806 	bl	8001520 <HAL_GPIO_EXTI_Callback>
  }
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40010400 	.word	0x40010400

08001520 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800153c:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <HAL_PWREx_GetVoltageRange+0x3c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001548:	d102      	bne.n	8001550 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800154a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800154e:	e00b      	b.n	8001568 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800155e:	d102      	bne.n	8001566 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001560:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001564:	e000      	b.n	8001568 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001566:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001568:	4618      	mov	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	40007000 	.word	0x40007000

08001578 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d141      	bne.n	800160a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001586:	4b4b      	ldr	r3, [pc, #300]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800158e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001592:	d131      	bne.n	80015f8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001594:	4b47      	ldr	r3, [pc, #284]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001596:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800159a:	4a46      	ldr	r2, [pc, #280]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800159c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015a4:	4b43      	ldr	r3, [pc, #268]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015ac:	4a41      	ldr	r2, [pc, #260]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80015b4:	4b40      	ldr	r3, [pc, #256]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2232      	movs	r2, #50	; 0x32
 80015ba:	fb02 f303 	mul.w	r3, r2, r3
 80015be:	4a3f      	ldr	r2, [pc, #252]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80015c0:	fba2 2303 	umull	r2, r3, r2, r3
 80015c4:	0c9b      	lsrs	r3, r3, #18
 80015c6:	3301      	adds	r3, #1
 80015c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015ca:	e002      	b.n	80015d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015d2:	4b38      	ldr	r3, [pc, #224]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015de:	d102      	bne.n	80015e6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f2      	bne.n	80015cc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015e6:	4b33      	ldr	r3, [pc, #204]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015f2:	d158      	bne.n	80016a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e057      	b.n	80016a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015f8:	4b2e      	ldr	r3, [pc, #184]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015fe:	4a2d      	ldr	r2, [pc, #180]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001600:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001604:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001608:	e04d      	b.n	80016a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001610:	d141      	bne.n	8001696 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001612:	4b28      	ldr	r3, [pc, #160]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800161a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800161e:	d131      	bne.n	8001684 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001620:	4b24      	ldr	r3, [pc, #144]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001622:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001626:	4a23      	ldr	r2, [pc, #140]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001630:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001638:	4a1e      	ldr	r2, [pc, #120]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800163a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800163e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001640:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2232      	movs	r2, #50	; 0x32
 8001646:	fb02 f303 	mul.w	r3, r2, r3
 800164a:	4a1c      	ldr	r2, [pc, #112]	; (80016bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800164c:	fba2 2303 	umull	r2, r3, r2, r3
 8001650:	0c9b      	lsrs	r3, r3, #18
 8001652:	3301      	adds	r3, #1
 8001654:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001656:	e002      	b.n	800165e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	3b01      	subs	r3, #1
 800165c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800165e:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800166a:	d102      	bne.n	8001672 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f2      	bne.n	8001658 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800167a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800167e:	d112      	bne.n	80016a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e011      	b.n	80016a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001684:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800168a:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800168c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001690:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001694:	e007      	b.n	80016a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001696:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800169e:	4a05      	ldr	r2, [pc, #20]	; (80016b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016a4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	40007000 	.word	0x40007000
 80016b8:	20000000 	.word	0x20000000
 80016bc:	431bde83 	.word	0x431bde83

080016c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b088      	sub	sp, #32
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d102      	bne.n	80016d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	f000 bc08 	b.w	8001ee4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016d4:	4b96      	ldr	r3, [pc, #600]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f003 030c 	and.w	r3, r3, #12
 80016dc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016de:	4b94      	ldr	r3, [pc, #592]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	f003 0303 	and.w	r3, r3, #3
 80016e6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0310 	and.w	r3, r3, #16
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 80e4 	beq.w	80018be <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d007      	beq.n	800170c <HAL_RCC_OscConfig+0x4c>
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	2b0c      	cmp	r3, #12
 8001700:	f040 808b 	bne.w	800181a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	2b01      	cmp	r3, #1
 8001708:	f040 8087 	bne.w	800181a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800170c:	4b88      	ldr	r3, [pc, #544]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d005      	beq.n	8001724 <HAL_RCC_OscConfig+0x64>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e3df      	b.n	8001ee4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a1a      	ldr	r2, [r3, #32]
 8001728:	4b81      	ldr	r3, [pc, #516]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0308 	and.w	r3, r3, #8
 8001730:	2b00      	cmp	r3, #0
 8001732:	d004      	beq.n	800173e <HAL_RCC_OscConfig+0x7e>
 8001734:	4b7e      	ldr	r3, [pc, #504]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800173c:	e005      	b.n	800174a <HAL_RCC_OscConfig+0x8a>
 800173e:	4b7c      	ldr	r3, [pc, #496]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001740:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001744:	091b      	lsrs	r3, r3, #4
 8001746:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800174a:	4293      	cmp	r3, r2
 800174c:	d223      	bcs.n	8001796 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	4618      	mov	r0, r3
 8001754:	f000 fdfe 	bl	8002354 <RCC_SetFlashLatencyFromMSIRange>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e3c0      	b.n	8001ee4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001762:	4b73      	ldr	r3, [pc, #460]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a72      	ldr	r2, [pc, #456]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001768:	f043 0308 	orr.w	r3, r3, #8
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	4b70      	ldr	r3, [pc, #448]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a1b      	ldr	r3, [r3, #32]
 800177a:	496d      	ldr	r1, [pc, #436]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 800177c:	4313      	orrs	r3, r2
 800177e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001780:	4b6b      	ldr	r3, [pc, #428]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	021b      	lsls	r3, r3, #8
 800178e:	4968      	ldr	r1, [pc, #416]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001790:	4313      	orrs	r3, r2
 8001792:	604b      	str	r3, [r1, #4]
 8001794:	e025      	b.n	80017e2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001796:	4b66      	ldr	r3, [pc, #408]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a65      	ldr	r2, [pc, #404]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 800179c:	f043 0308 	orr.w	r3, r3, #8
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	4b63      	ldr	r3, [pc, #396]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a1b      	ldr	r3, [r3, #32]
 80017ae:	4960      	ldr	r1, [pc, #384]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017b4:	4b5e      	ldr	r3, [pc, #376]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	021b      	lsls	r3, r3, #8
 80017c2:	495b      	ldr	r1, [pc, #364]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d109      	bne.n	80017e2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 fdbe 	bl	8002354 <RCC_SetFlashLatencyFromMSIRange>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e380      	b.n	8001ee4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017e2:	f000 fcc1 	bl	8002168 <HAL_RCC_GetSysClockFreq>
 80017e6:	4602      	mov	r2, r0
 80017e8:	4b51      	ldr	r3, [pc, #324]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	091b      	lsrs	r3, r3, #4
 80017ee:	f003 030f 	and.w	r3, r3, #15
 80017f2:	4950      	ldr	r1, [pc, #320]	; (8001934 <HAL_RCC_OscConfig+0x274>)
 80017f4:	5ccb      	ldrb	r3, [r1, r3]
 80017f6:	f003 031f 	and.w	r3, r3, #31
 80017fa:	fa22 f303 	lsr.w	r3, r2, r3
 80017fe:	4a4e      	ldr	r2, [pc, #312]	; (8001938 <HAL_RCC_OscConfig+0x278>)
 8001800:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001802:	4b4e      	ldr	r3, [pc, #312]	; (800193c <HAL_RCC_OscConfig+0x27c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff f970 	bl	8000aec <HAL_InitTick>
 800180c:	4603      	mov	r3, r0
 800180e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d052      	beq.n	80018bc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	e364      	b.n	8001ee4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d032      	beq.n	8001888 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001822:	4b43      	ldr	r3, [pc, #268]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a42      	ldr	r2, [pc, #264]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800182e:	f7ff fb0b 	bl	8000e48 <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001836:	f7ff fb07 	bl	8000e48 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e34d      	b.n	8001ee4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001848:	4b39      	ldr	r3, [pc, #228]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0f0      	beq.n	8001836 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001854:	4b36      	ldr	r3, [pc, #216]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a35      	ldr	r2, [pc, #212]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 800185a:	f043 0308 	orr.w	r3, r3, #8
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	4b33      	ldr	r3, [pc, #204]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	4930      	ldr	r1, [pc, #192]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 800186e:	4313      	orrs	r3, r2
 8001870:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001872:	4b2f      	ldr	r3, [pc, #188]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	021b      	lsls	r3, r3, #8
 8001880:	492b      	ldr	r1, [pc, #172]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001882:	4313      	orrs	r3, r2
 8001884:	604b      	str	r3, [r1, #4]
 8001886:	e01a      	b.n	80018be <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001888:	4b29      	ldr	r3, [pc, #164]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a28      	ldr	r2, [pc, #160]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 800188e:	f023 0301 	bic.w	r3, r3, #1
 8001892:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001894:	f7ff fad8 	bl	8000e48 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800189c:	f7ff fad4 	bl	8000e48 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e31a      	b.n	8001ee4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018ae:	4b20      	ldr	r3, [pc, #128]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x1dc>
 80018ba:	e000      	b.n	80018be <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d073      	beq.n	80019b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	2b08      	cmp	r3, #8
 80018ce:	d005      	beq.n	80018dc <HAL_RCC_OscConfig+0x21c>
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	2b0c      	cmp	r3, #12
 80018d4:	d10e      	bne.n	80018f4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	2b03      	cmp	r3, #3
 80018da:	d10b      	bne.n	80018f4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018dc:	4b14      	ldr	r3, [pc, #80]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d063      	beq.n	80019b0 <HAL_RCC_OscConfig+0x2f0>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d15f      	bne.n	80019b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e2f7      	b.n	8001ee4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018fc:	d106      	bne.n	800190c <HAL_RCC_OscConfig+0x24c>
 80018fe:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a0b      	ldr	r2, [pc, #44]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	e025      	b.n	8001958 <HAL_RCC_OscConfig+0x298>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001914:	d114      	bne.n	8001940 <HAL_RCC_OscConfig+0x280>
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a05      	ldr	r2, [pc, #20]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 800191c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	4b03      	ldr	r3, [pc, #12]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a02      	ldr	r2, [pc, #8]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	e013      	b.n	8001958 <HAL_RCC_OscConfig+0x298>
 8001930:	40021000 	.word	0x40021000
 8001934:	08007628 	.word	0x08007628
 8001938:	20000000 	.word	0x20000000
 800193c:	20000004 	.word	0x20000004
 8001940:	4ba0      	ldr	r3, [pc, #640]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a9f      	ldr	r2, [pc, #636]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800194a:	6013      	str	r3, [r2, #0]
 800194c:	4b9d      	ldr	r3, [pc, #628]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a9c      	ldr	r2, [pc, #624]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d013      	beq.n	8001988 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001960:	f7ff fa72 	bl	8000e48 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001968:	f7ff fa6e 	bl	8000e48 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b64      	cmp	r3, #100	; 0x64
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e2b4      	b.n	8001ee4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800197a:	4b92      	ldr	r3, [pc, #584]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0f0      	beq.n	8001968 <HAL_RCC_OscConfig+0x2a8>
 8001986:	e014      	b.n	80019b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001988:	f7ff fa5e 	bl	8000e48 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001990:	f7ff fa5a 	bl	8000e48 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b64      	cmp	r3, #100	; 0x64
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e2a0      	b.n	8001ee4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019a2:	4b88      	ldr	r3, [pc, #544]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f0      	bne.n	8001990 <HAL_RCC_OscConfig+0x2d0>
 80019ae:	e000      	b.n	80019b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d060      	beq.n	8001a80 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d005      	beq.n	80019d0 <HAL_RCC_OscConfig+0x310>
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	2b0c      	cmp	r3, #12
 80019c8:	d119      	bne.n	80019fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d116      	bne.n	80019fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019d0:	4b7c      	ldr	r3, [pc, #496]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <HAL_RCC_OscConfig+0x328>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e27d      	b.n	8001ee4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e8:	4b76      	ldr	r3, [pc, #472]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	061b      	lsls	r3, r3, #24
 80019f6:	4973      	ldr	r1, [pc, #460]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019fc:	e040      	b.n	8001a80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d023      	beq.n	8001a4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a06:	4b6f      	ldr	r3, [pc, #444]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a6e      	ldr	r2, [pc, #440]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a12:	f7ff fa19 	bl	8000e48 <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a1a:	f7ff fa15 	bl	8000e48 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e25b      	b.n	8001ee4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a2c:	4b65      	ldr	r3, [pc, #404]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0f0      	beq.n	8001a1a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a38:	4b62      	ldr	r3, [pc, #392]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	061b      	lsls	r3, r3, #24
 8001a46:	495f      	ldr	r1, [pc, #380]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	604b      	str	r3, [r1, #4]
 8001a4c:	e018      	b.n	8001a80 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a4e:	4b5d      	ldr	r3, [pc, #372]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a5c      	ldr	r2, [pc, #368]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001a54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5a:	f7ff f9f5 	bl	8000e48 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a62:	f7ff f9f1 	bl	8000e48 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e237      	b.n	8001ee4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a74:	4b53      	ldr	r3, [pc, #332]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1f0      	bne.n	8001a62 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0308 	and.w	r3, r3, #8
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d03c      	beq.n	8001b06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d01c      	beq.n	8001ace <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a94:	4b4b      	ldr	r3, [pc, #300]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a9a:	4a4a      	ldr	r2, [pc, #296]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa4:	f7ff f9d0 	bl	8000e48 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aac:	f7ff f9cc 	bl	8000e48 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e212      	b.n	8001ee4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001abe:	4b41      	ldr	r3, [pc, #260]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001ac0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0ef      	beq.n	8001aac <HAL_RCC_OscConfig+0x3ec>
 8001acc:	e01b      	b.n	8001b06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ace:	4b3d      	ldr	r3, [pc, #244]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ad4:	4a3b      	ldr	r2, [pc, #236]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001ad6:	f023 0301 	bic.w	r3, r3, #1
 8001ada:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ade:	f7ff f9b3 	bl	8000e48 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae6:	f7ff f9af 	bl	8000e48 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e1f5      	b.n	8001ee4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001af8:	4b32      	ldr	r3, [pc, #200]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1ef      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0304 	and.w	r3, r3, #4
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 80a6 	beq.w	8001c60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b14:	2300      	movs	r3, #0
 8001b16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b18:	4b2a      	ldr	r3, [pc, #168]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10d      	bne.n	8001b40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b24:	4b27      	ldr	r3, [pc, #156]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b28:	4a26      	ldr	r2, [pc, #152]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b30:	4b24      	ldr	r3, [pc, #144]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b40:	4b21      	ldr	r3, [pc, #132]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d118      	bne.n	8001b7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b4c:	4b1e      	ldr	r3, [pc, #120]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a1d      	ldr	r2, [pc, #116]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b58:	f7ff f976 	bl	8000e48 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b60:	f7ff f972 	bl	8000e48 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e1b8      	b.n	8001ee4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b72:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <HAL_RCC_OscConfig+0x508>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d0f0      	beq.n	8001b60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d108      	bne.n	8001b98 <HAL_RCC_OscConfig+0x4d8>
 8001b86:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b8c:	4a0d      	ldr	r2, [pc, #52]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b96:	e029      	b.n	8001bec <HAL_RCC_OscConfig+0x52c>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	2b05      	cmp	r3, #5
 8001b9e:	d115      	bne.n	8001bcc <HAL_RCC_OscConfig+0x50c>
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ba6:	4a07      	ldr	r2, [pc, #28]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001ba8:	f043 0304 	orr.w	r3, r3, #4
 8001bac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb6:	4a03      	ldr	r2, [pc, #12]	; (8001bc4 <HAL_RCC_OscConfig+0x504>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bc0:	e014      	b.n	8001bec <HAL_RCC_OscConfig+0x52c>
 8001bc2:	bf00      	nop
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40007000 	.word	0x40007000
 8001bcc:	4b9d      	ldr	r3, [pc, #628]	; (8001e44 <HAL_RCC_OscConfig+0x784>)
 8001bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd2:	4a9c      	ldr	r2, [pc, #624]	; (8001e44 <HAL_RCC_OscConfig+0x784>)
 8001bd4:	f023 0301 	bic.w	r3, r3, #1
 8001bd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bdc:	4b99      	ldr	r3, [pc, #612]	; (8001e44 <HAL_RCC_OscConfig+0x784>)
 8001bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be2:	4a98      	ldr	r2, [pc, #608]	; (8001e44 <HAL_RCC_OscConfig+0x784>)
 8001be4:	f023 0304 	bic.w	r3, r3, #4
 8001be8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d016      	beq.n	8001c22 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf4:	f7ff f928 	bl	8000e48 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bfa:	e00a      	b.n	8001c12 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfc:	f7ff f924 	bl	8000e48 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e168      	b.n	8001ee4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c12:	4b8c      	ldr	r3, [pc, #560]	; (8001e44 <HAL_RCC_OscConfig+0x784>)
 8001c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0ed      	beq.n	8001bfc <HAL_RCC_OscConfig+0x53c>
 8001c20:	e015      	b.n	8001c4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c22:	f7ff f911 	bl	8000e48 <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c28:	e00a      	b.n	8001c40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2a:	f7ff f90d 	bl	8000e48 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e151      	b.n	8001ee4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c40:	4b80      	ldr	r3, [pc, #512]	; (8001e44 <HAL_RCC_OscConfig+0x784>)
 8001c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1ed      	bne.n	8001c2a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c4e:	7ffb      	ldrb	r3, [r7, #31]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d105      	bne.n	8001c60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c54:	4b7b      	ldr	r3, [pc, #492]	; (8001e44 <HAL_RCC_OscConfig+0x784>)
 8001c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c58:	4a7a      	ldr	r2, [pc, #488]	; (8001e44 <HAL_RCC_OscConfig+0x784>)
 8001c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0320 	and.w	r3, r3, #32
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d03c      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d01c      	beq.n	8001cae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c74:	4b73      	ldr	r3, [pc, #460]	; (8001e44 <HAL_RCC_OscConfig+0x784>)
 8001c76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c7a:	4a72      	ldr	r2, [pc, #456]	; (8001e44 <HAL_RCC_OscConfig+0x784>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c84:	f7ff f8e0 	bl	8000e48 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c8c:	f7ff f8dc 	bl	8000e48 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e122      	b.n	8001ee4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c9e:	4b69      	ldr	r3, [pc, #420]	; (8001e44 <HAL_RCC_OscConfig+0x784>)
 8001ca0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0ef      	beq.n	8001c8c <HAL_RCC_OscConfig+0x5cc>
 8001cac:	e01b      	b.n	8001ce6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cae:	4b65      	ldr	r3, [pc, #404]	; (8001e44 <HAL_RCC_OscConfig+0x784>)
 8001cb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cb4:	4a63      	ldr	r2, [pc, #396]	; (8001e44 <HAL_RCC_OscConfig+0x784>)
 8001cb6:	f023 0301 	bic.w	r3, r3, #1
 8001cba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cbe:	f7ff f8c3 	bl	8000e48 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cc6:	f7ff f8bf 	bl	8000e48 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e105      	b.n	8001ee4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cd8:	4b5a      	ldr	r3, [pc, #360]	; (8001e44 <HAL_RCC_OscConfig+0x784>)
 8001cda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1ef      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 80f9 	beq.w	8001ee2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	f040 80cf 	bne.w	8001e98 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001cfa:	4b52      	ldr	r3, [pc, #328]	; (8001e44 <HAL_RCC_OscConfig+0x784>)
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f003 0203 	and.w	r2, r3, #3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d12c      	bne.n	8001d68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d123      	bne.n	8001d68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d2a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d11b      	bne.n	8001d68 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d113      	bne.n	8001d68 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d4a:	085b      	lsrs	r3, r3, #1
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d109      	bne.n	8001d68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	085b      	lsrs	r3, r3, #1
 8001d60:	3b01      	subs	r3, #1
 8001d62:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d071      	beq.n	8001e4c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	2b0c      	cmp	r3, #12
 8001d6c:	d068      	beq.n	8001e40 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d6e:	4b35      	ldr	r3, [pc, #212]	; (8001e44 <HAL_RCC_OscConfig+0x784>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d105      	bne.n	8001d86 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d7a:	4b32      	ldr	r3, [pc, #200]	; (8001e44 <HAL_RCC_OscConfig+0x784>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e0ac      	b.n	8001ee4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d8a:	4b2e      	ldr	r3, [pc, #184]	; (8001e44 <HAL_RCC_OscConfig+0x784>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a2d      	ldr	r2, [pc, #180]	; (8001e44 <HAL_RCC_OscConfig+0x784>)
 8001d90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d94:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d96:	f7ff f857 	bl	8000e48 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9e:	f7ff f853 	bl	8000e48 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e099      	b.n	8001ee4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001db0:	4b24      	ldr	r3, [pc, #144]	; (8001e44 <HAL_RCC_OscConfig+0x784>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1f0      	bne.n	8001d9e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dbc:	4b21      	ldr	r3, [pc, #132]	; (8001e44 <HAL_RCC_OscConfig+0x784>)
 8001dbe:	68da      	ldr	r2, [r3, #12]
 8001dc0:	4b21      	ldr	r3, [pc, #132]	; (8001e48 <HAL_RCC_OscConfig+0x788>)
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001dcc:	3a01      	subs	r2, #1
 8001dce:	0112      	lsls	r2, r2, #4
 8001dd0:	4311      	orrs	r1, r2
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dd6:	0212      	lsls	r2, r2, #8
 8001dd8:	4311      	orrs	r1, r2
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001dde:	0852      	lsrs	r2, r2, #1
 8001de0:	3a01      	subs	r2, #1
 8001de2:	0552      	lsls	r2, r2, #21
 8001de4:	4311      	orrs	r1, r2
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001dea:	0852      	lsrs	r2, r2, #1
 8001dec:	3a01      	subs	r2, #1
 8001dee:	0652      	lsls	r2, r2, #25
 8001df0:	4311      	orrs	r1, r2
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001df6:	06d2      	lsls	r2, r2, #27
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	4912      	ldr	r1, [pc, #72]	; (8001e44 <HAL_RCC_OscConfig+0x784>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e00:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <HAL_RCC_OscConfig+0x784>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a0f      	ldr	r2, [pc, #60]	; (8001e44 <HAL_RCC_OscConfig+0x784>)
 8001e06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e0a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e0c:	4b0d      	ldr	r3, [pc, #52]	; (8001e44 <HAL_RCC_OscConfig+0x784>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	4a0c      	ldr	r2, [pc, #48]	; (8001e44 <HAL_RCC_OscConfig+0x784>)
 8001e12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e18:	f7ff f816 	bl	8000e48 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e20:	f7ff f812 	bl	8000e48 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e058      	b.n	8001ee4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e32:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <HAL_RCC_OscConfig+0x784>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0f0      	beq.n	8001e20 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e3e:	e050      	b.n	8001ee2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e04f      	b.n	8001ee4 <HAL_RCC_OscConfig+0x824>
 8001e44:	40021000 	.word	0x40021000
 8001e48:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e4c:	4b27      	ldr	r3, [pc, #156]	; (8001eec <HAL_RCC_OscConfig+0x82c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d144      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e58:	4b24      	ldr	r3, [pc, #144]	; (8001eec <HAL_RCC_OscConfig+0x82c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a23      	ldr	r2, [pc, #140]	; (8001eec <HAL_RCC_OscConfig+0x82c>)
 8001e5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e62:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e64:	4b21      	ldr	r3, [pc, #132]	; (8001eec <HAL_RCC_OscConfig+0x82c>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	4a20      	ldr	r2, [pc, #128]	; (8001eec <HAL_RCC_OscConfig+0x82c>)
 8001e6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e70:	f7fe ffea 	bl	8000e48 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e78:	f7fe ffe6 	bl	8000e48 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e02c      	b.n	8001ee4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e8a:	4b18      	ldr	r3, [pc, #96]	; (8001eec <HAL_RCC_OscConfig+0x82c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d0f0      	beq.n	8001e78 <HAL_RCC_OscConfig+0x7b8>
 8001e96:	e024      	b.n	8001ee2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	2b0c      	cmp	r3, #12
 8001e9c:	d01f      	beq.n	8001ede <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e9e:	4b13      	ldr	r3, [pc, #76]	; (8001eec <HAL_RCC_OscConfig+0x82c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a12      	ldr	r2, [pc, #72]	; (8001eec <HAL_RCC_OscConfig+0x82c>)
 8001ea4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ea8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eaa:	f7fe ffcd 	bl	8000e48 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb2:	f7fe ffc9 	bl	8000e48 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e00f      	b.n	8001ee4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec4:	4b09      	ldr	r3, [pc, #36]	; (8001eec <HAL_RCC_OscConfig+0x82c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1f0      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_RCC_OscConfig+0x82c>)
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	4905      	ldr	r1, [pc, #20]	; (8001eec <HAL_RCC_OscConfig+0x82c>)
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_RCC_OscConfig+0x830>)
 8001ed8:	4013      	ands	r3, r2
 8001eda:	60cb      	str	r3, [r1, #12]
 8001edc:	e001      	b.n	8001ee2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e000      	b.n	8001ee4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3720      	adds	r7, #32
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	feeefffc 	.word	0xfeeefffc

08001ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001efe:	2300      	movs	r3, #0
 8001f00:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e11d      	b.n	8002148 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f0c:	4b90      	ldr	r3, [pc, #576]	; (8002150 <HAL_RCC_ClockConfig+0x25c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 030f 	and.w	r3, r3, #15
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d910      	bls.n	8001f3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1a:	4b8d      	ldr	r3, [pc, #564]	; (8002150 <HAL_RCC_ClockConfig+0x25c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 020f 	bic.w	r2, r3, #15
 8001f22:	498b      	ldr	r1, [pc, #556]	; (8002150 <HAL_RCC_ClockConfig+0x25c>)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2a:	4b89      	ldr	r3, [pc, #548]	; (8002150 <HAL_RCC_ClockConfig+0x25c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d001      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e105      	b.n	8002148 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d010      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	4b81      	ldr	r3, [pc, #516]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d908      	bls.n	8001f6a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f58:	4b7e      	ldr	r3, [pc, #504]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	497b      	ldr	r1, [pc, #492]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d079      	beq.n	800206a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b03      	cmp	r3, #3
 8001f7c:	d11e      	bne.n	8001fbc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f7e:	4b75      	ldr	r3, [pc, #468]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e0dc      	b.n	8002148 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001f8e:	f000 fa3b 	bl	8002408 <RCC_GetSysClockFreqFromPLLSource>
 8001f92:	4603      	mov	r3, r0
 8001f94:	4a70      	ldr	r2, [pc, #448]	; (8002158 <HAL_RCC_ClockConfig+0x264>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d946      	bls.n	8002028 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001f9a:	4b6e      	ldr	r3, [pc, #440]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d140      	bne.n	8002028 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001fa6:	4b6b      	ldr	r3, [pc, #428]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fae:	4a69      	ldr	r2, [pc, #420]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 8001fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fb4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	e035      	b.n	8002028 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d107      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fc4:	4b63      	ldr	r3, [pc, #396]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d115      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e0b9      	b.n	8002148 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d107      	bne.n	8001fec <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fdc:	4b5d      	ldr	r3, [pc, #372]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d109      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e0ad      	b.n	8002148 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fec:	4b59      	ldr	r3, [pc, #356]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e0a5      	b.n	8002148 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001ffc:	f000 f8b4 	bl	8002168 <HAL_RCC_GetSysClockFreq>
 8002000:	4603      	mov	r3, r0
 8002002:	4a55      	ldr	r2, [pc, #340]	; (8002158 <HAL_RCC_ClockConfig+0x264>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d90f      	bls.n	8002028 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002008:	4b52      	ldr	r3, [pc, #328]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d109      	bne.n	8002028 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002014:	4b4f      	ldr	r3, [pc, #316]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800201c:	4a4d      	ldr	r2, [pc, #308]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 800201e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002022:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002024:	2380      	movs	r3, #128	; 0x80
 8002026:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002028:	4b4a      	ldr	r3, [pc, #296]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f023 0203 	bic.w	r2, r3, #3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	4947      	ldr	r1, [pc, #284]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 8002036:	4313      	orrs	r3, r2
 8002038:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800203a:	f7fe ff05 	bl	8000e48 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002040:	e00a      	b.n	8002058 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002042:	f7fe ff01 	bl	8000e48 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002050:	4293      	cmp	r3, r2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e077      	b.n	8002148 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002058:	4b3e      	ldr	r3, [pc, #248]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 020c 	and.w	r2, r3, #12
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	429a      	cmp	r2, r3
 8002068:	d1eb      	bne.n	8002042 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	2b80      	cmp	r3, #128	; 0x80
 800206e:	d105      	bne.n	800207c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002070:	4b38      	ldr	r3, [pc, #224]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	4a37      	ldr	r2, [pc, #220]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 8002076:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800207a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d010      	beq.n	80020aa <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	4b31      	ldr	r3, [pc, #196]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002094:	429a      	cmp	r2, r3
 8002096:	d208      	bcs.n	80020aa <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002098:	4b2e      	ldr	r3, [pc, #184]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	492b      	ldr	r1, [pc, #172]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020aa:	4b29      	ldr	r3, [pc, #164]	; (8002150 <HAL_RCC_ClockConfig+0x25c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d210      	bcs.n	80020da <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b8:	4b25      	ldr	r3, [pc, #148]	; (8002150 <HAL_RCC_ClockConfig+0x25c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f023 020f 	bic.w	r2, r3, #15
 80020c0:	4923      	ldr	r1, [pc, #140]	; (8002150 <HAL_RCC_ClockConfig+0x25c>)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c8:	4b21      	ldr	r3, [pc, #132]	; (8002150 <HAL_RCC_ClockConfig+0x25c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 030f 	and.w	r3, r3, #15
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d001      	beq.n	80020da <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e036      	b.n	8002148 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d008      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020e6:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	4918      	ldr	r1, [pc, #96]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	2b00      	cmp	r3, #0
 8002102:	d009      	beq.n	8002118 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002104:	4b13      	ldr	r3, [pc, #76]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	4910      	ldr	r1, [pc, #64]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 8002114:	4313      	orrs	r3, r2
 8002116:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002118:	f000 f826 	bl	8002168 <HAL_RCC_GetSysClockFreq>
 800211c:	4602      	mov	r2, r0
 800211e:	4b0d      	ldr	r3, [pc, #52]	; (8002154 <HAL_RCC_ClockConfig+0x260>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	091b      	lsrs	r3, r3, #4
 8002124:	f003 030f 	and.w	r3, r3, #15
 8002128:	490c      	ldr	r1, [pc, #48]	; (800215c <HAL_RCC_ClockConfig+0x268>)
 800212a:	5ccb      	ldrb	r3, [r1, r3]
 800212c:	f003 031f 	and.w	r3, r3, #31
 8002130:	fa22 f303 	lsr.w	r3, r2, r3
 8002134:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <HAL_RCC_ClockConfig+0x26c>)
 8002136:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002138:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <HAL_RCC_ClockConfig+0x270>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe fcd5 	bl	8000aec <HAL_InitTick>
 8002142:	4603      	mov	r3, r0
 8002144:	73fb      	strb	r3, [r7, #15]

  return status;
 8002146:	7bfb      	ldrb	r3, [r7, #15]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40022000 	.word	0x40022000
 8002154:	40021000 	.word	0x40021000
 8002158:	04c4b400 	.word	0x04c4b400
 800215c:	08007628 	.word	0x08007628
 8002160:	20000000 	.word	0x20000000
 8002164:	20000004 	.word	0x20000004

08002168 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002168:	b480      	push	{r7}
 800216a:	b089      	sub	sp, #36	; 0x24
 800216c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800216e:	2300      	movs	r3, #0
 8002170:	61fb      	str	r3, [r7, #28]
 8002172:	2300      	movs	r3, #0
 8002174:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002176:	4b3e      	ldr	r3, [pc, #248]	; (8002270 <HAL_RCC_GetSysClockFreq+0x108>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 030c 	and.w	r3, r3, #12
 800217e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002180:	4b3b      	ldr	r3, [pc, #236]	; (8002270 <HAL_RCC_GetSysClockFreq+0x108>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d005      	beq.n	800219c <HAL_RCC_GetSysClockFreq+0x34>
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	2b0c      	cmp	r3, #12
 8002194:	d121      	bne.n	80021da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d11e      	bne.n	80021da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800219c:	4b34      	ldr	r3, [pc, #208]	; (8002270 <HAL_RCC_GetSysClockFreq+0x108>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d107      	bne.n	80021b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021a8:	4b31      	ldr	r3, [pc, #196]	; (8002270 <HAL_RCC_GetSysClockFreq+0x108>)
 80021aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ae:	0a1b      	lsrs	r3, r3, #8
 80021b0:	f003 030f 	and.w	r3, r3, #15
 80021b4:	61fb      	str	r3, [r7, #28]
 80021b6:	e005      	b.n	80021c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021b8:	4b2d      	ldr	r3, [pc, #180]	; (8002270 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	091b      	lsrs	r3, r3, #4
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80021c4:	4a2b      	ldr	r2, [pc, #172]	; (8002274 <HAL_RCC_GetSysClockFreq+0x10c>)
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10d      	bne.n	80021f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021d8:	e00a      	b.n	80021f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	2b04      	cmp	r3, #4
 80021de:	d102      	bne.n	80021e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021e0:	4b25      	ldr	r3, [pc, #148]	; (8002278 <HAL_RCC_GetSysClockFreq+0x110>)
 80021e2:	61bb      	str	r3, [r7, #24]
 80021e4:	e004      	b.n	80021f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d101      	bne.n	80021f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021ec:	4b23      	ldr	r3, [pc, #140]	; (800227c <HAL_RCC_GetSysClockFreq+0x114>)
 80021ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	2b0c      	cmp	r3, #12
 80021f4:	d134      	bne.n	8002260 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021f6:	4b1e      	ldr	r3, [pc, #120]	; (8002270 <HAL_RCC_GetSysClockFreq+0x108>)
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	2b02      	cmp	r3, #2
 8002204:	d003      	beq.n	800220e <HAL_RCC_GetSysClockFreq+0xa6>
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	2b03      	cmp	r3, #3
 800220a:	d003      	beq.n	8002214 <HAL_RCC_GetSysClockFreq+0xac>
 800220c:	e005      	b.n	800221a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800220e:	4b1a      	ldr	r3, [pc, #104]	; (8002278 <HAL_RCC_GetSysClockFreq+0x110>)
 8002210:	617b      	str	r3, [r7, #20]
      break;
 8002212:	e005      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002214:	4b19      	ldr	r3, [pc, #100]	; (800227c <HAL_RCC_GetSysClockFreq+0x114>)
 8002216:	617b      	str	r3, [r7, #20]
      break;
 8002218:	e002      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	617b      	str	r3, [r7, #20]
      break;
 800221e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002220:	4b13      	ldr	r3, [pc, #76]	; (8002270 <HAL_RCC_GetSysClockFreq+0x108>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	091b      	lsrs	r3, r3, #4
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	3301      	adds	r3, #1
 800222c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800222e:	4b10      	ldr	r3, [pc, #64]	; (8002270 <HAL_RCC_GetSysClockFreq+0x108>)
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	0a1b      	lsrs	r3, r3, #8
 8002234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	fb03 f202 	mul.w	r2, r3, r2
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	fbb2 f3f3 	udiv	r3, r2, r3
 8002244:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002246:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <HAL_RCC_GetSysClockFreq+0x108>)
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	0e5b      	lsrs	r3, r3, #25
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	3301      	adds	r3, #1
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	fbb2 f3f3 	udiv	r3, r2, r3
 800225e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002260:	69bb      	ldr	r3, [r7, #24]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3724      	adds	r7, #36	; 0x24
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	40021000 	.word	0x40021000
 8002274:	08007640 	.word	0x08007640
 8002278:	00f42400 	.word	0x00f42400
 800227c:	007a1200 	.word	0x007a1200

08002280 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002284:	4b03      	ldr	r3, [pc, #12]	; (8002294 <HAL_RCC_GetHCLKFreq+0x14>)
 8002286:	681b      	ldr	r3, [r3, #0]
}
 8002288:	4618      	mov	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	20000000 	.word	0x20000000

08002298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800229c:	f7ff fff0 	bl	8002280 <HAL_RCC_GetHCLKFreq>
 80022a0:	4602      	mov	r2, r0
 80022a2:	4b06      	ldr	r3, [pc, #24]	; (80022bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	0a1b      	lsrs	r3, r3, #8
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	4904      	ldr	r1, [pc, #16]	; (80022c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022ae:	5ccb      	ldrb	r3, [r1, r3]
 80022b0:	f003 031f 	and.w	r3, r3, #31
 80022b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40021000 	.word	0x40021000
 80022c0:	08007638 	.word	0x08007638

080022c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022c8:	f7ff ffda 	bl	8002280 <HAL_RCC_GetHCLKFreq>
 80022cc:	4602      	mov	r2, r0
 80022ce:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	0adb      	lsrs	r3, r3, #11
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	4904      	ldr	r1, [pc, #16]	; (80022ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80022da:	5ccb      	ldrb	r3, [r1, r3]
 80022dc:	f003 031f 	and.w	r3, r3, #31
 80022e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40021000 	.word	0x40021000
 80022ec:	08007638 	.word	0x08007638

080022f0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	220f      	movs	r2, #15
 80022fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002300:	4b12      	ldr	r3, [pc, #72]	; (800234c <HAL_RCC_GetClockConfig+0x5c>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 0203 	and.w	r2, r3, #3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800230c:	4b0f      	ldr	r3, [pc, #60]	; (800234c <HAL_RCC_GetClockConfig+0x5c>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <HAL_RCC_GetClockConfig+0x5c>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002324:	4b09      	ldr	r3, [pc, #36]	; (800234c <HAL_RCC_GetClockConfig+0x5c>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	08db      	lsrs	r3, r3, #3
 800232a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002332:	4b07      	ldr	r3, [pc, #28]	; (8002350 <HAL_RCC_GetClockConfig+0x60>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 020f 	and.w	r2, r3, #15
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	601a      	str	r2, [r3, #0]
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	40021000 	.word	0x40021000
 8002350:	40022000 	.word	0x40022000

08002354 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800235c:	2300      	movs	r3, #0
 800235e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002360:	4b27      	ldr	r3, [pc, #156]	; (8002400 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800236c:	f7ff f8e4 	bl	8001538 <HAL_PWREx_GetVoltageRange>
 8002370:	6178      	str	r0, [r7, #20]
 8002372:	e014      	b.n	800239e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002374:	4b22      	ldr	r3, [pc, #136]	; (8002400 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002378:	4a21      	ldr	r2, [pc, #132]	; (8002400 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800237a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800237e:	6593      	str	r3, [r2, #88]	; 0x58
 8002380:	4b1f      	ldr	r3, [pc, #124]	; (8002400 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800238c:	f7ff f8d4 	bl	8001538 <HAL_PWREx_GetVoltageRange>
 8002390:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002392:	4b1b      	ldr	r3, [pc, #108]	; (8002400 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002396:	4a1a      	ldr	r2, [pc, #104]	; (8002400 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002398:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800239c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023a4:	d10b      	bne.n	80023be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b80      	cmp	r3, #128	; 0x80
 80023aa:	d913      	bls.n	80023d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2ba0      	cmp	r3, #160	; 0xa0
 80023b0:	d902      	bls.n	80023b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023b2:	2302      	movs	r3, #2
 80023b4:	613b      	str	r3, [r7, #16]
 80023b6:	e00d      	b.n	80023d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023b8:	2301      	movs	r3, #1
 80023ba:	613b      	str	r3, [r7, #16]
 80023bc:	e00a      	b.n	80023d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b7f      	cmp	r3, #127	; 0x7f
 80023c2:	d902      	bls.n	80023ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80023c4:	2302      	movs	r3, #2
 80023c6:	613b      	str	r3, [r7, #16]
 80023c8:	e004      	b.n	80023d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b70      	cmp	r3, #112	; 0x70
 80023ce:	d101      	bne.n	80023d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023d0:	2301      	movs	r3, #1
 80023d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023d4:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f023 020f 	bic.w	r2, r3, #15
 80023dc:	4909      	ldr	r1, [pc, #36]	; (8002404 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023e4:	4b07      	ldr	r3, [pc, #28]	; (8002404 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 030f 	and.w	r3, r3, #15
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d001      	beq.n	80023f6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40021000 	.word	0x40021000
 8002404:	40022000 	.word	0x40022000

08002408 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002408:	b480      	push	{r7}
 800240a:	b087      	sub	sp, #28
 800240c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800240e:	4b2d      	ldr	r3, [pc, #180]	; (80024c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2b03      	cmp	r3, #3
 800241c:	d00b      	beq.n	8002436 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2b03      	cmp	r3, #3
 8002422:	d825      	bhi.n	8002470 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d008      	beq.n	800243c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2b02      	cmp	r3, #2
 800242e:	d11f      	bne.n	8002470 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002430:	4b25      	ldr	r3, [pc, #148]	; (80024c8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002432:	613b      	str	r3, [r7, #16]
    break;
 8002434:	e01f      	b.n	8002476 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002436:	4b25      	ldr	r3, [pc, #148]	; (80024cc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002438:	613b      	str	r3, [r7, #16]
    break;
 800243a:	e01c      	b.n	8002476 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800243c:	4b21      	ldr	r3, [pc, #132]	; (80024c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0308 	and.w	r3, r3, #8
 8002444:	2b00      	cmp	r3, #0
 8002446:	d107      	bne.n	8002458 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002448:	4b1e      	ldr	r3, [pc, #120]	; (80024c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800244a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800244e:	0a1b      	lsrs	r3, r3, #8
 8002450:	f003 030f 	and.w	r3, r3, #15
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	e005      	b.n	8002464 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002458:	4b1a      	ldr	r3, [pc, #104]	; (80024c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	091b      	lsrs	r3, r3, #4
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002464:	4a1a      	ldr	r2, [pc, #104]	; (80024d0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800246c:	613b      	str	r3, [r7, #16]
    break;
 800246e:	e002      	b.n	8002476 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002470:	2300      	movs	r3, #0
 8002472:	613b      	str	r3, [r7, #16]
    break;
 8002474:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002476:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	091b      	lsrs	r3, r3, #4
 800247c:	f003 030f 	and.w	r3, r3, #15
 8002480:	3301      	adds	r3, #1
 8002482:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002484:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	0a1b      	lsrs	r3, r3, #8
 800248a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	fb03 f202 	mul.w	r2, r3, r2
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	fbb2 f3f3 	udiv	r3, r2, r3
 800249a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800249c:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	0e5b      	lsrs	r3, r3, #25
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	3301      	adds	r3, #1
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80024b6:	683b      	ldr	r3, [r7, #0]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	371c      	adds	r7, #28
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	40021000 	.word	0x40021000
 80024c8:	00f42400 	.word	0x00f42400
 80024cc:	007a1200 	.word	0x007a1200
 80024d0:	08007640 	.word	0x08007640

080024d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024dc:	2300      	movs	r3, #0
 80024de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024e0:	2300      	movs	r3, #0
 80024e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d040      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024f4:	2b80      	cmp	r3, #128	; 0x80
 80024f6:	d02a      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80024f8:	2b80      	cmp	r3, #128	; 0x80
 80024fa:	d825      	bhi.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80024fc:	2b60      	cmp	r3, #96	; 0x60
 80024fe:	d026      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002500:	2b60      	cmp	r3, #96	; 0x60
 8002502:	d821      	bhi.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002504:	2b40      	cmp	r3, #64	; 0x40
 8002506:	d006      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002508:	2b40      	cmp	r3, #64	; 0x40
 800250a:	d81d      	bhi.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800250c:	2b00      	cmp	r3, #0
 800250e:	d009      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002510:	2b20      	cmp	r3, #32
 8002512:	d010      	beq.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002514:	e018      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002516:	4b89      	ldr	r3, [pc, #548]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	4a88      	ldr	r2, [pc, #544]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800251c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002520:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002522:	e015      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3304      	adds	r3, #4
 8002528:	2100      	movs	r1, #0
 800252a:	4618      	mov	r0, r3
 800252c:	f000 fb02 	bl	8002b34 <RCCEx_PLLSAI1_Config>
 8002530:	4603      	mov	r3, r0
 8002532:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002534:	e00c      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3320      	adds	r3, #32
 800253a:	2100      	movs	r1, #0
 800253c:	4618      	mov	r0, r3
 800253e:	f000 fbed 	bl	8002d1c <RCCEx_PLLSAI2_Config>
 8002542:	4603      	mov	r3, r0
 8002544:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002546:	e003      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	74fb      	strb	r3, [r7, #19]
      break;
 800254c:	e000      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800254e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002550:	7cfb      	ldrb	r3, [r7, #19]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10b      	bne.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002556:	4b79      	ldr	r3, [pc, #484]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002558:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800255c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002564:	4975      	ldr	r1, [pc, #468]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002566:	4313      	orrs	r3, r2
 8002568:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800256c:	e001      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800256e:	7cfb      	ldrb	r3, [r7, #19]
 8002570:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d047      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002586:	d030      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800258c:	d82a      	bhi.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800258e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002592:	d02a      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002594:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002598:	d824      	bhi.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800259a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800259e:	d008      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80025a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025a4:	d81e      	bhi.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00a      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80025aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025ae:	d010      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80025b0:	e018      	b.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025b2:	4b62      	ldr	r3, [pc, #392]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	4a61      	ldr	r2, [pc, #388]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025bc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025be:	e015      	b.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3304      	adds	r3, #4
 80025c4:	2100      	movs	r1, #0
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 fab4 	bl	8002b34 <RCCEx_PLLSAI1_Config>
 80025cc:	4603      	mov	r3, r0
 80025ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025d0:	e00c      	b.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3320      	adds	r3, #32
 80025d6:	2100      	movs	r1, #0
 80025d8:	4618      	mov	r0, r3
 80025da:	f000 fb9f 	bl	8002d1c <RCCEx_PLLSAI2_Config>
 80025de:	4603      	mov	r3, r0
 80025e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025e2:	e003      	b.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	74fb      	strb	r3, [r7, #19]
      break;
 80025e8:	e000      	b.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80025ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025ec:	7cfb      	ldrb	r3, [r7, #19]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10b      	bne.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025f2:	4b52      	ldr	r3, [pc, #328]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80025f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002600:	494e      	ldr	r1, [pc, #312]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002602:	4313      	orrs	r3, r2
 8002604:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002608:	e001      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800260a:	7cfb      	ldrb	r3, [r7, #19]
 800260c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 809f 	beq.w	800275a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800261c:	2300      	movs	r3, #0
 800261e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002620:	4b46      	ldr	r3, [pc, #280]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002630:	2300      	movs	r3, #0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00d      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002636:	4b41      	ldr	r3, [pc, #260]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263a:	4a40      	ldr	r2, [pc, #256]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800263c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002640:	6593      	str	r3, [r2, #88]	; 0x58
 8002642:	4b3e      	ldr	r3, [pc, #248]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264a:	60bb      	str	r3, [r7, #8]
 800264c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800264e:	2301      	movs	r3, #1
 8002650:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002652:	4b3b      	ldr	r3, [pc, #236]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a3a      	ldr	r2, [pc, #232]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800265c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800265e:	f7fe fbf3 	bl	8000e48 <HAL_GetTick>
 8002662:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002664:	e009      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002666:	f7fe fbef 	bl	8000e48 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d902      	bls.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	74fb      	strb	r3, [r7, #19]
        break;
 8002678:	e005      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800267a:	4b31      	ldr	r3, [pc, #196]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0ef      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002686:	7cfb      	ldrb	r3, [r7, #19]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d15b      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800268c:	4b2b      	ldr	r3, [pc, #172]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800268e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002696:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d01f      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d019      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026aa:	4b24      	ldr	r3, [pc, #144]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026b4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026b6:	4b21      	ldr	r3, [pc, #132]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026bc:	4a1f      	ldr	r2, [pc, #124]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026c6:	4b1d      	ldr	r3, [pc, #116]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026cc:	4a1b      	ldr	r2, [pc, #108]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026d6:	4a19      	ldr	r2, [pc, #100]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d016      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e8:	f7fe fbae 	bl	8000e48 <HAL_GetTick>
 80026ec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ee:	e00b      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f0:	f7fe fbaa 	bl	8000e48 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fe:	4293      	cmp	r3, r2
 8002700:	d902      	bls.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	74fb      	strb	r3, [r7, #19]
            break;
 8002706:	e006      	b.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002708:	4b0c      	ldr	r3, [pc, #48]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800270a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0ec      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002716:	7cfb      	ldrb	r3, [r7, #19]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10c      	bne.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800271c:	4b07      	ldr	r3, [pc, #28]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800271e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002722:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272c:	4903      	ldr	r1, [pc, #12]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800272e:	4313      	orrs	r3, r2
 8002730:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002734:	e008      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002736:	7cfb      	ldrb	r3, [r7, #19]
 8002738:	74bb      	strb	r3, [r7, #18]
 800273a:	e005      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800273c:	40021000 	.word	0x40021000
 8002740:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002744:	7cfb      	ldrb	r3, [r7, #19]
 8002746:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002748:	7c7b      	ldrb	r3, [r7, #17]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d105      	bne.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800274e:	4ba0      	ldr	r3, [pc, #640]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002752:	4a9f      	ldr	r2, [pc, #636]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002758:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00a      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002766:	4b9a      	ldr	r3, [pc, #616]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276c:	f023 0203 	bic.w	r2, r3, #3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002774:	4996      	ldr	r1, [pc, #600]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002776:	4313      	orrs	r3, r2
 8002778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00a      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002788:	4b91      	ldr	r3, [pc, #580]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800278a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278e:	f023 020c 	bic.w	r2, r3, #12
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	498e      	ldr	r1, [pc, #568]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002798:	4313      	orrs	r3, r2
 800279a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0304 	and.w	r3, r3, #4
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00a      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027aa:	4b89      	ldr	r3, [pc, #548]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b8:	4985      	ldr	r1, [pc, #532]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0308 	and.w	r3, r3, #8
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00a      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027cc:	4b80      	ldr	r3, [pc, #512]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027da:	497d      	ldr	r1, [pc, #500]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0310 	and.w	r3, r3, #16
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00a      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027ee:	4b78      	ldr	r3, [pc, #480]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fc:	4974      	ldr	r1, [pc, #464]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0320 	and.w	r3, r3, #32
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00a      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002810:	4b6f      	ldr	r3, [pc, #444]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002816:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800281e:	496c      	ldr	r1, [pc, #432]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00a      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002832:	4b67      	ldr	r3, [pc, #412]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002838:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002840:	4963      	ldr	r1, [pc, #396]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00a      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002854:	4b5e      	ldr	r3, [pc, #376]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002862:	495b      	ldr	r1, [pc, #364]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002864:	4313      	orrs	r3, r2
 8002866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00a      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002876:	4b56      	ldr	r3, [pc, #344]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002884:	4952      	ldr	r1, [pc, #328]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002886:	4313      	orrs	r3, r2
 8002888:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00a      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002898:	4b4d      	ldr	r3, [pc, #308]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800289a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a6:	494a      	ldr	r1, [pc, #296]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00a      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028ba:	4b45      	ldr	r3, [pc, #276]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c8:	4941      	ldr	r1, [pc, #260]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00a      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028dc:	4b3c      	ldr	r3, [pc, #240]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028e2:	f023 0203 	bic.w	r2, r3, #3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ea:	4939      	ldr	r1, [pc, #228]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d028      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028fe:	4b34      	ldr	r3, [pc, #208]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002904:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800290c:	4930      	ldr	r1, [pc, #192]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800290e:	4313      	orrs	r3, r2
 8002910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002918:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800291c:	d106      	bne.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800291e:	4b2c      	ldr	r3, [pc, #176]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	4a2b      	ldr	r2, [pc, #172]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002924:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002928:	60d3      	str	r3, [r2, #12]
 800292a:	e011      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002930:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002934:	d10c      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3304      	adds	r3, #4
 800293a:	2101      	movs	r1, #1
 800293c:	4618      	mov	r0, r3
 800293e:	f000 f8f9 	bl	8002b34 <RCCEx_PLLSAI1_Config>
 8002942:	4603      	mov	r3, r0
 8002944:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002946:	7cfb      	ldrb	r3, [r7, #19]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800294c:	7cfb      	ldrb	r3, [r7, #19]
 800294e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d04d      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002960:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002964:	d108      	bne.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002966:	4b1a      	ldr	r3, [pc, #104]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002968:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800296c:	4a18      	ldr	r2, [pc, #96]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800296e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002972:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002976:	e012      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002978:	4b15      	ldr	r3, [pc, #84]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800297a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800297e:	4a14      	ldr	r2, [pc, #80]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002980:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002984:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002988:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800298a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002996:	490e      	ldr	r1, [pc, #56]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029a6:	d106      	bne.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029a8:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	4a08      	ldr	r2, [pc, #32]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029b2:	60d3      	str	r3, [r2, #12]
 80029b4:	e020      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029be:	d109      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029c0:	4b03      	ldr	r3, [pc, #12]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	4a02      	ldr	r2, [pc, #8]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ca:	60d3      	str	r3, [r2, #12]
 80029cc:	e014      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80029ce:	bf00      	nop
 80029d0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029dc:	d10c      	bne.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3304      	adds	r3, #4
 80029e2:	2101      	movs	r1, #1
 80029e4:	4618      	mov	r0, r3
 80029e6:	f000 f8a5 	bl	8002b34 <RCCEx_PLLSAI1_Config>
 80029ea:	4603      	mov	r3, r0
 80029ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029ee:	7cfb      	ldrb	r3, [r7, #19]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80029f4:	7cfb      	ldrb	r3, [r7, #19]
 80029f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d028      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a04:	4b4a      	ldr	r3, [pc, #296]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a12:	4947      	ldr	r1, [pc, #284]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a22:	d106      	bne.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a24:	4b42      	ldr	r3, [pc, #264]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	4a41      	ldr	r2, [pc, #260]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a2e:	60d3      	str	r3, [r2, #12]
 8002a30:	e011      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a3a:	d10c      	bne.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3304      	adds	r3, #4
 8002a40:	2101      	movs	r1, #1
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 f876 	bl	8002b34 <RCCEx_PLLSAI1_Config>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a4c:	7cfb      	ldrb	r3, [r7, #19]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002a52:	7cfb      	ldrb	r3, [r7, #19]
 8002a54:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d01e      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a62:	4b33      	ldr	r3, [pc, #204]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a68:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a72:	492f      	ldr	r1, [pc, #188]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a84:	d10c      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3304      	adds	r3, #4
 8002a8a:	2102      	movs	r1, #2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 f851 	bl	8002b34 <RCCEx_PLLSAI1_Config>
 8002a92:	4603      	mov	r3, r0
 8002a94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a96:	7cfb      	ldrb	r3, [r7, #19]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002a9c:	7cfb      	ldrb	r3, [r7, #19]
 8002a9e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00b      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002aac:	4b20      	ldr	r3, [pc, #128]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ab2:	f023 0204 	bic.w	r2, r3, #4
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002abc:	491c      	ldr	r1, [pc, #112]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00b      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002ad0:	4b17      	ldr	r3, [pc, #92]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ad2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ad6:	f023 0218 	bic.w	r2, r3, #24
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae0:	4913      	ldr	r1, [pc, #76]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d017      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002af4:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002af6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002afa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b04:	490a      	ldr	r1, [pc, #40]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b16:	d105      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b18:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	4a04      	ldr	r2, [pc, #16]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b22:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b24:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40021000 	.word	0x40021000

08002b34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b42:	4b72      	ldr	r3, [pc, #456]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00e      	beq.n	8002b6c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b4e:	4b6f      	ldr	r3, [pc, #444]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f003 0203 	and.w	r2, r3, #3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d103      	bne.n	8002b66 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
       ||
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d142      	bne.n	8002bec <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	73fb      	strb	r3, [r7, #15]
 8002b6a:	e03f      	b.n	8002bec <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b03      	cmp	r3, #3
 8002b72:	d018      	beq.n	8002ba6 <RCCEx_PLLSAI1_Config+0x72>
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d825      	bhi.n	8002bc4 <RCCEx_PLLSAI1_Config+0x90>
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d002      	beq.n	8002b82 <RCCEx_PLLSAI1_Config+0x4e>
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d009      	beq.n	8002b94 <RCCEx_PLLSAI1_Config+0x60>
 8002b80:	e020      	b.n	8002bc4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b82:	4b62      	ldr	r3, [pc, #392]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d11d      	bne.n	8002bca <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b92:	e01a      	b.n	8002bca <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b94:	4b5d      	ldr	r3, [pc, #372]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d116      	bne.n	8002bce <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ba4:	e013      	b.n	8002bce <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ba6:	4b59      	ldr	r3, [pc, #356]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10f      	bne.n	8002bd2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bb2:	4b56      	ldr	r3, [pc, #344]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d109      	bne.n	8002bd2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bc2:	e006      	b.n	8002bd2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002bc8:	e004      	b.n	8002bd4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002bca:	bf00      	nop
 8002bcc:	e002      	b.n	8002bd4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002bce:	bf00      	nop
 8002bd0:	e000      	b.n	8002bd4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002bd2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d108      	bne.n	8002bec <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002bda:	4b4c      	ldr	r3, [pc, #304]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	f023 0203 	bic.w	r2, r3, #3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4949      	ldr	r1, [pc, #292]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f040 8086 	bne.w	8002d00 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002bf4:	4b45      	ldr	r3, [pc, #276]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a44      	ldr	r2, [pc, #272]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bfa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002bfe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c00:	f7fe f922 	bl	8000e48 <HAL_GetTick>
 8002c04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c06:	e009      	b.n	8002c1c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c08:	f7fe f91e 	bl	8000e48 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d902      	bls.n	8002c1c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	73fb      	strb	r3, [r7, #15]
        break;
 8002c1a:	e005      	b.n	8002c28 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c1c:	4b3b      	ldr	r3, [pc, #236]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1ef      	bne.n	8002c08 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d168      	bne.n	8002d00 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d113      	bne.n	8002c5c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c34:	4b35      	ldr	r3, [pc, #212]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c36:	691a      	ldr	r2, [r3, #16]
 8002c38:	4b35      	ldr	r3, [pc, #212]	; (8002d10 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6892      	ldr	r2, [r2, #8]
 8002c40:	0211      	lsls	r1, r2, #8
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	68d2      	ldr	r2, [r2, #12]
 8002c46:	06d2      	lsls	r2, r2, #27
 8002c48:	4311      	orrs	r1, r2
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6852      	ldr	r2, [r2, #4]
 8002c4e:	3a01      	subs	r2, #1
 8002c50:	0112      	lsls	r2, r2, #4
 8002c52:	430a      	orrs	r2, r1
 8002c54:	492d      	ldr	r1, [pc, #180]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	610b      	str	r3, [r1, #16]
 8002c5a:	e02d      	b.n	8002cb8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d115      	bne.n	8002c8e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c62:	4b2a      	ldr	r3, [pc, #168]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c64:	691a      	ldr	r2, [r3, #16]
 8002c66:	4b2b      	ldr	r3, [pc, #172]	; (8002d14 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c68:	4013      	ands	r3, r2
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6892      	ldr	r2, [r2, #8]
 8002c6e:	0211      	lsls	r1, r2, #8
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6912      	ldr	r2, [r2, #16]
 8002c74:	0852      	lsrs	r2, r2, #1
 8002c76:	3a01      	subs	r2, #1
 8002c78:	0552      	lsls	r2, r2, #21
 8002c7a:	4311      	orrs	r1, r2
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6852      	ldr	r2, [r2, #4]
 8002c80:	3a01      	subs	r2, #1
 8002c82:	0112      	lsls	r2, r2, #4
 8002c84:	430a      	orrs	r2, r1
 8002c86:	4921      	ldr	r1, [pc, #132]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	610b      	str	r3, [r1, #16]
 8002c8c:	e014      	b.n	8002cb8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c8e:	4b1f      	ldr	r3, [pc, #124]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c90:	691a      	ldr	r2, [r3, #16]
 8002c92:	4b21      	ldr	r3, [pc, #132]	; (8002d18 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c94:	4013      	ands	r3, r2
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6892      	ldr	r2, [r2, #8]
 8002c9a:	0211      	lsls	r1, r2, #8
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6952      	ldr	r2, [r2, #20]
 8002ca0:	0852      	lsrs	r2, r2, #1
 8002ca2:	3a01      	subs	r2, #1
 8002ca4:	0652      	lsls	r2, r2, #25
 8002ca6:	4311      	orrs	r1, r2
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6852      	ldr	r2, [r2, #4]
 8002cac:	3a01      	subs	r2, #1
 8002cae:	0112      	lsls	r2, r2, #4
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	4916      	ldr	r1, [pc, #88]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002cb8:	4b14      	ldr	r3, [pc, #80]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a13      	ldr	r2, [pc, #76]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cc2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc4:	f7fe f8c0 	bl	8000e48 <HAL_GetTick>
 8002cc8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cca:	e009      	b.n	8002ce0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ccc:	f7fe f8bc 	bl	8000e48 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d902      	bls.n	8002ce0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	73fb      	strb	r3, [r7, #15]
          break;
 8002cde:	e005      	b.n	8002cec <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ce0:	4b0a      	ldr	r3, [pc, #40]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0ef      	beq.n	8002ccc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d106      	bne.n	8002d00 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002cf2:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cf4:	691a      	ldr	r2, [r3, #16]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	4904      	ldr	r1, [pc, #16]	; (8002d0c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	07ff800f 	.word	0x07ff800f
 8002d14:	ff9f800f 	.word	0xff9f800f
 8002d18:	f9ff800f 	.word	0xf9ff800f

08002d1c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d2a:	4b72      	ldr	r3, [pc, #456]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f003 0303 	and.w	r3, r3, #3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00e      	beq.n	8002d54 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d36:	4b6f      	ldr	r3, [pc, #444]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	f003 0203 	and.w	r2, r3, #3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d103      	bne.n	8002d4e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
       ||
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d142      	bne.n	8002dd4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	73fb      	strb	r3, [r7, #15]
 8002d52:	e03f      	b.n	8002dd4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d018      	beq.n	8002d8e <RCCEx_PLLSAI2_Config+0x72>
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	d825      	bhi.n	8002dac <RCCEx_PLLSAI2_Config+0x90>
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d002      	beq.n	8002d6a <RCCEx_PLLSAI2_Config+0x4e>
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d009      	beq.n	8002d7c <RCCEx_PLLSAI2_Config+0x60>
 8002d68:	e020      	b.n	8002dac <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d6a:	4b62      	ldr	r3, [pc, #392]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d11d      	bne.n	8002db2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d7a:	e01a      	b.n	8002db2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d7c:	4b5d      	ldr	r3, [pc, #372]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d116      	bne.n	8002db6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d8c:	e013      	b.n	8002db6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d8e:	4b59      	ldr	r3, [pc, #356]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10f      	bne.n	8002dba <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d9a:	4b56      	ldr	r3, [pc, #344]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d109      	bne.n	8002dba <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002daa:	e006      	b.n	8002dba <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	73fb      	strb	r3, [r7, #15]
      break;
 8002db0:	e004      	b.n	8002dbc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002db2:	bf00      	nop
 8002db4:	e002      	b.n	8002dbc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002db6:	bf00      	nop
 8002db8:	e000      	b.n	8002dbc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002dba:	bf00      	nop
    }

    if(status == HAL_OK)
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d108      	bne.n	8002dd4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002dc2:	4b4c      	ldr	r3, [pc, #304]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f023 0203 	bic.w	r2, r3, #3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4949      	ldr	r1, [pc, #292]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002dd4:	7bfb      	ldrb	r3, [r7, #15]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f040 8086 	bne.w	8002ee8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ddc:	4b45      	ldr	r3, [pc, #276]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a44      	ldr	r2, [pc, #272]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002de2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002de6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002de8:	f7fe f82e 	bl	8000e48 <HAL_GetTick>
 8002dec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002dee:	e009      	b.n	8002e04 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002df0:	f7fe f82a 	bl	8000e48 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d902      	bls.n	8002e04 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	73fb      	strb	r3, [r7, #15]
        break;
 8002e02:	e005      	b.n	8002e10 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e04:	4b3b      	ldr	r3, [pc, #236]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1ef      	bne.n	8002df0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d168      	bne.n	8002ee8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d113      	bne.n	8002e44 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e1c:	4b35      	ldr	r3, [pc, #212]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e1e:	695a      	ldr	r2, [r3, #20]
 8002e20:	4b35      	ldr	r3, [pc, #212]	; (8002ef8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002e22:	4013      	ands	r3, r2
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6892      	ldr	r2, [r2, #8]
 8002e28:	0211      	lsls	r1, r2, #8
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	68d2      	ldr	r2, [r2, #12]
 8002e2e:	06d2      	lsls	r2, r2, #27
 8002e30:	4311      	orrs	r1, r2
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6852      	ldr	r2, [r2, #4]
 8002e36:	3a01      	subs	r2, #1
 8002e38:	0112      	lsls	r2, r2, #4
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	492d      	ldr	r1, [pc, #180]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	614b      	str	r3, [r1, #20]
 8002e42:	e02d      	b.n	8002ea0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d115      	bne.n	8002e76 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e4a:	4b2a      	ldr	r3, [pc, #168]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e4c:	695a      	ldr	r2, [r3, #20]
 8002e4e:	4b2b      	ldr	r3, [pc, #172]	; (8002efc <RCCEx_PLLSAI2_Config+0x1e0>)
 8002e50:	4013      	ands	r3, r2
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6892      	ldr	r2, [r2, #8]
 8002e56:	0211      	lsls	r1, r2, #8
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6912      	ldr	r2, [r2, #16]
 8002e5c:	0852      	lsrs	r2, r2, #1
 8002e5e:	3a01      	subs	r2, #1
 8002e60:	0552      	lsls	r2, r2, #21
 8002e62:	4311      	orrs	r1, r2
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6852      	ldr	r2, [r2, #4]
 8002e68:	3a01      	subs	r2, #1
 8002e6a:	0112      	lsls	r2, r2, #4
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	4921      	ldr	r1, [pc, #132]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	614b      	str	r3, [r1, #20]
 8002e74:	e014      	b.n	8002ea0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e76:	4b1f      	ldr	r3, [pc, #124]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e78:	695a      	ldr	r2, [r3, #20]
 8002e7a:	4b21      	ldr	r3, [pc, #132]	; (8002f00 <RCCEx_PLLSAI2_Config+0x1e4>)
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6892      	ldr	r2, [r2, #8]
 8002e82:	0211      	lsls	r1, r2, #8
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6952      	ldr	r2, [r2, #20]
 8002e88:	0852      	lsrs	r2, r2, #1
 8002e8a:	3a01      	subs	r2, #1
 8002e8c:	0652      	lsls	r2, r2, #25
 8002e8e:	4311      	orrs	r1, r2
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6852      	ldr	r2, [r2, #4]
 8002e94:	3a01      	subs	r2, #1
 8002e96:	0112      	lsls	r2, r2, #4
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	4916      	ldr	r1, [pc, #88]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ea0:	4b14      	ldr	r3, [pc, #80]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a13      	ldr	r2, [pc, #76]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eaa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eac:	f7fd ffcc 	bl	8000e48 <HAL_GetTick>
 8002eb0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002eb2:	e009      	b.n	8002ec8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002eb4:	f7fd ffc8 	bl	8000e48 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d902      	bls.n	8002ec8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	73fb      	strb	r3, [r7, #15]
          break;
 8002ec6:	e005      	b.n	8002ed4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ec8:	4b0a      	ldr	r3, [pc, #40]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0ef      	beq.n	8002eb4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002ed4:	7bfb      	ldrb	r3, [r7, #15]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002eda:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002edc:	695a      	ldr	r2, [r3, #20]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	4904      	ldr	r1, [pc, #16]	; (8002ef4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	07ff800f 	.word	0x07ff800f
 8002efc:	ff9f800f 	.word	0xff9f800f
 8002f00:	f9ff800f 	.word	0xf9ff800f

08002f04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e049      	b.n	8002faa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d106      	bne.n	8002f30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f841 	bl	8002fb2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2202      	movs	r2, #2
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3304      	adds	r3, #4
 8002f40:	4619      	mov	r1, r3
 8002f42:	4610      	mov	r0, r2
 8002f44:	f000 f9f8 	bl	8003338 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
	...

08002fc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d001      	beq.n	8002fe0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e04f      	b.n	8003080 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68da      	ldr	r2, [r3, #12]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0201 	orr.w	r2, r2, #1
 8002ff6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a23      	ldr	r2, [pc, #140]	; (800308c <HAL_TIM_Base_Start_IT+0xc4>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d01d      	beq.n	800303e <HAL_TIM_Base_Start_IT+0x76>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800300a:	d018      	beq.n	800303e <HAL_TIM_Base_Start_IT+0x76>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a1f      	ldr	r2, [pc, #124]	; (8003090 <HAL_TIM_Base_Start_IT+0xc8>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d013      	beq.n	800303e <HAL_TIM_Base_Start_IT+0x76>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a1e      	ldr	r2, [pc, #120]	; (8003094 <HAL_TIM_Base_Start_IT+0xcc>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d00e      	beq.n	800303e <HAL_TIM_Base_Start_IT+0x76>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a1c      	ldr	r2, [pc, #112]	; (8003098 <HAL_TIM_Base_Start_IT+0xd0>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d009      	beq.n	800303e <HAL_TIM_Base_Start_IT+0x76>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a1b      	ldr	r2, [pc, #108]	; (800309c <HAL_TIM_Base_Start_IT+0xd4>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d004      	beq.n	800303e <HAL_TIM_Base_Start_IT+0x76>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a19      	ldr	r2, [pc, #100]	; (80030a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d115      	bne.n	800306a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	4b17      	ldr	r3, [pc, #92]	; (80030a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003046:	4013      	ands	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2b06      	cmp	r3, #6
 800304e:	d015      	beq.n	800307c <HAL_TIM_Base_Start_IT+0xb4>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003056:	d011      	beq.n	800307c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0201 	orr.w	r2, r2, #1
 8003066:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003068:	e008      	b.n	800307c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f042 0201 	orr.w	r2, r2, #1
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	e000      	b.n	800307e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800307c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	40012c00 	.word	0x40012c00
 8003090:	40000400 	.word	0x40000400
 8003094:	40000800 	.word	0x40000800
 8003098:	40000c00 	.word	0x40000c00
 800309c:	40013400 	.word	0x40013400
 80030a0:	40014000 	.word	0x40014000
 80030a4:	00010007 	.word	0x00010007

080030a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d122      	bne.n	8003104 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d11b      	bne.n	8003104 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f06f 0202 	mvn.w	r2, #2
 80030d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f905 	bl	80032fa <HAL_TIM_IC_CaptureCallback>
 80030f0:	e005      	b.n	80030fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 f8f7 	bl	80032e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 f908 	bl	800330e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	f003 0304 	and.w	r3, r3, #4
 800310e:	2b04      	cmp	r3, #4
 8003110:	d122      	bne.n	8003158 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b04      	cmp	r3, #4
 800311e:	d11b      	bne.n	8003158 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f06f 0204 	mvn.w	r2, #4
 8003128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2202      	movs	r2, #2
 800312e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f8db 	bl	80032fa <HAL_TIM_IC_CaptureCallback>
 8003144:	e005      	b.n	8003152 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f8cd 	bl	80032e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f8de 	bl	800330e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b08      	cmp	r3, #8
 8003164:	d122      	bne.n	80031ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f003 0308 	and.w	r3, r3, #8
 8003170:	2b08      	cmp	r3, #8
 8003172:	d11b      	bne.n	80031ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f06f 0208 	mvn.w	r2, #8
 800317c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2204      	movs	r2, #4
 8003182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f8b1 	bl	80032fa <HAL_TIM_IC_CaptureCallback>
 8003198:	e005      	b.n	80031a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f8a3 	bl	80032e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f8b4 	bl	800330e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	f003 0310 	and.w	r3, r3, #16
 80031b6:	2b10      	cmp	r3, #16
 80031b8:	d122      	bne.n	8003200 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f003 0310 	and.w	r3, r3, #16
 80031c4:	2b10      	cmp	r3, #16
 80031c6:	d11b      	bne.n	8003200 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f06f 0210 	mvn.w	r2, #16
 80031d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2208      	movs	r2, #8
 80031d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f887 	bl	80032fa <HAL_TIM_IC_CaptureCallback>
 80031ec:	e005      	b.n	80031fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f879 	bl	80032e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f88a 	bl	800330e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b01      	cmp	r3, #1
 800320c:	d10e      	bne.n	800322c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b01      	cmp	r3, #1
 800321a:	d107      	bne.n	800322c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f06f 0201 	mvn.w	r2, #1
 8003224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7fd fc20 	bl	8000a6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003236:	2b80      	cmp	r3, #128	; 0x80
 8003238:	d10e      	bne.n	8003258 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003244:	2b80      	cmp	r3, #128	; 0x80
 8003246:	d107      	bne.n	8003258 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f914 	bl	8003480 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003266:	d10e      	bne.n	8003286 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003272:	2b80      	cmp	r3, #128	; 0x80
 8003274:	d107      	bne.n	8003286 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800327e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 f907 	bl	8003494 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003290:	2b40      	cmp	r3, #64	; 0x40
 8003292:	d10e      	bne.n	80032b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329e:	2b40      	cmp	r3, #64	; 0x40
 80032a0:	d107      	bne.n	80032b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 f838 	bl	8003322 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	f003 0320 	and.w	r3, r3, #32
 80032bc:	2b20      	cmp	r3, #32
 80032be:	d10e      	bne.n	80032de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	f003 0320 	and.w	r3, r3, #32
 80032ca:	2b20      	cmp	r3, #32
 80032cc:	d107      	bne.n	80032de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f06f 0220 	mvn.w	r2, #32
 80032d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 f8c7 	bl	800346c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032de:	bf00      	nop
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
	...

08003338 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a40      	ldr	r2, [pc, #256]	; (800344c <TIM_Base_SetConfig+0x114>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d013      	beq.n	8003378 <TIM_Base_SetConfig+0x40>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003356:	d00f      	beq.n	8003378 <TIM_Base_SetConfig+0x40>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a3d      	ldr	r2, [pc, #244]	; (8003450 <TIM_Base_SetConfig+0x118>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d00b      	beq.n	8003378 <TIM_Base_SetConfig+0x40>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a3c      	ldr	r2, [pc, #240]	; (8003454 <TIM_Base_SetConfig+0x11c>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d007      	beq.n	8003378 <TIM_Base_SetConfig+0x40>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a3b      	ldr	r2, [pc, #236]	; (8003458 <TIM_Base_SetConfig+0x120>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d003      	beq.n	8003378 <TIM_Base_SetConfig+0x40>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a3a      	ldr	r2, [pc, #232]	; (800345c <TIM_Base_SetConfig+0x124>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d108      	bne.n	800338a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800337e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	4313      	orrs	r3, r2
 8003388:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a2f      	ldr	r2, [pc, #188]	; (800344c <TIM_Base_SetConfig+0x114>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d01f      	beq.n	80033d2 <TIM_Base_SetConfig+0x9a>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003398:	d01b      	beq.n	80033d2 <TIM_Base_SetConfig+0x9a>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a2c      	ldr	r2, [pc, #176]	; (8003450 <TIM_Base_SetConfig+0x118>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d017      	beq.n	80033d2 <TIM_Base_SetConfig+0x9a>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a2b      	ldr	r2, [pc, #172]	; (8003454 <TIM_Base_SetConfig+0x11c>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d013      	beq.n	80033d2 <TIM_Base_SetConfig+0x9a>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a2a      	ldr	r2, [pc, #168]	; (8003458 <TIM_Base_SetConfig+0x120>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d00f      	beq.n	80033d2 <TIM_Base_SetConfig+0x9a>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a29      	ldr	r2, [pc, #164]	; (800345c <TIM_Base_SetConfig+0x124>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d00b      	beq.n	80033d2 <TIM_Base_SetConfig+0x9a>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a28      	ldr	r2, [pc, #160]	; (8003460 <TIM_Base_SetConfig+0x128>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d007      	beq.n	80033d2 <TIM_Base_SetConfig+0x9a>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a27      	ldr	r2, [pc, #156]	; (8003464 <TIM_Base_SetConfig+0x12c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d003      	beq.n	80033d2 <TIM_Base_SetConfig+0x9a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a26      	ldr	r2, [pc, #152]	; (8003468 <TIM_Base_SetConfig+0x130>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d108      	bne.n	80033e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a10      	ldr	r2, [pc, #64]	; (800344c <TIM_Base_SetConfig+0x114>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d00f      	beq.n	8003430 <TIM_Base_SetConfig+0xf8>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a12      	ldr	r2, [pc, #72]	; (800345c <TIM_Base_SetConfig+0x124>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d00b      	beq.n	8003430 <TIM_Base_SetConfig+0xf8>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a11      	ldr	r2, [pc, #68]	; (8003460 <TIM_Base_SetConfig+0x128>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d007      	beq.n	8003430 <TIM_Base_SetConfig+0xf8>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a10      	ldr	r2, [pc, #64]	; (8003464 <TIM_Base_SetConfig+0x12c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d003      	beq.n	8003430 <TIM_Base_SetConfig+0xf8>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a0f      	ldr	r2, [pc, #60]	; (8003468 <TIM_Base_SetConfig+0x130>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d103      	bne.n	8003438 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	615a      	str	r2, [r3, #20]
}
 800343e:	bf00      	nop
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	40012c00 	.word	0x40012c00
 8003450:	40000400 	.word	0x40000400
 8003454:	40000800 	.word	0x40000800
 8003458:	40000c00 	.word	0x40000c00
 800345c:	40013400 	.word	0x40013400
 8003460:	40014000 	.word	0x40014000
 8003464:	40014400 	.word	0x40014400
 8003468:	40014800 	.word	0x40014800

0800346c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e042      	b.n	8003540 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d106      	bne.n	80034d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7fd fc19 	bl	8000d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2224      	movs	r2, #36	; 0x24
 80034d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 0201 	bic.w	r2, r2, #1
 80034e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 fb64 	bl	8003bb8 <UART_SetConfig>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d101      	bne.n	80034fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e022      	b.n	8003540 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d002      	beq.n	8003508 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 fe54 	bl	80041b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003516:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003526:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0201 	orr.w	r2, r2, #1
 8003536:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 fedb 	bl	80042f4 <UART_CheckIdleState>
 800353e:	4603      	mov	r3, r0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b0ba      	sub	sp, #232	; 0xe8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800356e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003572:	f640 030f 	movw	r3, #2063	; 0x80f
 8003576:	4013      	ands	r3, r2
 8003578:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800357c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003580:	2b00      	cmp	r3, #0
 8003582:	d11b      	bne.n	80035bc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003588:	f003 0320 	and.w	r3, r3, #32
 800358c:	2b00      	cmp	r3, #0
 800358e:	d015      	beq.n	80035bc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003594:	f003 0320 	and.w	r3, r3, #32
 8003598:	2b00      	cmp	r3, #0
 800359a:	d105      	bne.n	80035a8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800359c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d009      	beq.n	80035bc <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 82d6 	beq.w	8003b5e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	4798      	blx	r3
      }
      return;
 80035ba:	e2d0      	b.n	8003b5e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 80035bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 811f 	beq.w	8003804 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80035c6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80035ca:	4b8b      	ldr	r3, [pc, #556]	; (80037f8 <HAL_UART_IRQHandler+0x2b0>)
 80035cc:	4013      	ands	r3, r2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d106      	bne.n	80035e0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80035d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80035d6:	4b89      	ldr	r3, [pc, #548]	; (80037fc <HAL_UART_IRQHandler+0x2b4>)
 80035d8:	4013      	ands	r3, r2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 8112 	beq.w	8003804 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80035e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d011      	beq.n	8003610 <HAL_UART_IRQHandler+0xc8>
 80035ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00b      	beq.n	8003610 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2201      	movs	r2, #1
 80035fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003606:	f043 0201 	orr.w	r2, r3, #1
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d011      	beq.n	8003640 <HAL_UART_IRQHandler+0xf8>
 800361c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00b      	beq.n	8003640 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2202      	movs	r2, #2
 800362e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003636:	f043 0204 	orr.w	r2, r3, #4
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	d011      	beq.n	8003670 <HAL_UART_IRQHandler+0x128>
 800364c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00b      	beq.n	8003670 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2204      	movs	r2, #4
 800365e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003666:	f043 0202 	orr.w	r2, r3, #2
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b00      	cmp	r3, #0
 800367a:	d017      	beq.n	80036ac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800367c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003680:	f003 0320 	and.w	r3, r3, #32
 8003684:	2b00      	cmp	r3, #0
 8003686:	d105      	bne.n	8003694 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003688:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800368c:	4b5a      	ldr	r3, [pc, #360]	; (80037f8 <HAL_UART_IRQHandler+0x2b0>)
 800368e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00b      	beq.n	80036ac <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2208      	movs	r2, #8
 800369a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036a2:	f043 0208 	orr.w	r2, r3, #8
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80036ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d012      	beq.n	80036de <HAL_UART_IRQHandler+0x196>
 80036b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00c      	beq.n	80036de <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036d4:	f043 0220 	orr.w	r2, r3, #32
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 823c 	beq.w	8003b62 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80036ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ee:	f003 0320 	and.w	r3, r3, #32
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d013      	beq.n	800371e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80036f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036fa:	f003 0320 	and.w	r3, r3, #32
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d105      	bne.n	800370e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d007      	beq.n	800371e <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003724:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003732:	2b40      	cmp	r3, #64	; 0x40
 8003734:	d005      	beq.n	8003742 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003736:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800373a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800373e:	2b00      	cmp	r3, #0
 8003740:	d04f      	beq.n	80037e2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 fee9 	bl	800451a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003752:	2b40      	cmp	r3, #64	; 0x40
 8003754:	d141      	bne.n	80037da <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	3308      	adds	r3, #8
 800375c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003760:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003764:	e853 3f00 	ldrex	r3, [r3]
 8003768:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800376c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003774:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	3308      	adds	r3, #8
 800377e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003782:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003786:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800378e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003792:	e841 2300 	strex	r3, r2, [r1]
 8003796:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800379a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1d9      	bne.n	8003756 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d013      	beq.n	80037d2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037ae:	4a14      	ldr	r2, [pc, #80]	; (8003800 <HAL_UART_IRQHandler+0x2b8>)
 80037b0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fd fc90 	bl	80010dc <HAL_DMA_Abort_IT>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d017      	beq.n	80037f2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80037cc:	4610      	mov	r0, r2
 80037ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d0:	e00f      	b.n	80037f2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f9da 	bl	8003b8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d8:	e00b      	b.n	80037f2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f9d6 	bl	8003b8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e0:	e007      	b.n	80037f2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f9d2 	bl	8003b8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80037f0:	e1b7      	b.n	8003b62 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f2:	bf00      	nop
    return;
 80037f4:	e1b5      	b.n	8003b62 <HAL_UART_IRQHandler+0x61a>
 80037f6:	bf00      	nop
 80037f8:	10000001 	.word	0x10000001
 80037fc:	04000120 	.word	0x04000120
 8003800:	080045e7 	.word	0x080045e7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003808:	2b01      	cmp	r3, #1
 800380a:	f040 814a 	bne.w	8003aa2 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800380e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003812:	f003 0310 	and.w	r3, r3, #16
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 8143 	beq.w	8003aa2 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800381c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003820:	f003 0310 	and.w	r3, r3, #16
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 813c 	beq.w	8003aa2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2210      	movs	r2, #16
 8003830:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383c:	2b40      	cmp	r3, #64	; 0x40
 800383e:	f040 80b5 	bne.w	80039ac <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800384e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 8187 	beq.w	8003b66 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800385e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003862:	429a      	cmp	r2, r3
 8003864:	f080 817f 	bcs.w	8003b66 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800386e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0320 	and.w	r3, r3, #32
 800387e:	2b00      	cmp	r3, #0
 8003880:	f040 8086 	bne.w	8003990 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003890:	e853 3f00 	ldrex	r3, [r3]
 8003894:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003898:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800389c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	461a      	mov	r2, r3
 80038aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80038ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80038b2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80038ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80038be:	e841 2300 	strex	r3, r2, [r1]
 80038c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80038c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1da      	bne.n	8003884 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3308      	adds	r3, #8
 80038d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038d8:	e853 3f00 	ldrex	r3, [r3]
 80038dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80038de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038e0:	f023 0301 	bic.w	r3, r3, #1
 80038e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3308      	adds	r3, #8
 80038ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80038f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80038fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80038fe:	e841 2300 	strex	r3, r2, [r1]
 8003902:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1e1      	bne.n	80038ce <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	3308      	adds	r3, #8
 8003910:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003912:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003914:	e853 3f00 	ldrex	r3, [r3]
 8003918:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800391a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800391c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003920:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	3308      	adds	r3, #8
 800392a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800392e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003930:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003932:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003934:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003936:	e841 2300 	strex	r3, r2, [r1]
 800393a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800393c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1e3      	bne.n	800390a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2220      	movs	r2, #32
 8003946:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003958:	e853 3f00 	ldrex	r3, [r3]
 800395c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800395e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003960:	f023 0310 	bic.w	r3, r3, #16
 8003964:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	461a      	mov	r2, r3
 800396e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003972:	65bb      	str	r3, [r7, #88]	; 0x58
 8003974:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003976:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003978:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800397a:	e841 2300 	strex	r3, r2, [r1]
 800397e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1e4      	bne.n	8003950 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800398a:	4618      	mov	r0, r3
 800398c:	f7fd fb4a 	bl	8001024 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800399c:	b29b      	uxth	r3, r3
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	4619      	mov	r1, r3
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f8fb 	bl	8003ba0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039aa:	e0dc      	b.n	8003b66 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 80ce 	beq.w	8003b6a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80039ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 80c9 	beq.w	8003b6a <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e0:	e853 3f00 	ldrex	r3, [r3]
 80039e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	461a      	mov	r2, r3
 80039f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80039fa:	647b      	str	r3, [r7, #68]	; 0x44
 80039fc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a02:	e841 2300 	strex	r3, r2, [r1]
 8003a06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1e4      	bne.n	80039d8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	3308      	adds	r3, #8
 8003a14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	e853 3f00 	ldrex	r3, [r3]
 8003a1c:	623b      	str	r3, [r7, #32]
   return(result);
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a24:	f023 0301 	bic.w	r3, r3, #1
 8003a28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	3308      	adds	r3, #8
 8003a32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a36:	633a      	str	r2, [r7, #48]	; 0x30
 8003a38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a3e:	e841 2300 	strex	r3, r2, [r1]
 8003a42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1e1      	bne.n	8003a0e <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	e853 3f00 	ldrex	r3, [r3]
 8003a6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 0310 	bic.w	r3, r3, #16
 8003a72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a80:	61fb      	str	r3, [r7, #28]
 8003a82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a84:	69b9      	ldr	r1, [r7, #24]
 8003a86:	69fa      	ldr	r2, [r7, #28]
 8003a88:	e841 2300 	strex	r3, r2, [r1]
 8003a8c:	617b      	str	r3, [r7, #20]
   return(result);
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1e4      	bne.n	8003a5e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a98:	4619      	mov	r1, r3
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f880 	bl	8003ba0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003aa0:	e063      	b.n	8003b6a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00e      	beq.n	8003acc <HAL_UART_IRQHandler+0x584>
 8003aae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d008      	beq.n	8003acc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ac2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 fdcf 	bl	8004668 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003aca:	e051      	b.n	8003b70 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d014      	beq.n	8003b02 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d105      	bne.n	8003af0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003ae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ae8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d008      	beq.n	8003b02 <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d03a      	beq.n	8003b6e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	4798      	blx	r3
    }
    return;
 8003b00:	e035      	b.n	8003b6e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d009      	beq.n	8003b22 <HAL_UART_IRQHandler+0x5da>
 8003b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 fd79 	bl	8004612 <UART_EndTransmit_IT>
    return;
 8003b20:	e026      	b.n	8003b70 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d009      	beq.n	8003b42 <HAL_UART_IRQHandler+0x5fa>
 8003b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b32:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 fda8 	bl	8004690 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b40:	e016      	b.n	8003b70 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d010      	beq.n	8003b70 <HAL_UART_IRQHandler+0x628>
 8003b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	da0c      	bge.n	8003b70 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fd90 	bl	800467c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b5c:	e008      	b.n	8003b70 <HAL_UART_IRQHandler+0x628>
      return;
 8003b5e:	bf00      	nop
 8003b60:	e006      	b.n	8003b70 <HAL_UART_IRQHandler+0x628>
    return;
 8003b62:	bf00      	nop
 8003b64:	e004      	b.n	8003b70 <HAL_UART_IRQHandler+0x628>
      return;
 8003b66:	bf00      	nop
 8003b68:	e002      	b.n	8003b70 <HAL_UART_IRQHandler+0x628>
      return;
 8003b6a:	bf00      	nop
 8003b6c:	e000      	b.n	8003b70 <HAL_UART_IRQHandler+0x628>
    return;
 8003b6e:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8003b70:	37e8      	adds	r7, #232	; 0xe8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop

08003b78 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	460b      	mov	r3, r1
 8003baa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bbc:	b08c      	sub	sp, #48	; 0x30
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	69db      	ldr	r3, [r3, #28]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	4baa      	ldr	r3, [pc, #680]	; (8003e90 <UART_SetConfig+0x2d8>)
 8003be8:	4013      	ands	r3, r2
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	6812      	ldr	r2, [r2, #0]
 8003bee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bf0:	430b      	orrs	r3, r1
 8003bf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a9f      	ldr	r2, [pc, #636]	; (8003e94 <UART_SetConfig+0x2dc>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d004      	beq.n	8003c24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c20:	4313      	orrs	r3, r2
 8003c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003c2e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	6812      	ldr	r2, [r2, #0]
 8003c36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c38:	430b      	orrs	r3, r1
 8003c3a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c42:	f023 010f 	bic.w	r1, r3, #15
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a90      	ldr	r2, [pc, #576]	; (8003e98 <UART_SetConfig+0x2e0>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d125      	bne.n	8003ca8 <UART_SetConfig+0xf0>
 8003c5c:	4b8f      	ldr	r3, [pc, #572]	; (8003e9c <UART_SetConfig+0x2e4>)
 8003c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	2b03      	cmp	r3, #3
 8003c68:	d81a      	bhi.n	8003ca0 <UART_SetConfig+0xe8>
 8003c6a:	a201      	add	r2, pc, #4	; (adr r2, 8003c70 <UART_SetConfig+0xb8>)
 8003c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c70:	08003c81 	.word	0x08003c81
 8003c74:	08003c91 	.word	0x08003c91
 8003c78:	08003c89 	.word	0x08003c89
 8003c7c:	08003c99 	.word	0x08003c99
 8003c80:	2301      	movs	r3, #1
 8003c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c86:	e116      	b.n	8003eb6 <UART_SetConfig+0x2fe>
 8003c88:	2302      	movs	r3, #2
 8003c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c8e:	e112      	b.n	8003eb6 <UART_SetConfig+0x2fe>
 8003c90:	2304      	movs	r3, #4
 8003c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c96:	e10e      	b.n	8003eb6 <UART_SetConfig+0x2fe>
 8003c98:	2308      	movs	r3, #8
 8003c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c9e:	e10a      	b.n	8003eb6 <UART_SetConfig+0x2fe>
 8003ca0:	2310      	movs	r3, #16
 8003ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ca6:	e106      	b.n	8003eb6 <UART_SetConfig+0x2fe>
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a7c      	ldr	r2, [pc, #496]	; (8003ea0 <UART_SetConfig+0x2e8>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d138      	bne.n	8003d24 <UART_SetConfig+0x16c>
 8003cb2:	4b7a      	ldr	r3, [pc, #488]	; (8003e9c <UART_SetConfig+0x2e4>)
 8003cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb8:	f003 030c 	and.w	r3, r3, #12
 8003cbc:	2b0c      	cmp	r3, #12
 8003cbe:	d82d      	bhi.n	8003d1c <UART_SetConfig+0x164>
 8003cc0:	a201      	add	r2, pc, #4	; (adr r2, 8003cc8 <UART_SetConfig+0x110>)
 8003cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc6:	bf00      	nop
 8003cc8:	08003cfd 	.word	0x08003cfd
 8003ccc:	08003d1d 	.word	0x08003d1d
 8003cd0:	08003d1d 	.word	0x08003d1d
 8003cd4:	08003d1d 	.word	0x08003d1d
 8003cd8:	08003d0d 	.word	0x08003d0d
 8003cdc:	08003d1d 	.word	0x08003d1d
 8003ce0:	08003d1d 	.word	0x08003d1d
 8003ce4:	08003d1d 	.word	0x08003d1d
 8003ce8:	08003d05 	.word	0x08003d05
 8003cec:	08003d1d 	.word	0x08003d1d
 8003cf0:	08003d1d 	.word	0x08003d1d
 8003cf4:	08003d1d 	.word	0x08003d1d
 8003cf8:	08003d15 	.word	0x08003d15
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d02:	e0d8      	b.n	8003eb6 <UART_SetConfig+0x2fe>
 8003d04:	2302      	movs	r3, #2
 8003d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d0a:	e0d4      	b.n	8003eb6 <UART_SetConfig+0x2fe>
 8003d0c:	2304      	movs	r3, #4
 8003d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d12:	e0d0      	b.n	8003eb6 <UART_SetConfig+0x2fe>
 8003d14:	2308      	movs	r3, #8
 8003d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d1a:	e0cc      	b.n	8003eb6 <UART_SetConfig+0x2fe>
 8003d1c:	2310      	movs	r3, #16
 8003d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d22:	e0c8      	b.n	8003eb6 <UART_SetConfig+0x2fe>
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a5e      	ldr	r2, [pc, #376]	; (8003ea4 <UART_SetConfig+0x2ec>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d125      	bne.n	8003d7a <UART_SetConfig+0x1c2>
 8003d2e:	4b5b      	ldr	r3, [pc, #364]	; (8003e9c <UART_SetConfig+0x2e4>)
 8003d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d34:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d38:	2b30      	cmp	r3, #48	; 0x30
 8003d3a:	d016      	beq.n	8003d6a <UART_SetConfig+0x1b2>
 8003d3c:	2b30      	cmp	r3, #48	; 0x30
 8003d3e:	d818      	bhi.n	8003d72 <UART_SetConfig+0x1ba>
 8003d40:	2b20      	cmp	r3, #32
 8003d42:	d00a      	beq.n	8003d5a <UART_SetConfig+0x1a2>
 8003d44:	2b20      	cmp	r3, #32
 8003d46:	d814      	bhi.n	8003d72 <UART_SetConfig+0x1ba>
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d002      	beq.n	8003d52 <UART_SetConfig+0x19a>
 8003d4c:	2b10      	cmp	r3, #16
 8003d4e:	d008      	beq.n	8003d62 <UART_SetConfig+0x1aa>
 8003d50:	e00f      	b.n	8003d72 <UART_SetConfig+0x1ba>
 8003d52:	2300      	movs	r3, #0
 8003d54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d58:	e0ad      	b.n	8003eb6 <UART_SetConfig+0x2fe>
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d60:	e0a9      	b.n	8003eb6 <UART_SetConfig+0x2fe>
 8003d62:	2304      	movs	r3, #4
 8003d64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d68:	e0a5      	b.n	8003eb6 <UART_SetConfig+0x2fe>
 8003d6a:	2308      	movs	r3, #8
 8003d6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d70:	e0a1      	b.n	8003eb6 <UART_SetConfig+0x2fe>
 8003d72:	2310      	movs	r3, #16
 8003d74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d78:	e09d      	b.n	8003eb6 <UART_SetConfig+0x2fe>
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a4a      	ldr	r2, [pc, #296]	; (8003ea8 <UART_SetConfig+0x2f0>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d125      	bne.n	8003dd0 <UART_SetConfig+0x218>
 8003d84:	4b45      	ldr	r3, [pc, #276]	; (8003e9c <UART_SetConfig+0x2e4>)
 8003d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d8e:	2bc0      	cmp	r3, #192	; 0xc0
 8003d90:	d016      	beq.n	8003dc0 <UART_SetConfig+0x208>
 8003d92:	2bc0      	cmp	r3, #192	; 0xc0
 8003d94:	d818      	bhi.n	8003dc8 <UART_SetConfig+0x210>
 8003d96:	2b80      	cmp	r3, #128	; 0x80
 8003d98:	d00a      	beq.n	8003db0 <UART_SetConfig+0x1f8>
 8003d9a:	2b80      	cmp	r3, #128	; 0x80
 8003d9c:	d814      	bhi.n	8003dc8 <UART_SetConfig+0x210>
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <UART_SetConfig+0x1f0>
 8003da2:	2b40      	cmp	r3, #64	; 0x40
 8003da4:	d008      	beq.n	8003db8 <UART_SetConfig+0x200>
 8003da6:	e00f      	b.n	8003dc8 <UART_SetConfig+0x210>
 8003da8:	2300      	movs	r3, #0
 8003daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dae:	e082      	b.n	8003eb6 <UART_SetConfig+0x2fe>
 8003db0:	2302      	movs	r3, #2
 8003db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003db6:	e07e      	b.n	8003eb6 <UART_SetConfig+0x2fe>
 8003db8:	2304      	movs	r3, #4
 8003dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dbe:	e07a      	b.n	8003eb6 <UART_SetConfig+0x2fe>
 8003dc0:	2308      	movs	r3, #8
 8003dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dc6:	e076      	b.n	8003eb6 <UART_SetConfig+0x2fe>
 8003dc8:	2310      	movs	r3, #16
 8003dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dce:	e072      	b.n	8003eb6 <UART_SetConfig+0x2fe>
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a35      	ldr	r2, [pc, #212]	; (8003eac <UART_SetConfig+0x2f4>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d12a      	bne.n	8003e30 <UART_SetConfig+0x278>
 8003dda:	4b30      	ldr	r3, [pc, #192]	; (8003e9c <UART_SetConfig+0x2e4>)
 8003ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003de4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003de8:	d01a      	beq.n	8003e20 <UART_SetConfig+0x268>
 8003dea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dee:	d81b      	bhi.n	8003e28 <UART_SetConfig+0x270>
 8003df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003df4:	d00c      	beq.n	8003e10 <UART_SetConfig+0x258>
 8003df6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dfa:	d815      	bhi.n	8003e28 <UART_SetConfig+0x270>
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <UART_SetConfig+0x250>
 8003e00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e04:	d008      	beq.n	8003e18 <UART_SetConfig+0x260>
 8003e06:	e00f      	b.n	8003e28 <UART_SetConfig+0x270>
 8003e08:	2300      	movs	r3, #0
 8003e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e0e:	e052      	b.n	8003eb6 <UART_SetConfig+0x2fe>
 8003e10:	2302      	movs	r3, #2
 8003e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e16:	e04e      	b.n	8003eb6 <UART_SetConfig+0x2fe>
 8003e18:	2304      	movs	r3, #4
 8003e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e1e:	e04a      	b.n	8003eb6 <UART_SetConfig+0x2fe>
 8003e20:	2308      	movs	r3, #8
 8003e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e26:	e046      	b.n	8003eb6 <UART_SetConfig+0x2fe>
 8003e28:	2310      	movs	r3, #16
 8003e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e2e:	e042      	b.n	8003eb6 <UART_SetConfig+0x2fe>
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a17      	ldr	r2, [pc, #92]	; (8003e94 <UART_SetConfig+0x2dc>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d13a      	bne.n	8003eb0 <UART_SetConfig+0x2f8>
 8003e3a:	4b18      	ldr	r3, [pc, #96]	; (8003e9c <UART_SetConfig+0x2e4>)
 8003e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e48:	d01a      	beq.n	8003e80 <UART_SetConfig+0x2c8>
 8003e4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e4e:	d81b      	bhi.n	8003e88 <UART_SetConfig+0x2d0>
 8003e50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e54:	d00c      	beq.n	8003e70 <UART_SetConfig+0x2b8>
 8003e56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e5a:	d815      	bhi.n	8003e88 <UART_SetConfig+0x2d0>
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <UART_SetConfig+0x2b0>
 8003e60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e64:	d008      	beq.n	8003e78 <UART_SetConfig+0x2c0>
 8003e66:	e00f      	b.n	8003e88 <UART_SetConfig+0x2d0>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e6e:	e022      	b.n	8003eb6 <UART_SetConfig+0x2fe>
 8003e70:	2302      	movs	r3, #2
 8003e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e76:	e01e      	b.n	8003eb6 <UART_SetConfig+0x2fe>
 8003e78:	2304      	movs	r3, #4
 8003e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e7e:	e01a      	b.n	8003eb6 <UART_SetConfig+0x2fe>
 8003e80:	2308      	movs	r3, #8
 8003e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e86:	e016      	b.n	8003eb6 <UART_SetConfig+0x2fe>
 8003e88:	2310      	movs	r3, #16
 8003e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e8e:	e012      	b.n	8003eb6 <UART_SetConfig+0x2fe>
 8003e90:	cfff69f3 	.word	0xcfff69f3
 8003e94:	40008000 	.word	0x40008000
 8003e98:	40013800 	.word	0x40013800
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	40004400 	.word	0x40004400
 8003ea4:	40004800 	.word	0x40004800
 8003ea8:	40004c00 	.word	0x40004c00
 8003eac:	40005000 	.word	0x40005000
 8003eb0:	2310      	movs	r3, #16
 8003eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4aae      	ldr	r2, [pc, #696]	; (8004174 <UART_SetConfig+0x5bc>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	f040 8097 	bne.w	8003ff0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ec2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ec6:	2b08      	cmp	r3, #8
 8003ec8:	d823      	bhi.n	8003f12 <UART_SetConfig+0x35a>
 8003eca:	a201      	add	r2, pc, #4	; (adr r2, 8003ed0 <UART_SetConfig+0x318>)
 8003ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed0:	08003ef5 	.word	0x08003ef5
 8003ed4:	08003f13 	.word	0x08003f13
 8003ed8:	08003efd 	.word	0x08003efd
 8003edc:	08003f13 	.word	0x08003f13
 8003ee0:	08003f03 	.word	0x08003f03
 8003ee4:	08003f13 	.word	0x08003f13
 8003ee8:	08003f13 	.word	0x08003f13
 8003eec:	08003f13 	.word	0x08003f13
 8003ef0:	08003f0b 	.word	0x08003f0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ef4:	f7fe f9d0 	bl	8002298 <HAL_RCC_GetPCLK1Freq>
 8003ef8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003efa:	e010      	b.n	8003f1e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003efc:	4b9e      	ldr	r3, [pc, #632]	; (8004178 <UART_SetConfig+0x5c0>)
 8003efe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f00:	e00d      	b.n	8003f1e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f02:	f7fe f931 	bl	8002168 <HAL_RCC_GetSysClockFreq>
 8003f06:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f08:	e009      	b.n	8003f1e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f10:	e005      	b.n	8003f1e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003f1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 8130 	beq.w	8004186 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	4a94      	ldr	r2, [pc, #592]	; (800417c <UART_SetConfig+0x5c4>)
 8003f2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f30:	461a      	mov	r2, r3
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	4413      	add	r3, r2
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d305      	bcc.n	8003f56 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d903      	bls.n	8003f5e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f5c:	e113      	b.n	8004186 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	2200      	movs	r2, #0
 8003f62:	60bb      	str	r3, [r7, #8]
 8003f64:	60fa      	str	r2, [r7, #12]
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	4a84      	ldr	r2, [pc, #528]	; (800417c <UART_SetConfig+0x5c4>)
 8003f6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	2200      	movs	r2, #0
 8003f74:	603b      	str	r3, [r7, #0]
 8003f76:	607a      	str	r2, [r7, #4]
 8003f78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f80:	f7fc f93e 	bl	8000200 <__aeabi_uldivmod>
 8003f84:	4602      	mov	r2, r0
 8003f86:	460b      	mov	r3, r1
 8003f88:	4610      	mov	r0, r2
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	f04f 0200 	mov.w	r2, #0
 8003f90:	f04f 0300 	mov.w	r3, #0
 8003f94:	020b      	lsls	r3, r1, #8
 8003f96:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003f9a:	0202      	lsls	r2, r0, #8
 8003f9c:	6979      	ldr	r1, [r7, #20]
 8003f9e:	6849      	ldr	r1, [r1, #4]
 8003fa0:	0849      	lsrs	r1, r1, #1
 8003fa2:	2000      	movs	r0, #0
 8003fa4:	460c      	mov	r4, r1
 8003fa6:	4605      	mov	r5, r0
 8003fa8:	eb12 0804 	adds.w	r8, r2, r4
 8003fac:	eb43 0905 	adc.w	r9, r3, r5
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	469a      	mov	sl, r3
 8003fb8:	4693      	mov	fp, r2
 8003fba:	4652      	mov	r2, sl
 8003fbc:	465b      	mov	r3, fp
 8003fbe:	4640      	mov	r0, r8
 8003fc0:	4649      	mov	r1, r9
 8003fc2:	f7fc f91d 	bl	8000200 <__aeabi_uldivmod>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	460b      	mov	r3, r1
 8003fca:	4613      	mov	r3, r2
 8003fcc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003fce:	6a3b      	ldr	r3, [r7, #32]
 8003fd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fd4:	d308      	bcc.n	8003fe8 <UART_SetConfig+0x430>
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fdc:	d204      	bcs.n	8003fe8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6a3a      	ldr	r2, [r7, #32]
 8003fe4:	60da      	str	r2, [r3, #12]
 8003fe6:	e0ce      	b.n	8004186 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003fee:	e0ca      	b.n	8004186 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ff8:	d166      	bne.n	80040c8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003ffa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d827      	bhi.n	8004052 <UART_SetConfig+0x49a>
 8004002:	a201      	add	r2, pc, #4	; (adr r2, 8004008 <UART_SetConfig+0x450>)
 8004004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004008:	0800402d 	.word	0x0800402d
 800400c:	08004035 	.word	0x08004035
 8004010:	0800403d 	.word	0x0800403d
 8004014:	08004053 	.word	0x08004053
 8004018:	08004043 	.word	0x08004043
 800401c:	08004053 	.word	0x08004053
 8004020:	08004053 	.word	0x08004053
 8004024:	08004053 	.word	0x08004053
 8004028:	0800404b 	.word	0x0800404b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800402c:	f7fe f934 	bl	8002298 <HAL_RCC_GetPCLK1Freq>
 8004030:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004032:	e014      	b.n	800405e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004034:	f7fe f946 	bl	80022c4 <HAL_RCC_GetPCLK2Freq>
 8004038:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800403a:	e010      	b.n	800405e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800403c:	4b4e      	ldr	r3, [pc, #312]	; (8004178 <UART_SetConfig+0x5c0>)
 800403e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004040:	e00d      	b.n	800405e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004042:	f7fe f891 	bl	8002168 <HAL_RCC_GetSysClockFreq>
 8004046:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004048:	e009      	b.n	800405e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800404a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800404e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004050:	e005      	b.n	800405e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004052:	2300      	movs	r3, #0
 8004054:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800405c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 8090 	beq.w	8004186 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	4a44      	ldr	r2, [pc, #272]	; (800417c <UART_SetConfig+0x5c4>)
 800406c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004070:	461a      	mov	r2, r3
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	fbb3 f3f2 	udiv	r3, r3, r2
 8004078:	005a      	lsls	r2, r3, #1
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	085b      	lsrs	r3, r3, #1
 8004080:	441a      	add	r2, r3
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	fbb2 f3f3 	udiv	r3, r2, r3
 800408a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800408c:	6a3b      	ldr	r3, [r7, #32]
 800408e:	2b0f      	cmp	r3, #15
 8004090:	d916      	bls.n	80040c0 <UART_SetConfig+0x508>
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004098:	d212      	bcs.n	80040c0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	b29b      	uxth	r3, r3
 800409e:	f023 030f 	bic.w	r3, r3, #15
 80040a2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040a4:	6a3b      	ldr	r3, [r7, #32]
 80040a6:	085b      	lsrs	r3, r3, #1
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	f003 0307 	and.w	r3, r3, #7
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	8bfb      	ldrh	r3, [r7, #30]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	8bfa      	ldrh	r2, [r7, #30]
 80040bc:	60da      	str	r2, [r3, #12]
 80040be:	e062      	b.n	8004186 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80040c6:	e05e      	b.n	8004186 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80040cc:	2b08      	cmp	r3, #8
 80040ce:	d828      	bhi.n	8004122 <UART_SetConfig+0x56a>
 80040d0:	a201      	add	r2, pc, #4	; (adr r2, 80040d8 <UART_SetConfig+0x520>)
 80040d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d6:	bf00      	nop
 80040d8:	080040fd 	.word	0x080040fd
 80040dc:	08004105 	.word	0x08004105
 80040e0:	0800410d 	.word	0x0800410d
 80040e4:	08004123 	.word	0x08004123
 80040e8:	08004113 	.word	0x08004113
 80040ec:	08004123 	.word	0x08004123
 80040f0:	08004123 	.word	0x08004123
 80040f4:	08004123 	.word	0x08004123
 80040f8:	0800411b 	.word	0x0800411b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040fc:	f7fe f8cc 	bl	8002298 <HAL_RCC_GetPCLK1Freq>
 8004100:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004102:	e014      	b.n	800412e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004104:	f7fe f8de 	bl	80022c4 <HAL_RCC_GetPCLK2Freq>
 8004108:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800410a:	e010      	b.n	800412e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800410c:	4b1a      	ldr	r3, [pc, #104]	; (8004178 <UART_SetConfig+0x5c0>)
 800410e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004110:	e00d      	b.n	800412e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004112:	f7fe f829 	bl	8002168 <HAL_RCC_GetSysClockFreq>
 8004116:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004118:	e009      	b.n	800412e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800411a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800411e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004120:	e005      	b.n	800412e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004122:	2300      	movs	r3, #0
 8004124:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800412c:	bf00      	nop
    }

    if (pclk != 0U)
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	2b00      	cmp	r3, #0
 8004132:	d028      	beq.n	8004186 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	4a10      	ldr	r2, [pc, #64]	; (800417c <UART_SetConfig+0x5c4>)
 800413a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800413e:	461a      	mov	r2, r3
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	fbb3 f2f2 	udiv	r2, r3, r2
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	085b      	lsrs	r3, r3, #1
 800414c:	441a      	add	r2, r3
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	fbb2 f3f3 	udiv	r3, r2, r3
 8004156:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	2b0f      	cmp	r3, #15
 800415c:	d910      	bls.n	8004180 <UART_SetConfig+0x5c8>
 800415e:	6a3b      	ldr	r3, [r7, #32]
 8004160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004164:	d20c      	bcs.n	8004180 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	b29a      	uxth	r2, r3
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	60da      	str	r2, [r3, #12]
 8004170:	e009      	b.n	8004186 <UART_SetConfig+0x5ce>
 8004172:	bf00      	nop
 8004174:	40008000 	.word	0x40008000
 8004178:	00f42400 	.word	0x00f42400
 800417c:	08007670 	.word	0x08007670
      }
      else
      {
        ret = HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	2201      	movs	r2, #1
 800418a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	2201      	movs	r2, #1
 8004192:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2200      	movs	r2, #0
 800419a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	2200      	movs	r2, #0
 80041a0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80041a2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3730      	adds	r7, #48	; 0x30
 80041aa:	46bd      	mov	sp, r7
 80041ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080041b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00a      	beq.n	80041da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00a      	beq.n	80041fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00a      	beq.n	800421e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004222:	f003 0308 	and.w	r3, r3, #8
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00a      	beq.n	8004240 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004244:	f003 0310 	and.w	r3, r3, #16
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00a      	beq.n	8004262 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	f003 0320 	and.w	r3, r3, #32
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00a      	beq.n	8004284 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428c:	2b00      	cmp	r3, #0
 800428e:	d01a      	beq.n	80042c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042ae:	d10a      	bne.n	80042c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00a      	beq.n	80042e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	605a      	str	r2, [r3, #4]
  }
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af02      	add	r7, sp, #8
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004304:	f7fc fda0 	bl	8000e48 <HAL_GetTick>
 8004308:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0308 	and.w	r3, r3, #8
 8004314:	2b08      	cmp	r3, #8
 8004316:	d10e      	bne.n	8004336 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004318:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f82f 	bl	800438a <UART_WaitOnFlagUntilTimeout>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e025      	b.n	8004382 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b04      	cmp	r3, #4
 8004342:	d10e      	bne.n	8004362 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004344:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f819 	bl	800438a <UART_WaitOnFlagUntilTimeout>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e00f      	b.n	8004382 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2220      	movs	r2, #32
 8004366:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2220      	movs	r2, #32
 800436e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b09c      	sub	sp, #112	; 0x70
 800438e:	af00      	add	r7, sp, #0
 8004390:	60f8      	str	r0, [r7, #12]
 8004392:	60b9      	str	r1, [r7, #8]
 8004394:	603b      	str	r3, [r7, #0]
 8004396:	4613      	mov	r3, r2
 8004398:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800439a:	e0a9      	b.n	80044f0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800439c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800439e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a2:	f000 80a5 	beq.w	80044f0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043a6:	f7fc fd4f 	bl	8000e48 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d302      	bcc.n	80043bc <UART_WaitOnFlagUntilTimeout+0x32>
 80043b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d140      	bne.n	800443e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043c4:	e853 3f00 	ldrex	r3, [r3]
 80043c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80043ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043d0:	667b      	str	r3, [r7, #100]	; 0x64
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	461a      	mov	r2, r3
 80043d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043dc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80043e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80043e2:	e841 2300 	strex	r3, r2, [r1]
 80043e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80043e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1e6      	bne.n	80043bc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	3308      	adds	r3, #8
 80043f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043f8:	e853 3f00 	ldrex	r3, [r3]
 80043fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004400:	f023 0301 	bic.w	r3, r3, #1
 8004404:	663b      	str	r3, [r7, #96]	; 0x60
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	3308      	adds	r3, #8
 800440c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800440e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004410:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004412:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004414:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004416:	e841 2300 	strex	r3, r2, [r1]
 800441a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800441c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1e5      	bne.n	80043ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2220      	movs	r2, #32
 8004426:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2220      	movs	r2, #32
 800442e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e069      	b.n	8004512 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b00      	cmp	r3, #0
 800444a:	d051      	beq.n	80044f0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004456:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800445a:	d149      	bne.n	80044f0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004464:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446e:	e853 3f00 	ldrex	r3, [r3]
 8004472:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800447a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	461a      	mov	r2, r3
 8004482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004484:	637b      	str	r3, [r7, #52]	; 0x34
 8004486:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004488:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800448a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800448c:	e841 2300 	strex	r3, r2, [r1]
 8004490:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1e6      	bne.n	8004466 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3308      	adds	r3, #8
 800449e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	e853 3f00 	ldrex	r3, [r3]
 80044a6:	613b      	str	r3, [r7, #16]
   return(result);
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	f023 0301 	bic.w	r3, r3, #1
 80044ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3308      	adds	r3, #8
 80044b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80044b8:	623a      	str	r2, [r7, #32]
 80044ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044bc:	69f9      	ldr	r1, [r7, #28]
 80044be:	6a3a      	ldr	r2, [r7, #32]
 80044c0:	e841 2300 	strex	r3, r2, [r1]
 80044c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1e5      	bne.n	8004498 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2220      	movs	r2, #32
 80044d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2220      	movs	r2, #32
 80044e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e010      	b.n	8004512 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	69da      	ldr	r2, [r3, #28]
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	4013      	ands	r3, r2
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	bf0c      	ite	eq
 8004500:	2301      	moveq	r3, #1
 8004502:	2300      	movne	r3, #0
 8004504:	b2db      	uxtb	r3, r3
 8004506:	461a      	mov	r2, r3
 8004508:	79fb      	ldrb	r3, [r7, #7]
 800450a:	429a      	cmp	r2, r3
 800450c:	f43f af46 	beq.w	800439c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3770      	adds	r7, #112	; 0x70
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800451a:	b480      	push	{r7}
 800451c:	b095      	sub	sp, #84	; 0x54
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800452a:	e853 3f00 	ldrex	r3, [r3]
 800452e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004532:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004536:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	461a      	mov	r2, r3
 800453e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004540:	643b      	str	r3, [r7, #64]	; 0x40
 8004542:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004544:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004546:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004548:	e841 2300 	strex	r3, r2, [r1]
 800454c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800454e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1e6      	bne.n	8004522 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3308      	adds	r3, #8
 800455a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	e853 3f00 	ldrex	r3, [r3]
 8004562:	61fb      	str	r3, [r7, #28]
   return(result);
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800456a:	f023 0301 	bic.w	r3, r3, #1
 800456e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3308      	adds	r3, #8
 8004576:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004578:	62fa      	str	r2, [r7, #44]	; 0x2c
 800457a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800457e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004580:	e841 2300 	strex	r3, r2, [r1]
 8004584:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1e3      	bne.n	8004554 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004590:	2b01      	cmp	r3, #1
 8004592:	d118      	bne.n	80045c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	e853 3f00 	ldrex	r3, [r3]
 80045a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	f023 0310 	bic.w	r3, r3, #16
 80045a8:	647b      	str	r3, [r7, #68]	; 0x44
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045b2:	61bb      	str	r3, [r7, #24]
 80045b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b6:	6979      	ldr	r1, [r7, #20]
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	e841 2300 	strex	r3, r2, [r1]
 80045be:	613b      	str	r3, [r7, #16]
   return(result);
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1e6      	bne.n	8004594 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2220      	movs	r2, #32
 80045ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	671a      	str	r2, [r3, #112]	; 0x70
}
 80045da:	bf00      	nop
 80045dc:	3754      	adds	r7, #84	; 0x54
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b084      	sub	sp, #16
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f7ff fac1 	bl	8003b8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800460a:	bf00      	nop
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b088      	sub	sp, #32
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	e853 3f00 	ldrex	r3, [r3]
 8004626:	60bb      	str	r3, [r7, #8]
   return(result);
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800462e:	61fb      	str	r3, [r7, #28]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	461a      	mov	r2, r3
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	61bb      	str	r3, [r7, #24]
 800463a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463c:	6979      	ldr	r1, [r7, #20]
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	e841 2300 	strex	r3, r2, [r1]
 8004644:	613b      	str	r3, [r7, #16]
   return(result);
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1e6      	bne.n	800461a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2220      	movs	r2, #32
 8004650:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7ff fa8c 	bl	8003b78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004660:	bf00      	nop
 8004662:	3720      	adds	r7, #32
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d101      	bne.n	80046ba <HAL_UARTEx_DisableFifoMode+0x16>
 80046b6:	2302      	movs	r3, #2
 80046b8:	e027      	b.n	800470a <HAL_UARTEx_DisableFifoMode+0x66>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2224      	movs	r2, #36	; 0x24
 80046c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 0201 	bic.w	r2, r2, #1
 80046e0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80046e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2220      	movs	r2, #32
 80046fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b084      	sub	sp, #16
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
 800471e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004726:	2b01      	cmp	r3, #1
 8004728:	d101      	bne.n	800472e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800472a:	2302      	movs	r3, #2
 800472c:	e02d      	b.n	800478a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2224      	movs	r2, #36	; 0x24
 800473a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 0201 	bic.w	r2, r2, #1
 8004754:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f850 	bl	8004810 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2220      	movs	r2, #32
 800477c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b084      	sub	sp, #16
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
 800479a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d101      	bne.n	80047aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80047a6:	2302      	movs	r3, #2
 80047a8:	e02d      	b.n	8004806 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2224      	movs	r2, #36	; 0x24
 80047b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 0201 	bic.w	r2, r2, #1
 80047d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f812 	bl	8004810 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2220      	movs	r2, #32
 80047f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
	...

08004810 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800481c:	2b00      	cmp	r3, #0
 800481e:	d108      	bne.n	8004832 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004830:	e031      	b.n	8004896 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004832:	2308      	movs	r3, #8
 8004834:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004836:	2308      	movs	r3, #8
 8004838:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	0e5b      	lsrs	r3, r3, #25
 8004842:	b2db      	uxtb	r3, r3
 8004844:	f003 0307 	and.w	r3, r3, #7
 8004848:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	0f5b      	lsrs	r3, r3, #29
 8004852:	b2db      	uxtb	r3, r3
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800485a:	7bbb      	ldrb	r3, [r7, #14]
 800485c:	7b3a      	ldrb	r2, [r7, #12]
 800485e:	4911      	ldr	r1, [pc, #68]	; (80048a4 <UARTEx_SetNbDataToProcess+0x94>)
 8004860:	5c8a      	ldrb	r2, [r1, r2]
 8004862:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004866:	7b3a      	ldrb	r2, [r7, #12]
 8004868:	490f      	ldr	r1, [pc, #60]	; (80048a8 <UARTEx_SetNbDataToProcess+0x98>)
 800486a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800486c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004870:	b29a      	uxth	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004878:	7bfb      	ldrb	r3, [r7, #15]
 800487a:	7b7a      	ldrb	r2, [r7, #13]
 800487c:	4909      	ldr	r1, [pc, #36]	; (80048a4 <UARTEx_SetNbDataToProcess+0x94>)
 800487e:	5c8a      	ldrb	r2, [r1, r2]
 8004880:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004884:	7b7a      	ldrb	r2, [r7, #13]
 8004886:	4908      	ldr	r1, [pc, #32]	; (80048a8 <UARTEx_SetNbDataToProcess+0x98>)
 8004888:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800488a:	fb93 f3f2 	sdiv	r3, r3, r2
 800488e:	b29a      	uxth	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004896:	bf00      	nop
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	08007688 	.word	0x08007688
 80048a8:	08007690 	.word	0x08007690

080048ac <__NVIC_SetPriority>:
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	4603      	mov	r3, r0
 80048b4:	6039      	str	r1, [r7, #0]
 80048b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	db0a      	blt.n	80048d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	490c      	ldr	r1, [pc, #48]	; (80048f8 <__NVIC_SetPriority+0x4c>)
 80048c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ca:	0112      	lsls	r2, r2, #4
 80048cc:	b2d2      	uxtb	r2, r2
 80048ce:	440b      	add	r3, r1
 80048d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80048d4:	e00a      	b.n	80048ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	4908      	ldr	r1, [pc, #32]	; (80048fc <__NVIC_SetPriority+0x50>)
 80048dc:	79fb      	ldrb	r3, [r7, #7]
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	3b04      	subs	r3, #4
 80048e4:	0112      	lsls	r2, r2, #4
 80048e6:	b2d2      	uxtb	r2, r2
 80048e8:	440b      	add	r3, r1
 80048ea:	761a      	strb	r2, [r3, #24]
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	e000e100 	.word	0xe000e100
 80048fc:	e000ed00 	.word	0xe000ed00

08004900 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004904:	4b05      	ldr	r3, [pc, #20]	; (800491c <SysTick_Handler+0x1c>)
 8004906:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004908:	f001 fdaa 	bl	8006460 <xTaskGetSchedulerState>
 800490c:	4603      	mov	r3, r0
 800490e:	2b01      	cmp	r3, #1
 8004910:	d001      	beq.n	8004916 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004912:	f002 fb91 	bl	8007038 <xPortSysTickHandler>
  }
}
 8004916:	bf00      	nop
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	e000e010 	.word	0xe000e010

08004920 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004924:	2100      	movs	r1, #0
 8004926:	f06f 0004 	mvn.w	r0, #4
 800492a:	f7ff ffbf 	bl	80048ac <__NVIC_SetPriority>
#endif
}
 800492e:	bf00      	nop
 8004930:	bd80      	pop	{r7, pc}
	...

08004934 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800493a:	f3ef 8305 	mrs	r3, IPSR
 800493e:	603b      	str	r3, [r7, #0]
  return(result);
 8004940:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004946:	f06f 0305 	mvn.w	r3, #5
 800494a:	607b      	str	r3, [r7, #4]
 800494c:	e00c      	b.n	8004968 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800494e:	4b0a      	ldr	r3, [pc, #40]	; (8004978 <osKernelInitialize+0x44>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d105      	bne.n	8004962 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004956:	4b08      	ldr	r3, [pc, #32]	; (8004978 <osKernelInitialize+0x44>)
 8004958:	2201      	movs	r2, #1
 800495a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800495c:	2300      	movs	r3, #0
 800495e:	607b      	str	r3, [r7, #4]
 8004960:	e002      	b.n	8004968 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004962:	f04f 33ff 	mov.w	r3, #4294967295
 8004966:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004968:	687b      	ldr	r3, [r7, #4]
}
 800496a:	4618      	mov	r0, r3
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	20000114 	.word	0x20000114

0800497c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004982:	f3ef 8305 	mrs	r3, IPSR
 8004986:	603b      	str	r3, [r7, #0]
  return(result);
 8004988:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <osKernelStart+0x1a>
    stat = osErrorISR;
 800498e:	f06f 0305 	mvn.w	r3, #5
 8004992:	607b      	str	r3, [r7, #4]
 8004994:	e010      	b.n	80049b8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004996:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <osKernelStart+0x48>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d109      	bne.n	80049b2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800499e:	f7ff ffbf 	bl	8004920 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80049a2:	4b08      	ldr	r3, [pc, #32]	; (80049c4 <osKernelStart+0x48>)
 80049a4:	2202      	movs	r2, #2
 80049a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80049a8:	f001 f912 	bl	8005bd0 <vTaskStartScheduler>
      stat = osOK;
 80049ac:	2300      	movs	r3, #0
 80049ae:	607b      	str	r3, [r7, #4]
 80049b0:	e002      	b.n	80049b8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80049b2:	f04f 33ff 	mov.w	r3, #4294967295
 80049b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80049b8:	687b      	ldr	r3, [r7, #4]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	20000114 	.word	0x20000114

080049c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b08e      	sub	sp, #56	; 0x38
 80049cc:	af04      	add	r7, sp, #16
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80049d4:	2300      	movs	r3, #0
 80049d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049d8:	f3ef 8305 	mrs	r3, IPSR
 80049dc:	617b      	str	r3, [r7, #20]
  return(result);
 80049de:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d17e      	bne.n	8004ae2 <osThreadNew+0x11a>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d07b      	beq.n	8004ae2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80049ea:	2380      	movs	r3, #128	; 0x80
 80049ec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80049ee:	2318      	movs	r3, #24
 80049f0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80049f2:	2300      	movs	r3, #0
 80049f4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80049f6:	f04f 33ff 	mov.w	r3, #4294967295
 80049fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d045      	beq.n	8004a8e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <osThreadNew+0x48>
        name = attr->name;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d002      	beq.n	8004a1e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d008      	beq.n	8004a36 <osThreadNew+0x6e>
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	2b38      	cmp	r3, #56	; 0x38
 8004a28:	d805      	bhi.n	8004a36 <osThreadNew+0x6e>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <osThreadNew+0x72>
        return (NULL);
 8004a36:	2300      	movs	r3, #0
 8004a38:	e054      	b.n	8004ae4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d003      	beq.n	8004a4a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	089b      	lsrs	r3, r3, #2
 8004a48:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00e      	beq.n	8004a70 <osThreadNew+0xa8>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	2b5b      	cmp	r3, #91	; 0x5b
 8004a58:	d90a      	bls.n	8004a70 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d006      	beq.n	8004a70 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d002      	beq.n	8004a70 <osThreadNew+0xa8>
        mem = 1;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	61bb      	str	r3, [r7, #24]
 8004a6e:	e010      	b.n	8004a92 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10c      	bne.n	8004a92 <osThreadNew+0xca>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d108      	bne.n	8004a92 <osThreadNew+0xca>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d104      	bne.n	8004a92 <osThreadNew+0xca>
          mem = 0;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	61bb      	str	r3, [r7, #24]
 8004a8c:	e001      	b.n	8004a92 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d110      	bne.n	8004aba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004aa0:	9202      	str	r2, [sp, #8]
 8004aa2:	9301      	str	r3, [sp, #4]
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	9300      	str	r3, [sp, #0]
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	6a3a      	ldr	r2, [r7, #32]
 8004aac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f000 feb8 	bl	8005824 <xTaskCreateStatic>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	613b      	str	r3, [r7, #16]
 8004ab8:	e013      	b.n	8004ae2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d110      	bne.n	8004ae2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	f107 0310 	add.w	r3, r7, #16
 8004ac8:	9301      	str	r3, [sp, #4]
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f000 ff03 	bl	80058de <xTaskCreate>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d001      	beq.n	8004ae2 <osThreadNew+0x11a>
            hTask = NULL;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004ae2:	693b      	ldr	r3, [r7, #16]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3728      	adds	r7, #40	; 0x28
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004af4:	f3ef 8305 	mrs	r3, IPSR
 8004af8:	60bb      	str	r3, [r7, #8]
  return(result);
 8004afa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d003      	beq.n	8004b08 <osDelay+0x1c>
    stat = osErrorISR;
 8004b00:	f06f 0305 	mvn.w	r3, #5
 8004b04:	60fb      	str	r3, [r7, #12]
 8004b06:	e007      	b.n	8004b18 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f001 f828 	bl	8005b68 <vTaskDelay>
    }
  }

  return (stat);
 8004b18:	68fb      	ldr	r3, [r7, #12]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b08a      	sub	sp, #40	; 0x28
 8004b26:	af02      	add	r7, sp, #8
 8004b28:	60f8      	str	r0, [r7, #12]
 8004b2a:	60b9      	str	r1, [r7, #8]
 8004b2c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b32:	f3ef 8305 	mrs	r3, IPSR
 8004b36:	613b      	str	r3, [r7, #16]
  return(result);
 8004b38:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d15f      	bne.n	8004bfe <osMessageQueueNew+0xdc>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d05c      	beq.n	8004bfe <osMessageQueueNew+0xdc>
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d059      	beq.n	8004bfe <osMessageQueueNew+0xdc>
    mem = -1;
 8004b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b4e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d029      	beq.n	8004baa <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d012      	beq.n	8004b84 <osMessageQueueNew+0x62>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	2b4f      	cmp	r3, #79	; 0x4f
 8004b64:	d90e      	bls.n	8004b84 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00a      	beq.n	8004b84 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	695a      	ldr	r2, [r3, #20]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	68b9      	ldr	r1, [r7, #8]
 8004b76:	fb01 f303 	mul.w	r3, r1, r3
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d302      	bcc.n	8004b84 <osMessageQueueNew+0x62>
        mem = 1;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	61bb      	str	r3, [r7, #24]
 8004b82:	e014      	b.n	8004bae <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d110      	bne.n	8004bae <osMessageQueueNew+0x8c>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10c      	bne.n	8004bae <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d108      	bne.n	8004bae <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d104      	bne.n	8004bae <osMessageQueueNew+0x8c>
          mem = 0;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	61bb      	str	r3, [r7, #24]
 8004ba8:	e001      	b.n	8004bae <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004baa:	2300      	movs	r3, #0
 8004bac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d10b      	bne.n	8004bcc <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	691a      	ldr	r2, [r3, #16]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	9100      	str	r1, [sp, #0]
 8004bc0:	68b9      	ldr	r1, [r7, #8]
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f000 f970 	bl	8004ea8 <xQueueGenericCreateStatic>
 8004bc8:	61f8      	str	r0, [r7, #28]
 8004bca:	e008      	b.n	8004bde <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d105      	bne.n	8004bde <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	68b9      	ldr	r1, [r7, #8]
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f000 f9de 	bl	8004f98 <xQueueGenericCreate>
 8004bdc:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00c      	beq.n	8004bfe <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <osMessageQueueNew+0xd0>
        name = attr->name;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	e001      	b.n	8004bf6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004bf6:	6979      	ldr	r1, [r7, #20]
 8004bf8:	69f8      	ldr	r0, [r7, #28]
 8004bfa:	f000 fdb5 	bl	8005768 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004bfe:	69fb      	ldr	r3, [r7, #28]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3720      	adds	r7, #32
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4a07      	ldr	r2, [pc, #28]	; (8004c34 <vApplicationGetIdleTaskMemory+0x2c>)
 8004c18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	4a06      	ldr	r2, [pc, #24]	; (8004c38 <vApplicationGetIdleTaskMemory+0x30>)
 8004c1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2280      	movs	r2, #128	; 0x80
 8004c24:	601a      	str	r2, [r3, #0]
}
 8004c26:	bf00      	nop
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	20000118 	.word	0x20000118
 8004c38:	20000174 	.word	0x20000174

08004c3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4a07      	ldr	r2, [pc, #28]	; (8004c68 <vApplicationGetTimerTaskMemory+0x2c>)
 8004c4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	4a06      	ldr	r2, [pc, #24]	; (8004c6c <vApplicationGetTimerTaskMemory+0x30>)
 8004c52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c5a:	601a      	str	r2, [r3, #0]
}
 8004c5c:	bf00      	nop
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	20000374 	.word	0x20000374
 8004c6c:	200003d0 	.word	0x200003d0

08004c70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f103 0208 	add.w	r2, r3, #8
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f04f 32ff 	mov.w	r2, #4294967295
 8004c88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f103 0208 	add.w	r2, r3, #8
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f103 0208 	add.w	r2, r3, #8
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004cbe:	bf00      	nop
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b085      	sub	sp, #20
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	1c5a      	adds	r2, r3, #1
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	601a      	str	r2, [r3, #0]
}
 8004d06:	bf00      	nop
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d12:	b480      	push	{r7}
 8004d14:	b085      	sub	sp, #20
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d28:	d103      	bne.n	8004d32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	60fb      	str	r3, [r7, #12]
 8004d30:	e00c      	b.n	8004d4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	3308      	adds	r3, #8
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	e002      	b.n	8004d40 <vListInsert+0x2e>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d2f6      	bcs.n	8004d3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	683a      	ldr	r2, [r7, #0]
 8004d66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	601a      	str	r2, [r3, #0]
}
 8004d78:	bf00      	nop
 8004d7a:	3714      	adds	r7, #20
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6892      	ldr	r2, [r2, #8]
 8004d9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6852      	ldr	r2, [r2, #4]
 8004da4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d103      	bne.n	8004db8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689a      	ldr	r2, [r3, #8]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	1e5a      	subs	r2, r3, #1
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10a      	bne.n	8004e02 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df0:	f383 8811 	msr	BASEPRI, r3
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004dfe:	bf00      	nop
 8004e00:	e7fe      	b.n	8004e00 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004e02:	f002 f887 	bl	8006f14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e0e:	68f9      	ldr	r1, [r7, #12]
 8004e10:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e12:	fb01 f303 	mul.w	r3, r1, r3
 8004e16:	441a      	add	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e32:	3b01      	subs	r3, #1
 8004e34:	68f9      	ldr	r1, [r7, #12]
 8004e36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e38:	fb01 f303 	mul.w	r3, r1, r3
 8004e3c:	441a      	add	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	22ff      	movs	r2, #255	; 0xff
 8004e46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	22ff      	movs	r2, #255	; 0xff
 8004e4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d114      	bne.n	8004e82 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d01a      	beq.n	8004e96 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	3310      	adds	r3, #16
 8004e64:	4618      	mov	r0, r3
 8004e66:	f001 f93d 	bl	80060e4 <xTaskRemoveFromEventList>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d012      	beq.n	8004e96 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004e70:	4b0c      	ldr	r3, [pc, #48]	; (8004ea4 <xQueueGenericReset+0xcc>)
 8004e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	e009      	b.n	8004e96 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	3310      	adds	r3, #16
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7ff fef2 	bl	8004c70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	3324      	adds	r3, #36	; 0x24
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7ff feed 	bl	8004c70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004e96:	f002 f86d 	bl	8006f74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004e9a:	2301      	movs	r3, #1
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	e000ed04 	.word	0xe000ed04

08004ea8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b08e      	sub	sp, #56	; 0x38
 8004eac:	af02      	add	r7, sp, #8
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
 8004eb4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10a      	bne.n	8004ed2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec0:	f383 8811 	msr	BASEPRI, r3
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004ece:	bf00      	nop
 8004ed0:	e7fe      	b.n	8004ed0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10a      	bne.n	8004eee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004edc:	f383 8811 	msr	BASEPRI, r3
 8004ee0:	f3bf 8f6f 	isb	sy
 8004ee4:	f3bf 8f4f 	dsb	sy
 8004ee8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004eea:	bf00      	nop
 8004eec:	e7fe      	b.n	8004eec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d002      	beq.n	8004efa <xQueueGenericCreateStatic+0x52>
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <xQueueGenericCreateStatic+0x56>
 8004efa:	2301      	movs	r3, #1
 8004efc:	e000      	b.n	8004f00 <xQueueGenericCreateStatic+0x58>
 8004efe:	2300      	movs	r3, #0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10a      	bne.n	8004f1a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f08:	f383 8811 	msr	BASEPRI, r3
 8004f0c:	f3bf 8f6f 	isb	sy
 8004f10:	f3bf 8f4f 	dsb	sy
 8004f14:	623b      	str	r3, [r7, #32]
}
 8004f16:	bf00      	nop
 8004f18:	e7fe      	b.n	8004f18 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d102      	bne.n	8004f26 <xQueueGenericCreateStatic+0x7e>
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <xQueueGenericCreateStatic+0x82>
 8004f26:	2301      	movs	r3, #1
 8004f28:	e000      	b.n	8004f2c <xQueueGenericCreateStatic+0x84>
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10a      	bne.n	8004f46 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f34:	f383 8811 	msr	BASEPRI, r3
 8004f38:	f3bf 8f6f 	isb	sy
 8004f3c:	f3bf 8f4f 	dsb	sy
 8004f40:	61fb      	str	r3, [r7, #28]
}
 8004f42:	bf00      	nop
 8004f44:	e7fe      	b.n	8004f44 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004f46:	2350      	movs	r3, #80	; 0x50
 8004f48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2b50      	cmp	r3, #80	; 0x50
 8004f4e:	d00a      	beq.n	8004f66 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	61bb      	str	r3, [r7, #24]
}
 8004f62:	bf00      	nop
 8004f64:	e7fe      	b.n	8004f64 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004f66:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00d      	beq.n	8004f8e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f7a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	4613      	mov	r3, r2
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	68b9      	ldr	r1, [r7, #8]
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 f83f 	bl	800500c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3730      	adds	r7, #48	; 0x30
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b08a      	sub	sp, #40	; 0x28
 8004f9c:	af02      	add	r7, sp, #8
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10a      	bne.n	8004fc2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb0:	f383 8811 	msr	BASEPRI, r3
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	613b      	str	r3, [r7, #16]
}
 8004fbe:	bf00      	nop
 8004fc0:	e7fe      	b.n	8004fc0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	fb02 f303 	mul.w	r3, r2, r3
 8004fca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	3350      	adds	r3, #80	; 0x50
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f002 f8c1 	bl	8007158 <pvPortMalloc>
 8004fd6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d011      	beq.n	8005002 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	3350      	adds	r3, #80	; 0x50
 8004fe6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ff0:	79fa      	ldrb	r2, [r7, #7]
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	68b9      	ldr	r1, [r7, #8]
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 f805 	bl	800500c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005002:	69bb      	ldr	r3, [r7, #24]
	}
 8005004:	4618      	mov	r0, r3
 8005006:	3720      	adds	r7, #32
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
 8005018:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d103      	bne.n	8005028 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	69ba      	ldr	r2, [r7, #24]
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	e002      	b.n	800502e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800503a:	2101      	movs	r1, #1
 800503c:	69b8      	ldr	r0, [r7, #24]
 800503e:	f7ff fecb 	bl	8004dd8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	78fa      	ldrb	r2, [r7, #3]
 8005046:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800504a:	bf00      	nop
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
	...

08005054 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b08e      	sub	sp, #56	; 0x38
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
 8005060:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005062:	2300      	movs	r3, #0
 8005064:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800506a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10a      	bne.n	8005086 <xQueueGenericSend+0x32>
	__asm volatile
 8005070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005074:	f383 8811 	msr	BASEPRI, r3
 8005078:	f3bf 8f6f 	isb	sy
 800507c:	f3bf 8f4f 	dsb	sy
 8005080:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005082:	bf00      	nop
 8005084:	e7fe      	b.n	8005084 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d103      	bne.n	8005094 <xQueueGenericSend+0x40>
 800508c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <xQueueGenericSend+0x44>
 8005094:	2301      	movs	r3, #1
 8005096:	e000      	b.n	800509a <xQueueGenericSend+0x46>
 8005098:	2300      	movs	r3, #0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10a      	bne.n	80050b4 <xQueueGenericSend+0x60>
	__asm volatile
 800509e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a2:	f383 8811 	msr	BASEPRI, r3
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	f3bf 8f4f 	dsb	sy
 80050ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80050b0:	bf00      	nop
 80050b2:	e7fe      	b.n	80050b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d103      	bne.n	80050c2 <xQueueGenericSend+0x6e>
 80050ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d101      	bne.n	80050c6 <xQueueGenericSend+0x72>
 80050c2:	2301      	movs	r3, #1
 80050c4:	e000      	b.n	80050c8 <xQueueGenericSend+0x74>
 80050c6:	2300      	movs	r3, #0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10a      	bne.n	80050e2 <xQueueGenericSend+0x8e>
	__asm volatile
 80050cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d0:	f383 8811 	msr	BASEPRI, r3
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	623b      	str	r3, [r7, #32]
}
 80050de:	bf00      	nop
 80050e0:	e7fe      	b.n	80050e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050e2:	f001 f9bd 	bl	8006460 <xTaskGetSchedulerState>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d102      	bne.n	80050f2 <xQueueGenericSend+0x9e>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <xQueueGenericSend+0xa2>
 80050f2:	2301      	movs	r3, #1
 80050f4:	e000      	b.n	80050f8 <xQueueGenericSend+0xa4>
 80050f6:	2300      	movs	r3, #0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10a      	bne.n	8005112 <xQueueGenericSend+0xbe>
	__asm volatile
 80050fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	61fb      	str	r3, [r7, #28]
}
 800510e:	bf00      	nop
 8005110:	e7fe      	b.n	8005110 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005112:	f001 feff 	bl	8006f14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005118:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800511a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800511e:	429a      	cmp	r2, r3
 8005120:	d302      	bcc.n	8005128 <xQueueGenericSend+0xd4>
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2b02      	cmp	r3, #2
 8005126:	d129      	bne.n	800517c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	68b9      	ldr	r1, [r7, #8]
 800512c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800512e:	f000 fa0b 	bl	8005548 <prvCopyDataToQueue>
 8005132:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	2b00      	cmp	r3, #0
 800513a:	d010      	beq.n	800515e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800513c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513e:	3324      	adds	r3, #36	; 0x24
 8005140:	4618      	mov	r0, r3
 8005142:	f000 ffcf 	bl	80060e4 <xTaskRemoveFromEventList>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d013      	beq.n	8005174 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800514c:	4b3f      	ldr	r3, [pc, #252]	; (800524c <xQueueGenericSend+0x1f8>)
 800514e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005152:	601a      	str	r2, [r3, #0]
 8005154:	f3bf 8f4f 	dsb	sy
 8005158:	f3bf 8f6f 	isb	sy
 800515c:	e00a      	b.n	8005174 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800515e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005160:	2b00      	cmp	r3, #0
 8005162:	d007      	beq.n	8005174 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005164:	4b39      	ldr	r3, [pc, #228]	; (800524c <xQueueGenericSend+0x1f8>)
 8005166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800516a:	601a      	str	r2, [r3, #0]
 800516c:	f3bf 8f4f 	dsb	sy
 8005170:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005174:	f001 fefe 	bl	8006f74 <vPortExitCritical>
				return pdPASS;
 8005178:	2301      	movs	r3, #1
 800517a:	e063      	b.n	8005244 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d103      	bne.n	800518a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005182:	f001 fef7 	bl	8006f74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005186:	2300      	movs	r3, #0
 8005188:	e05c      	b.n	8005244 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800518a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800518c:	2b00      	cmp	r3, #0
 800518e:	d106      	bne.n	800519e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005190:	f107 0314 	add.w	r3, r7, #20
 8005194:	4618      	mov	r0, r3
 8005196:	f001 f809 	bl	80061ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800519a:	2301      	movs	r3, #1
 800519c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800519e:	f001 fee9 	bl	8006f74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051a2:	f000 fd7b 	bl	8005c9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051a6:	f001 feb5 	bl	8006f14 <vPortEnterCritical>
 80051aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051b0:	b25b      	sxtb	r3, r3
 80051b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b6:	d103      	bne.n	80051c0 <xQueueGenericSend+0x16c>
 80051b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051c6:	b25b      	sxtb	r3, r3
 80051c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051cc:	d103      	bne.n	80051d6 <xQueueGenericSend+0x182>
 80051ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051d6:	f001 fecd 	bl	8006f74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051da:	1d3a      	adds	r2, r7, #4
 80051dc:	f107 0314 	add.w	r3, r7, #20
 80051e0:	4611      	mov	r1, r2
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 fff8 	bl	80061d8 <xTaskCheckForTimeOut>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d124      	bne.n	8005238 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80051ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051f0:	f000 faa2 	bl	8005738 <prvIsQueueFull>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d018      	beq.n	800522c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80051fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fc:	3310      	adds	r3, #16
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	4611      	mov	r1, r2
 8005202:	4618      	mov	r0, r3
 8005204:	f000 ff1e 	bl	8006044 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005208:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800520a:	f000 fa2d 	bl	8005668 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800520e:	f000 fd53 	bl	8005cb8 <xTaskResumeAll>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	f47f af7c 	bne.w	8005112 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800521a:	4b0c      	ldr	r3, [pc, #48]	; (800524c <xQueueGenericSend+0x1f8>)
 800521c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	f3bf 8f4f 	dsb	sy
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	e772      	b.n	8005112 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800522c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800522e:	f000 fa1b 	bl	8005668 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005232:	f000 fd41 	bl	8005cb8 <xTaskResumeAll>
 8005236:	e76c      	b.n	8005112 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005238:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800523a:	f000 fa15 	bl	8005668 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800523e:	f000 fd3b 	bl	8005cb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005242:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005244:	4618      	mov	r0, r3
 8005246:	3738      	adds	r7, #56	; 0x38
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	e000ed04 	.word	0xe000ed04

08005250 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b090      	sub	sp, #64	; 0x40
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
 800525c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10a      	bne.n	800527e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800527a:	bf00      	nop
 800527c:	e7fe      	b.n	800527c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d103      	bne.n	800528c <xQueueGenericSendFromISR+0x3c>
 8005284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005288:	2b00      	cmp	r3, #0
 800528a:	d101      	bne.n	8005290 <xQueueGenericSendFromISR+0x40>
 800528c:	2301      	movs	r3, #1
 800528e:	e000      	b.n	8005292 <xQueueGenericSendFromISR+0x42>
 8005290:	2300      	movs	r3, #0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d10a      	bne.n	80052ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529a:	f383 8811 	msr	BASEPRI, r3
 800529e:	f3bf 8f6f 	isb	sy
 80052a2:	f3bf 8f4f 	dsb	sy
 80052a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80052a8:	bf00      	nop
 80052aa:	e7fe      	b.n	80052aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d103      	bne.n	80052ba <xQueueGenericSendFromISR+0x6a>
 80052b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d101      	bne.n	80052be <xQueueGenericSendFromISR+0x6e>
 80052ba:	2301      	movs	r3, #1
 80052bc:	e000      	b.n	80052c0 <xQueueGenericSendFromISR+0x70>
 80052be:	2300      	movs	r3, #0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10a      	bne.n	80052da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80052c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c8:	f383 8811 	msr	BASEPRI, r3
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	623b      	str	r3, [r7, #32]
}
 80052d6:	bf00      	nop
 80052d8:	e7fe      	b.n	80052d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052da:	f001 fefd 	bl	80070d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80052de:	f3ef 8211 	mrs	r2, BASEPRI
 80052e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e6:	f383 8811 	msr	BASEPRI, r3
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	61fa      	str	r2, [r7, #28]
 80052f4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80052f6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80052f8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005302:	429a      	cmp	r2, r3
 8005304:	d302      	bcc.n	800530c <xQueueGenericSendFromISR+0xbc>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b02      	cmp	r3, #2
 800530a:	d12f      	bne.n	800536c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800530c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	68b9      	ldr	r1, [r7, #8]
 8005320:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005322:	f000 f911 	bl	8005548 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005326:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800532a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800532e:	d112      	bne.n	8005356 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005334:	2b00      	cmp	r3, #0
 8005336:	d016      	beq.n	8005366 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533a:	3324      	adds	r3, #36	; 0x24
 800533c:	4618      	mov	r0, r3
 800533e:	f000 fed1 	bl	80060e4 <xTaskRemoveFromEventList>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00e      	beq.n	8005366 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00b      	beq.n	8005366 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	e007      	b.n	8005366 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005356:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800535a:	3301      	adds	r3, #1
 800535c:	b2db      	uxtb	r3, r3
 800535e:	b25a      	sxtb	r2, r3
 8005360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005366:	2301      	movs	r3, #1
 8005368:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800536a:	e001      	b.n	8005370 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800536c:	2300      	movs	r3, #0
 800536e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005372:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800537a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800537c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800537e:	4618      	mov	r0, r3
 8005380:	3740      	adds	r7, #64	; 0x40
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
	...

08005388 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b08c      	sub	sp, #48	; 0x30
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005394:	2300      	movs	r3, #0
 8005396:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800539c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10a      	bne.n	80053b8 <xQueueReceive+0x30>
	__asm volatile
 80053a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a6:	f383 8811 	msr	BASEPRI, r3
 80053aa:	f3bf 8f6f 	isb	sy
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	623b      	str	r3, [r7, #32]
}
 80053b4:	bf00      	nop
 80053b6:	e7fe      	b.n	80053b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d103      	bne.n	80053c6 <xQueueReceive+0x3e>
 80053be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <xQueueReceive+0x42>
 80053c6:	2301      	movs	r3, #1
 80053c8:	e000      	b.n	80053cc <xQueueReceive+0x44>
 80053ca:	2300      	movs	r3, #0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10a      	bne.n	80053e6 <xQueueReceive+0x5e>
	__asm volatile
 80053d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d4:	f383 8811 	msr	BASEPRI, r3
 80053d8:	f3bf 8f6f 	isb	sy
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	61fb      	str	r3, [r7, #28]
}
 80053e2:	bf00      	nop
 80053e4:	e7fe      	b.n	80053e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053e6:	f001 f83b 	bl	8006460 <xTaskGetSchedulerState>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d102      	bne.n	80053f6 <xQueueReceive+0x6e>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <xQueueReceive+0x72>
 80053f6:	2301      	movs	r3, #1
 80053f8:	e000      	b.n	80053fc <xQueueReceive+0x74>
 80053fa:	2300      	movs	r3, #0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10a      	bne.n	8005416 <xQueueReceive+0x8e>
	__asm volatile
 8005400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005404:	f383 8811 	msr	BASEPRI, r3
 8005408:	f3bf 8f6f 	isb	sy
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	61bb      	str	r3, [r7, #24]
}
 8005412:	bf00      	nop
 8005414:	e7fe      	b.n	8005414 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005416:	f001 fd7d 	bl	8006f14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800541a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	2b00      	cmp	r3, #0
 8005424:	d01f      	beq.n	8005466 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005426:	68b9      	ldr	r1, [r7, #8]
 8005428:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800542a:	f000 f8f7 	bl	800561c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	1e5a      	subs	r2, r3, #1
 8005432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005434:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00f      	beq.n	800545e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800543e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005440:	3310      	adds	r3, #16
 8005442:	4618      	mov	r0, r3
 8005444:	f000 fe4e 	bl	80060e4 <xTaskRemoveFromEventList>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d007      	beq.n	800545e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800544e:	4b3d      	ldr	r3, [pc, #244]	; (8005544 <xQueueReceive+0x1bc>)
 8005450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005454:	601a      	str	r2, [r3, #0]
 8005456:	f3bf 8f4f 	dsb	sy
 800545a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800545e:	f001 fd89 	bl	8006f74 <vPortExitCritical>
				return pdPASS;
 8005462:	2301      	movs	r3, #1
 8005464:	e069      	b.n	800553a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d103      	bne.n	8005474 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800546c:	f001 fd82 	bl	8006f74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005470:	2300      	movs	r3, #0
 8005472:	e062      	b.n	800553a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005476:	2b00      	cmp	r3, #0
 8005478:	d106      	bne.n	8005488 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800547a:	f107 0310 	add.w	r3, r7, #16
 800547e:	4618      	mov	r0, r3
 8005480:	f000 fe94 	bl	80061ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005484:	2301      	movs	r3, #1
 8005486:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005488:	f001 fd74 	bl	8006f74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800548c:	f000 fc06 	bl	8005c9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005490:	f001 fd40 	bl	8006f14 <vPortEnterCritical>
 8005494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005496:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800549a:	b25b      	sxtb	r3, r3
 800549c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a0:	d103      	bne.n	80054aa <xQueueReceive+0x122>
 80054a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054b0:	b25b      	sxtb	r3, r3
 80054b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b6:	d103      	bne.n	80054c0 <xQueueReceive+0x138>
 80054b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054c0:	f001 fd58 	bl	8006f74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054c4:	1d3a      	adds	r2, r7, #4
 80054c6:	f107 0310 	add.w	r3, r7, #16
 80054ca:	4611      	mov	r1, r2
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 fe83 	bl	80061d8 <xTaskCheckForTimeOut>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d123      	bne.n	8005520 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054da:	f000 f917 	bl	800570c <prvIsQueueEmpty>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d017      	beq.n	8005514 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80054e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e6:	3324      	adds	r3, #36	; 0x24
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	4611      	mov	r1, r2
 80054ec:	4618      	mov	r0, r3
 80054ee:	f000 fda9 	bl	8006044 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80054f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054f4:	f000 f8b8 	bl	8005668 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80054f8:	f000 fbde 	bl	8005cb8 <xTaskResumeAll>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d189      	bne.n	8005416 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005502:	4b10      	ldr	r3, [pc, #64]	; (8005544 <xQueueReceive+0x1bc>)
 8005504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005508:	601a      	str	r2, [r3, #0]
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	e780      	b.n	8005416 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005514:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005516:	f000 f8a7 	bl	8005668 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800551a:	f000 fbcd 	bl	8005cb8 <xTaskResumeAll>
 800551e:	e77a      	b.n	8005416 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005520:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005522:	f000 f8a1 	bl	8005668 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005526:	f000 fbc7 	bl	8005cb8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800552a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800552c:	f000 f8ee 	bl	800570c <prvIsQueueEmpty>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	f43f af6f 	beq.w	8005416 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005538:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800553a:	4618      	mov	r0, r3
 800553c:	3730      	adds	r7, #48	; 0x30
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	e000ed04 	.word	0xe000ed04

08005548 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005554:	2300      	movs	r3, #0
 8005556:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10d      	bne.n	8005582 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d14d      	bne.n	800560a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	4618      	mov	r0, r3
 8005574:	f000 ff92 	bl	800649c <xTaskPriorityDisinherit>
 8005578:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	609a      	str	r2, [r3, #8]
 8005580:	e043      	b.n	800560a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d119      	bne.n	80055bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6858      	ldr	r0, [r3, #4]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005590:	461a      	mov	r2, r3
 8005592:	68b9      	ldr	r1, [r7, #8]
 8005594:	f001 ffee 	bl	8007574 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a0:	441a      	add	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d32b      	bcc.n	800560a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	605a      	str	r2, [r3, #4]
 80055ba:	e026      	b.n	800560a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	68d8      	ldr	r0, [r3, #12]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c4:	461a      	mov	r2, r3
 80055c6:	68b9      	ldr	r1, [r7, #8]
 80055c8:	f001 ffd4 	bl	8007574 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	68da      	ldr	r2, [r3, #12]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d4:	425b      	negs	r3, r3
 80055d6:	441a      	add	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	68da      	ldr	r2, [r3, #12]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d207      	bcs.n	80055f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f0:	425b      	negs	r3, r3
 80055f2:	441a      	add	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d105      	bne.n	800560a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d002      	beq.n	800560a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	3b01      	subs	r3, #1
 8005608:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	1c5a      	adds	r2, r3, #1
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005612:	697b      	ldr	r3, [r7, #20]
}
 8005614:	4618      	mov	r0, r3
 8005616:	3718      	adds	r7, #24
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	2b00      	cmp	r3, #0
 800562c:	d018      	beq.n	8005660 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68da      	ldr	r2, [r3, #12]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	441a      	add	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68da      	ldr	r2, [r3, #12]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	429a      	cmp	r2, r3
 8005646:	d303      	bcc.n	8005650 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68d9      	ldr	r1, [r3, #12]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005658:	461a      	mov	r2, r3
 800565a:	6838      	ldr	r0, [r7, #0]
 800565c:	f001 ff8a 	bl	8007574 <memcpy>
	}
}
 8005660:	bf00      	nop
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005670:	f001 fc50 	bl	8006f14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800567a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800567c:	e011      	b.n	80056a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005682:	2b00      	cmp	r3, #0
 8005684:	d012      	beq.n	80056ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	3324      	adds	r3, #36	; 0x24
 800568a:	4618      	mov	r0, r3
 800568c:	f000 fd2a 	bl	80060e4 <xTaskRemoveFromEventList>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005696:	f000 fe01 	bl	800629c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800569a:	7bfb      	ldrb	r3, [r7, #15]
 800569c:	3b01      	subs	r3, #1
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	dce9      	bgt.n	800567e <prvUnlockQueue+0x16>
 80056aa:	e000      	b.n	80056ae <prvUnlockQueue+0x46>
					break;
 80056ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	22ff      	movs	r2, #255	; 0xff
 80056b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80056b6:	f001 fc5d 	bl	8006f74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80056ba:	f001 fc2b 	bl	8006f14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056c6:	e011      	b.n	80056ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d012      	beq.n	80056f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	3310      	adds	r3, #16
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 fd05 	bl	80060e4 <xTaskRemoveFromEventList>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80056e0:	f000 fddc 	bl	800629c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80056e4:	7bbb      	ldrb	r3, [r7, #14]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	dce9      	bgt.n	80056c8 <prvUnlockQueue+0x60>
 80056f4:	e000      	b.n	80056f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80056f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	22ff      	movs	r2, #255	; 0xff
 80056fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005700:	f001 fc38 	bl	8006f74 <vPortExitCritical>
}
 8005704:	bf00      	nop
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005714:	f001 fbfe 	bl	8006f14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571c:	2b00      	cmp	r3, #0
 800571e:	d102      	bne.n	8005726 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005720:	2301      	movs	r3, #1
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	e001      	b.n	800572a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005726:	2300      	movs	r3, #0
 8005728:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800572a:	f001 fc23 	bl	8006f74 <vPortExitCritical>

	return xReturn;
 800572e:	68fb      	ldr	r3, [r7, #12]
}
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005740:	f001 fbe8 	bl	8006f14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800574c:	429a      	cmp	r2, r3
 800574e:	d102      	bne.n	8005756 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005750:	2301      	movs	r3, #1
 8005752:	60fb      	str	r3, [r7, #12]
 8005754:	e001      	b.n	800575a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005756:	2300      	movs	r3, #0
 8005758:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800575a:	f001 fc0b 	bl	8006f74 <vPortExitCritical>

	return xReturn;
 800575e:	68fb      	ldr	r3, [r7, #12]
}
 8005760:	4618      	mov	r0, r3
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005772:	2300      	movs	r3, #0
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	e014      	b.n	80057a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005778:	4a0f      	ldr	r2, [pc, #60]	; (80057b8 <vQueueAddToRegistry+0x50>)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10b      	bne.n	800579c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005784:	490c      	ldr	r1, [pc, #48]	; (80057b8 <vQueueAddToRegistry+0x50>)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	683a      	ldr	r2, [r7, #0]
 800578a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800578e:	4a0a      	ldr	r2, [pc, #40]	; (80057b8 <vQueueAddToRegistry+0x50>)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	00db      	lsls	r3, r3, #3
 8005794:	4413      	add	r3, r2
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800579a:	e006      	b.n	80057aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	3301      	adds	r3, #1
 80057a0:	60fb      	str	r3, [r7, #12]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2b07      	cmp	r3, #7
 80057a6:	d9e7      	bls.n	8005778 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80057a8:	bf00      	nop
 80057aa:	bf00      	nop
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	200007d0 	.word	0x200007d0

080057bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80057cc:	f001 fba2 	bl	8006f14 <vPortEnterCritical>
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057d6:	b25b      	sxtb	r3, r3
 80057d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057dc:	d103      	bne.n	80057e6 <vQueueWaitForMessageRestricted+0x2a>
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057ec:	b25b      	sxtb	r3, r3
 80057ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f2:	d103      	bne.n	80057fc <vQueueWaitForMessageRestricted+0x40>
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057fc:	f001 fbba 	bl	8006f74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005804:	2b00      	cmp	r3, #0
 8005806:	d106      	bne.n	8005816 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	3324      	adds	r3, #36	; 0x24
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	68b9      	ldr	r1, [r7, #8]
 8005810:	4618      	mov	r0, r3
 8005812:	f000 fc3b 	bl	800608c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005816:	6978      	ldr	r0, [r7, #20]
 8005818:	f7ff ff26 	bl	8005668 <prvUnlockQueue>
	}
 800581c:	bf00      	nop
 800581e:	3718      	adds	r7, #24
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005824:	b580      	push	{r7, lr}
 8005826:	b08e      	sub	sp, #56	; 0x38
 8005828:	af04      	add	r7, sp, #16
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
 8005830:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10a      	bne.n	800584e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583c:	f383 8811 	msr	BASEPRI, r3
 8005840:	f3bf 8f6f 	isb	sy
 8005844:	f3bf 8f4f 	dsb	sy
 8005848:	623b      	str	r3, [r7, #32]
}
 800584a:	bf00      	nop
 800584c:	e7fe      	b.n	800584c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800584e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10a      	bne.n	800586a <xTaskCreateStatic+0x46>
	__asm volatile
 8005854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005858:	f383 8811 	msr	BASEPRI, r3
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	61fb      	str	r3, [r7, #28]
}
 8005866:	bf00      	nop
 8005868:	e7fe      	b.n	8005868 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800586a:	235c      	movs	r3, #92	; 0x5c
 800586c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	2b5c      	cmp	r3, #92	; 0x5c
 8005872:	d00a      	beq.n	800588a <xTaskCreateStatic+0x66>
	__asm volatile
 8005874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005878:	f383 8811 	msr	BASEPRI, r3
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	61bb      	str	r3, [r7, #24]
}
 8005886:	bf00      	nop
 8005888:	e7fe      	b.n	8005888 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800588a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800588c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588e:	2b00      	cmp	r3, #0
 8005890:	d01e      	beq.n	80058d0 <xTaskCreateStatic+0xac>
 8005892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005894:	2b00      	cmp	r3, #0
 8005896:	d01b      	beq.n	80058d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800589a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	2202      	movs	r2, #2
 80058a6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80058aa:	2300      	movs	r3, #0
 80058ac:	9303      	str	r3, [sp, #12]
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	9302      	str	r3, [sp, #8]
 80058b2:	f107 0314 	add.w	r3, r7, #20
 80058b6:	9301      	str	r3, [sp, #4]
 80058b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	68b9      	ldr	r1, [r7, #8]
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f000 f850 	bl	8005968 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058ca:	f000 f8dd 	bl	8005a88 <prvAddNewTaskToReadyList>
 80058ce:	e001      	b.n	80058d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80058d0:	2300      	movs	r3, #0
 80058d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80058d4:	697b      	ldr	r3, [r7, #20]
	}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3728      	adds	r7, #40	; 0x28
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b08c      	sub	sp, #48	; 0x30
 80058e2:	af04      	add	r7, sp, #16
 80058e4:	60f8      	str	r0, [r7, #12]
 80058e6:	60b9      	str	r1, [r7, #8]
 80058e8:	603b      	str	r3, [r7, #0]
 80058ea:	4613      	mov	r3, r2
 80058ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80058ee:	88fb      	ldrh	r3, [r7, #6]
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4618      	mov	r0, r3
 80058f4:	f001 fc30 	bl	8007158 <pvPortMalloc>
 80058f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00e      	beq.n	800591e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005900:	205c      	movs	r0, #92	; 0x5c
 8005902:	f001 fc29 	bl	8007158 <pvPortMalloc>
 8005906:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d003      	beq.n	8005916 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	631a      	str	r2, [r3, #48]	; 0x30
 8005914:	e005      	b.n	8005922 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005916:	6978      	ldr	r0, [r7, #20]
 8005918:	f001 fcea 	bl	80072f0 <vPortFree>
 800591c:	e001      	b.n	8005922 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800591e:	2300      	movs	r3, #0
 8005920:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d017      	beq.n	8005958 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005930:	88fa      	ldrh	r2, [r7, #6]
 8005932:	2300      	movs	r3, #0
 8005934:	9303      	str	r3, [sp, #12]
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	9302      	str	r3, [sp, #8]
 800593a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593c:	9301      	str	r3, [sp, #4]
 800593e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	68b9      	ldr	r1, [r7, #8]
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f000 f80e 	bl	8005968 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800594c:	69f8      	ldr	r0, [r7, #28]
 800594e:	f000 f89b 	bl	8005a88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005952:	2301      	movs	r3, #1
 8005954:	61bb      	str	r3, [r7, #24]
 8005956:	e002      	b.n	800595e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005958:	f04f 33ff 	mov.w	r3, #4294967295
 800595c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800595e:	69bb      	ldr	r3, [r7, #24]
	}
 8005960:	4618      	mov	r0, r3
 8005962:	3720      	adds	r7, #32
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b088      	sub	sp, #32
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
 8005974:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005978:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	461a      	mov	r2, r3
 8005980:	21a5      	movs	r1, #165	; 0xa5
 8005982:	f001 fe05 	bl	8007590 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005990:	3b01      	subs	r3, #1
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	f023 0307 	bic.w	r3, r3, #7
 800599e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	f003 0307 	and.w	r3, r3, #7
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00a      	beq.n	80059c0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80059aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ae:	f383 8811 	msr	BASEPRI, r3
 80059b2:	f3bf 8f6f 	isb	sy
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	617b      	str	r3, [r7, #20]
}
 80059bc:	bf00      	nop
 80059be:	e7fe      	b.n	80059be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d01f      	beq.n	8005a06 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059c6:	2300      	movs	r3, #0
 80059c8:	61fb      	str	r3, [r7, #28]
 80059ca:	e012      	b.n	80059f2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	4413      	add	r3, r2
 80059d2:	7819      	ldrb	r1, [r3, #0]
 80059d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	4413      	add	r3, r2
 80059da:	3334      	adds	r3, #52	; 0x34
 80059dc:	460a      	mov	r2, r1
 80059de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	4413      	add	r3, r2
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d006      	beq.n	80059fa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	3301      	adds	r3, #1
 80059f0:	61fb      	str	r3, [r7, #28]
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	2b0f      	cmp	r3, #15
 80059f6:	d9e9      	bls.n	80059cc <prvInitialiseNewTask+0x64>
 80059f8:	e000      	b.n	80059fc <prvInitialiseNewTask+0x94>
			{
				break;
 80059fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80059fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a04:	e003      	b.n	8005a0e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a10:	2b37      	cmp	r3, #55	; 0x37
 8005a12:	d901      	bls.n	8005a18 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a14:	2337      	movs	r3, #55	; 0x37
 8005a16:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a1c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a22:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a26:	2200      	movs	r2, #0
 8005a28:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7ff f93e 	bl	8004cb0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a36:	3318      	adds	r3, #24
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7ff f939 	bl	8004cb0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a42:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a46:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a52:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a56:	2200      	movs	r2, #0
 8005a58:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	68f9      	ldr	r1, [r7, #12]
 8005a66:	69b8      	ldr	r0, [r7, #24]
 8005a68:	f001 f928 	bl	8006cbc <pxPortInitialiseStack>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a70:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d002      	beq.n	8005a7e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a7e:	bf00      	nop
 8005a80:	3720      	adds	r7, #32
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
	...

08005a88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a90:	f001 fa40 	bl	8006f14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a94:	4b2d      	ldr	r3, [pc, #180]	; (8005b4c <prvAddNewTaskToReadyList+0xc4>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	4a2c      	ldr	r2, [pc, #176]	; (8005b4c <prvAddNewTaskToReadyList+0xc4>)
 8005a9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a9e:	4b2c      	ldr	r3, [pc, #176]	; (8005b50 <prvAddNewTaskToReadyList+0xc8>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d109      	bne.n	8005aba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005aa6:	4a2a      	ldr	r2, [pc, #168]	; (8005b50 <prvAddNewTaskToReadyList+0xc8>)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005aac:	4b27      	ldr	r3, [pc, #156]	; (8005b4c <prvAddNewTaskToReadyList+0xc4>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d110      	bne.n	8005ad6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ab4:	f000 fc16 	bl	80062e4 <prvInitialiseTaskLists>
 8005ab8:	e00d      	b.n	8005ad6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005aba:	4b26      	ldr	r3, [pc, #152]	; (8005b54 <prvAddNewTaskToReadyList+0xcc>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d109      	bne.n	8005ad6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ac2:	4b23      	ldr	r3, [pc, #140]	; (8005b50 <prvAddNewTaskToReadyList+0xc8>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d802      	bhi.n	8005ad6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ad0:	4a1f      	ldr	r2, [pc, #124]	; (8005b50 <prvAddNewTaskToReadyList+0xc8>)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ad6:	4b20      	ldr	r3, [pc, #128]	; (8005b58 <prvAddNewTaskToReadyList+0xd0>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	3301      	adds	r3, #1
 8005adc:	4a1e      	ldr	r2, [pc, #120]	; (8005b58 <prvAddNewTaskToReadyList+0xd0>)
 8005ade:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005ae0:	4b1d      	ldr	r3, [pc, #116]	; (8005b58 <prvAddNewTaskToReadyList+0xd0>)
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aec:	4b1b      	ldr	r3, [pc, #108]	; (8005b5c <prvAddNewTaskToReadyList+0xd4>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d903      	bls.n	8005afc <prvAddNewTaskToReadyList+0x74>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af8:	4a18      	ldr	r2, [pc, #96]	; (8005b5c <prvAddNewTaskToReadyList+0xd4>)
 8005afa:	6013      	str	r3, [r2, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b00:	4613      	mov	r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4413      	add	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4a15      	ldr	r2, [pc, #84]	; (8005b60 <prvAddNewTaskToReadyList+0xd8>)
 8005b0a:	441a      	add	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	3304      	adds	r3, #4
 8005b10:	4619      	mov	r1, r3
 8005b12:	4610      	mov	r0, r2
 8005b14:	f7ff f8d9 	bl	8004cca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b18:	f001 fa2c 	bl	8006f74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b1c:	4b0d      	ldr	r3, [pc, #52]	; (8005b54 <prvAddNewTaskToReadyList+0xcc>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00e      	beq.n	8005b42 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b24:	4b0a      	ldr	r3, [pc, #40]	; (8005b50 <prvAddNewTaskToReadyList+0xc8>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d207      	bcs.n	8005b42 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b32:	4b0c      	ldr	r3, [pc, #48]	; (8005b64 <prvAddNewTaskToReadyList+0xdc>)
 8005b34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b38:	601a      	str	r2, [r3, #0]
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b42:	bf00      	nop
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	20000ce4 	.word	0x20000ce4
 8005b50:	20000810 	.word	0x20000810
 8005b54:	20000cf0 	.word	0x20000cf0
 8005b58:	20000d00 	.word	0x20000d00
 8005b5c:	20000cec 	.word	0x20000cec
 8005b60:	20000814 	.word	0x20000814
 8005b64:	e000ed04 	.word	0xe000ed04

08005b68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b70:	2300      	movs	r3, #0
 8005b72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d017      	beq.n	8005baa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b7a:	4b13      	ldr	r3, [pc, #76]	; (8005bc8 <vTaskDelay+0x60>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00a      	beq.n	8005b98 <vTaskDelay+0x30>
	__asm volatile
 8005b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b86:	f383 8811 	msr	BASEPRI, r3
 8005b8a:	f3bf 8f6f 	isb	sy
 8005b8e:	f3bf 8f4f 	dsb	sy
 8005b92:	60bb      	str	r3, [r7, #8]
}
 8005b94:	bf00      	nop
 8005b96:	e7fe      	b.n	8005b96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005b98:	f000 f880 	bl	8005c9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 fcea 	bl	8006578 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005ba4:	f000 f888 	bl	8005cb8 <xTaskResumeAll>
 8005ba8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d107      	bne.n	8005bc0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005bb0:	4b06      	ldr	r3, [pc, #24]	; (8005bcc <vTaskDelay+0x64>)
 8005bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bb6:	601a      	str	r2, [r3, #0]
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005bc0:	bf00      	nop
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	20000d0c 	.word	0x20000d0c
 8005bcc:	e000ed04 	.word	0xe000ed04

08005bd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b08a      	sub	sp, #40	; 0x28
 8005bd4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005bde:	463a      	mov	r2, r7
 8005be0:	1d39      	adds	r1, r7, #4
 8005be2:	f107 0308 	add.w	r3, r7, #8
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7ff f80e 	bl	8004c08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005bec:	6839      	ldr	r1, [r7, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	9202      	str	r2, [sp, #8]
 8005bf4:	9301      	str	r3, [sp, #4]
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	9300      	str	r3, [sp, #0]
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	460a      	mov	r2, r1
 8005bfe:	4921      	ldr	r1, [pc, #132]	; (8005c84 <vTaskStartScheduler+0xb4>)
 8005c00:	4821      	ldr	r0, [pc, #132]	; (8005c88 <vTaskStartScheduler+0xb8>)
 8005c02:	f7ff fe0f 	bl	8005824 <xTaskCreateStatic>
 8005c06:	4603      	mov	r3, r0
 8005c08:	4a20      	ldr	r2, [pc, #128]	; (8005c8c <vTaskStartScheduler+0xbc>)
 8005c0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c0c:	4b1f      	ldr	r3, [pc, #124]	; (8005c8c <vTaskStartScheduler+0xbc>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d002      	beq.n	8005c1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c14:	2301      	movs	r3, #1
 8005c16:	617b      	str	r3, [r7, #20]
 8005c18:	e001      	b.n	8005c1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d102      	bne.n	8005c2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005c24:	f000 fcfc 	bl	8006620 <xTimerCreateTimerTask>
 8005c28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d116      	bne.n	8005c5e <vTaskStartScheduler+0x8e>
	__asm volatile
 8005c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c34:	f383 8811 	msr	BASEPRI, r3
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	613b      	str	r3, [r7, #16]
}
 8005c42:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c44:	4b12      	ldr	r3, [pc, #72]	; (8005c90 <vTaskStartScheduler+0xc0>)
 8005c46:	f04f 32ff 	mov.w	r2, #4294967295
 8005c4a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c4c:	4b11      	ldr	r3, [pc, #68]	; (8005c94 <vTaskStartScheduler+0xc4>)
 8005c4e:	2201      	movs	r2, #1
 8005c50:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c52:	4b11      	ldr	r3, [pc, #68]	; (8005c98 <vTaskStartScheduler+0xc8>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c58:	f001 f8ba 	bl	8006dd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c5c:	e00e      	b.n	8005c7c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c64:	d10a      	bne.n	8005c7c <vTaskStartScheduler+0xac>
	__asm volatile
 8005c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6a:	f383 8811 	msr	BASEPRI, r3
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	60fb      	str	r3, [r7, #12]
}
 8005c78:	bf00      	nop
 8005c7a:	e7fe      	b.n	8005c7a <vTaskStartScheduler+0xaa>
}
 8005c7c:	bf00      	nop
 8005c7e:	3718      	adds	r7, #24
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	080075d4 	.word	0x080075d4
 8005c88:	080062b5 	.word	0x080062b5
 8005c8c:	20000d08 	.word	0x20000d08
 8005c90:	20000d04 	.word	0x20000d04
 8005c94:	20000cf0 	.word	0x20000cf0
 8005c98:	20000ce8 	.word	0x20000ce8

08005c9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005ca0:	4b04      	ldr	r3, [pc, #16]	; (8005cb4 <vTaskSuspendAll+0x18>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	4a03      	ldr	r2, [pc, #12]	; (8005cb4 <vTaskSuspendAll+0x18>)
 8005ca8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005caa:	bf00      	nop
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	20000d0c 	.word	0x20000d0c

08005cb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005cc6:	4b42      	ldr	r3, [pc, #264]	; (8005dd0 <xTaskResumeAll+0x118>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10a      	bne.n	8005ce4 <xTaskResumeAll+0x2c>
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	603b      	str	r3, [r7, #0]
}
 8005ce0:	bf00      	nop
 8005ce2:	e7fe      	b.n	8005ce2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005ce4:	f001 f916 	bl	8006f14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005ce8:	4b39      	ldr	r3, [pc, #228]	; (8005dd0 <xTaskResumeAll+0x118>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3b01      	subs	r3, #1
 8005cee:	4a38      	ldr	r2, [pc, #224]	; (8005dd0 <xTaskResumeAll+0x118>)
 8005cf0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cf2:	4b37      	ldr	r3, [pc, #220]	; (8005dd0 <xTaskResumeAll+0x118>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d162      	bne.n	8005dc0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005cfa:	4b36      	ldr	r3, [pc, #216]	; (8005dd4 <xTaskResumeAll+0x11c>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d05e      	beq.n	8005dc0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d02:	e02f      	b.n	8005d64 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d04:	4b34      	ldr	r3, [pc, #208]	; (8005dd8 <xTaskResumeAll+0x120>)
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	3318      	adds	r3, #24
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7ff f837 	bl	8004d84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	3304      	adds	r3, #4
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7ff f832 	bl	8004d84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d24:	4b2d      	ldr	r3, [pc, #180]	; (8005ddc <xTaskResumeAll+0x124>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d903      	bls.n	8005d34 <xTaskResumeAll+0x7c>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d30:	4a2a      	ldr	r2, [pc, #168]	; (8005ddc <xTaskResumeAll+0x124>)
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d38:	4613      	mov	r3, r2
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4413      	add	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	4a27      	ldr	r2, [pc, #156]	; (8005de0 <xTaskResumeAll+0x128>)
 8005d42:	441a      	add	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	3304      	adds	r3, #4
 8005d48:	4619      	mov	r1, r3
 8005d4a:	4610      	mov	r0, r2
 8005d4c:	f7fe ffbd 	bl	8004cca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d54:	4b23      	ldr	r3, [pc, #140]	; (8005de4 <xTaskResumeAll+0x12c>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d302      	bcc.n	8005d64 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005d5e:	4b22      	ldr	r3, [pc, #136]	; (8005de8 <xTaskResumeAll+0x130>)
 8005d60:	2201      	movs	r2, #1
 8005d62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d64:	4b1c      	ldr	r3, [pc, #112]	; (8005dd8 <xTaskResumeAll+0x120>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d1cb      	bne.n	8005d04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d001      	beq.n	8005d76 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d72:	f000 fb55 	bl	8006420 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005d76:	4b1d      	ldr	r3, [pc, #116]	; (8005dec <xTaskResumeAll+0x134>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d010      	beq.n	8005da4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d82:	f000 f847 	bl	8005e14 <xTaskIncrementTick>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d002      	beq.n	8005d92 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005d8c:	4b16      	ldr	r3, [pc, #88]	; (8005de8 <xTaskResumeAll+0x130>)
 8005d8e:	2201      	movs	r2, #1
 8005d90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	3b01      	subs	r3, #1
 8005d96:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1f1      	bne.n	8005d82 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005d9e:	4b13      	ldr	r3, [pc, #76]	; (8005dec <xTaskResumeAll+0x134>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005da4:	4b10      	ldr	r3, [pc, #64]	; (8005de8 <xTaskResumeAll+0x130>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d009      	beq.n	8005dc0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005dac:	2301      	movs	r3, #1
 8005dae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005db0:	4b0f      	ldr	r3, [pc, #60]	; (8005df0 <xTaskResumeAll+0x138>)
 8005db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005dc0:	f001 f8d8 	bl	8006f74 <vPortExitCritical>

	return xAlreadyYielded;
 8005dc4:	68bb      	ldr	r3, [r7, #8]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	20000d0c 	.word	0x20000d0c
 8005dd4:	20000ce4 	.word	0x20000ce4
 8005dd8:	20000ca4 	.word	0x20000ca4
 8005ddc:	20000cec 	.word	0x20000cec
 8005de0:	20000814 	.word	0x20000814
 8005de4:	20000810 	.word	0x20000810
 8005de8:	20000cf8 	.word	0x20000cf8
 8005dec:	20000cf4 	.word	0x20000cf4
 8005df0:	e000ed04 	.word	0xe000ed04

08005df4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005dfa:	4b05      	ldr	r3, [pc, #20]	; (8005e10 <xTaskGetTickCount+0x1c>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005e00:	687b      	ldr	r3, [r7, #4]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	370c      	adds	r7, #12
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	20000ce8 	.word	0x20000ce8

08005e14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b086      	sub	sp, #24
 8005e18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e1e:	4b4f      	ldr	r3, [pc, #316]	; (8005f5c <xTaskIncrementTick+0x148>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f040 808f 	bne.w	8005f46 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e28:	4b4d      	ldr	r3, [pc, #308]	; (8005f60 <xTaskIncrementTick+0x14c>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e30:	4a4b      	ldr	r2, [pc, #300]	; (8005f60 <xTaskIncrementTick+0x14c>)
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d120      	bne.n	8005e7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e3c:	4b49      	ldr	r3, [pc, #292]	; (8005f64 <xTaskIncrementTick+0x150>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00a      	beq.n	8005e5c <xTaskIncrementTick+0x48>
	__asm volatile
 8005e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	603b      	str	r3, [r7, #0]
}
 8005e58:	bf00      	nop
 8005e5a:	e7fe      	b.n	8005e5a <xTaskIncrementTick+0x46>
 8005e5c:	4b41      	ldr	r3, [pc, #260]	; (8005f64 <xTaskIncrementTick+0x150>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	60fb      	str	r3, [r7, #12]
 8005e62:	4b41      	ldr	r3, [pc, #260]	; (8005f68 <xTaskIncrementTick+0x154>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a3f      	ldr	r2, [pc, #252]	; (8005f64 <xTaskIncrementTick+0x150>)
 8005e68:	6013      	str	r3, [r2, #0]
 8005e6a:	4a3f      	ldr	r2, [pc, #252]	; (8005f68 <xTaskIncrementTick+0x154>)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6013      	str	r3, [r2, #0]
 8005e70:	4b3e      	ldr	r3, [pc, #248]	; (8005f6c <xTaskIncrementTick+0x158>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	3301      	adds	r3, #1
 8005e76:	4a3d      	ldr	r2, [pc, #244]	; (8005f6c <xTaskIncrementTick+0x158>)
 8005e78:	6013      	str	r3, [r2, #0]
 8005e7a:	f000 fad1 	bl	8006420 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e7e:	4b3c      	ldr	r3, [pc, #240]	; (8005f70 <xTaskIncrementTick+0x15c>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d349      	bcc.n	8005f1c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e88:	4b36      	ldr	r3, [pc, #216]	; (8005f64 <xTaskIncrementTick+0x150>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d104      	bne.n	8005e9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e92:	4b37      	ldr	r3, [pc, #220]	; (8005f70 <xTaskIncrementTick+0x15c>)
 8005e94:	f04f 32ff 	mov.w	r2, #4294967295
 8005e98:	601a      	str	r2, [r3, #0]
					break;
 8005e9a:	e03f      	b.n	8005f1c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e9c:	4b31      	ldr	r3, [pc, #196]	; (8005f64 <xTaskIncrementTick+0x150>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d203      	bcs.n	8005ebc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005eb4:	4a2e      	ldr	r2, [pc, #184]	; (8005f70 <xTaskIncrementTick+0x15c>)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005eba:	e02f      	b.n	8005f1c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	3304      	adds	r3, #4
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7fe ff5f 	bl	8004d84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d004      	beq.n	8005ed8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	3318      	adds	r3, #24
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7fe ff56 	bl	8004d84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005edc:	4b25      	ldr	r3, [pc, #148]	; (8005f74 <xTaskIncrementTick+0x160>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d903      	bls.n	8005eec <xTaskIncrementTick+0xd8>
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee8:	4a22      	ldr	r2, [pc, #136]	; (8005f74 <xTaskIncrementTick+0x160>)
 8005eea:	6013      	str	r3, [r2, #0]
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	4a1f      	ldr	r2, [pc, #124]	; (8005f78 <xTaskIncrementTick+0x164>)
 8005efa:	441a      	add	r2, r3
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	3304      	adds	r3, #4
 8005f00:	4619      	mov	r1, r3
 8005f02:	4610      	mov	r0, r2
 8005f04:	f7fe fee1 	bl	8004cca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f0c:	4b1b      	ldr	r3, [pc, #108]	; (8005f7c <xTaskIncrementTick+0x168>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d3b8      	bcc.n	8005e88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005f16:	2301      	movs	r3, #1
 8005f18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f1a:	e7b5      	b.n	8005e88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f1c:	4b17      	ldr	r3, [pc, #92]	; (8005f7c <xTaskIncrementTick+0x168>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f22:	4915      	ldr	r1, [pc, #84]	; (8005f78 <xTaskIncrementTick+0x164>)
 8005f24:	4613      	mov	r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4413      	add	r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	440b      	add	r3, r1
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d901      	bls.n	8005f38 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005f34:	2301      	movs	r3, #1
 8005f36:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005f38:	4b11      	ldr	r3, [pc, #68]	; (8005f80 <xTaskIncrementTick+0x16c>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d007      	beq.n	8005f50 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005f40:	2301      	movs	r3, #1
 8005f42:	617b      	str	r3, [r7, #20]
 8005f44:	e004      	b.n	8005f50 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005f46:	4b0f      	ldr	r3, [pc, #60]	; (8005f84 <xTaskIncrementTick+0x170>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	4a0d      	ldr	r2, [pc, #52]	; (8005f84 <xTaskIncrementTick+0x170>)
 8005f4e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005f50:	697b      	ldr	r3, [r7, #20]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3718      	adds	r7, #24
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	20000d0c 	.word	0x20000d0c
 8005f60:	20000ce8 	.word	0x20000ce8
 8005f64:	20000c9c 	.word	0x20000c9c
 8005f68:	20000ca0 	.word	0x20000ca0
 8005f6c:	20000cfc 	.word	0x20000cfc
 8005f70:	20000d04 	.word	0x20000d04
 8005f74:	20000cec 	.word	0x20000cec
 8005f78:	20000814 	.word	0x20000814
 8005f7c:	20000810 	.word	0x20000810
 8005f80:	20000cf8 	.word	0x20000cf8
 8005f84:	20000cf4 	.word	0x20000cf4

08005f88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f8e:	4b28      	ldr	r3, [pc, #160]	; (8006030 <vTaskSwitchContext+0xa8>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f96:	4b27      	ldr	r3, [pc, #156]	; (8006034 <vTaskSwitchContext+0xac>)
 8005f98:	2201      	movs	r2, #1
 8005f9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f9c:	e041      	b.n	8006022 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005f9e:	4b25      	ldr	r3, [pc, #148]	; (8006034 <vTaskSwitchContext+0xac>)
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fa4:	4b24      	ldr	r3, [pc, #144]	; (8006038 <vTaskSwitchContext+0xb0>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	60fb      	str	r3, [r7, #12]
 8005faa:	e010      	b.n	8005fce <vTaskSwitchContext+0x46>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10a      	bne.n	8005fc8 <vTaskSwitchContext+0x40>
	__asm volatile
 8005fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb6:	f383 8811 	msr	BASEPRI, r3
 8005fba:	f3bf 8f6f 	isb	sy
 8005fbe:	f3bf 8f4f 	dsb	sy
 8005fc2:	607b      	str	r3, [r7, #4]
}
 8005fc4:	bf00      	nop
 8005fc6:	e7fe      	b.n	8005fc6 <vTaskSwitchContext+0x3e>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	60fb      	str	r3, [r7, #12]
 8005fce:	491b      	ldr	r1, [pc, #108]	; (800603c <vTaskSwitchContext+0xb4>)
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4413      	add	r3, r2
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	440b      	add	r3, r1
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d0e4      	beq.n	8005fac <vTaskSwitchContext+0x24>
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	4a13      	ldr	r2, [pc, #76]	; (800603c <vTaskSwitchContext+0xb4>)
 8005fee:	4413      	add	r3, r2
 8005ff0:	60bb      	str	r3, [r7, #8]
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	685a      	ldr	r2, [r3, #4]
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	605a      	str	r2, [r3, #4]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	685a      	ldr	r2, [r3, #4]
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	3308      	adds	r3, #8
 8006004:	429a      	cmp	r2, r3
 8006006:	d104      	bne.n	8006012 <vTaskSwitchContext+0x8a>
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	605a      	str	r2, [r3, #4]
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	4a09      	ldr	r2, [pc, #36]	; (8006040 <vTaskSwitchContext+0xb8>)
 800601a:	6013      	str	r3, [r2, #0]
 800601c:	4a06      	ldr	r2, [pc, #24]	; (8006038 <vTaskSwitchContext+0xb0>)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6013      	str	r3, [r2, #0]
}
 8006022:	bf00      	nop
 8006024:	3714      	adds	r7, #20
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	20000d0c 	.word	0x20000d0c
 8006034:	20000cf8 	.word	0x20000cf8
 8006038:	20000cec 	.word	0x20000cec
 800603c:	20000814 	.word	0x20000814
 8006040:	20000810 	.word	0x20000810

08006044 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10a      	bne.n	800606a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006058:	f383 8811 	msr	BASEPRI, r3
 800605c:	f3bf 8f6f 	isb	sy
 8006060:	f3bf 8f4f 	dsb	sy
 8006064:	60fb      	str	r3, [r7, #12]
}
 8006066:	bf00      	nop
 8006068:	e7fe      	b.n	8006068 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800606a:	4b07      	ldr	r3, [pc, #28]	; (8006088 <vTaskPlaceOnEventList+0x44>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	3318      	adds	r3, #24
 8006070:	4619      	mov	r1, r3
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7fe fe4d 	bl	8004d12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006078:	2101      	movs	r1, #1
 800607a:	6838      	ldr	r0, [r7, #0]
 800607c:	f000 fa7c 	bl	8006578 <prvAddCurrentTaskToDelayedList>
}
 8006080:	bf00      	nop
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	20000810 	.word	0x20000810

0800608c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10a      	bne.n	80060b4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800609e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a2:	f383 8811 	msr	BASEPRI, r3
 80060a6:	f3bf 8f6f 	isb	sy
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	617b      	str	r3, [r7, #20]
}
 80060b0:	bf00      	nop
 80060b2:	e7fe      	b.n	80060b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060b4:	4b0a      	ldr	r3, [pc, #40]	; (80060e0 <vTaskPlaceOnEventListRestricted+0x54>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	3318      	adds	r3, #24
 80060ba:	4619      	mov	r1, r3
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f7fe fe04 	bl	8004cca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d002      	beq.n	80060ce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80060c8:	f04f 33ff 	mov.w	r3, #4294967295
 80060cc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80060ce:	6879      	ldr	r1, [r7, #4]
 80060d0:	68b8      	ldr	r0, [r7, #8]
 80060d2:	f000 fa51 	bl	8006578 <prvAddCurrentTaskToDelayedList>
	}
 80060d6:	bf00      	nop
 80060d8:	3718      	adds	r7, #24
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	20000810 	.word	0x20000810

080060e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b086      	sub	sp, #24
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10a      	bne.n	8006110 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80060fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fe:	f383 8811 	msr	BASEPRI, r3
 8006102:	f3bf 8f6f 	isb	sy
 8006106:	f3bf 8f4f 	dsb	sy
 800610a:	60fb      	str	r3, [r7, #12]
}
 800610c:	bf00      	nop
 800610e:	e7fe      	b.n	800610e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	3318      	adds	r3, #24
 8006114:	4618      	mov	r0, r3
 8006116:	f7fe fe35 	bl	8004d84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800611a:	4b1e      	ldr	r3, [pc, #120]	; (8006194 <xTaskRemoveFromEventList+0xb0>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d11d      	bne.n	800615e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	3304      	adds	r3, #4
 8006126:	4618      	mov	r0, r3
 8006128:	f7fe fe2c 	bl	8004d84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006130:	4b19      	ldr	r3, [pc, #100]	; (8006198 <xTaskRemoveFromEventList+0xb4>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	429a      	cmp	r2, r3
 8006136:	d903      	bls.n	8006140 <xTaskRemoveFromEventList+0x5c>
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613c:	4a16      	ldr	r2, [pc, #88]	; (8006198 <xTaskRemoveFromEventList+0xb4>)
 800613e:	6013      	str	r3, [r2, #0]
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006144:	4613      	mov	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4a13      	ldr	r2, [pc, #76]	; (800619c <xTaskRemoveFromEventList+0xb8>)
 800614e:	441a      	add	r2, r3
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	3304      	adds	r3, #4
 8006154:	4619      	mov	r1, r3
 8006156:	4610      	mov	r0, r2
 8006158:	f7fe fdb7 	bl	8004cca <vListInsertEnd>
 800615c:	e005      	b.n	800616a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	3318      	adds	r3, #24
 8006162:	4619      	mov	r1, r3
 8006164:	480e      	ldr	r0, [pc, #56]	; (80061a0 <xTaskRemoveFromEventList+0xbc>)
 8006166:	f7fe fdb0 	bl	8004cca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800616e:	4b0d      	ldr	r3, [pc, #52]	; (80061a4 <xTaskRemoveFromEventList+0xc0>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006174:	429a      	cmp	r2, r3
 8006176:	d905      	bls.n	8006184 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006178:	2301      	movs	r3, #1
 800617a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800617c:	4b0a      	ldr	r3, [pc, #40]	; (80061a8 <xTaskRemoveFromEventList+0xc4>)
 800617e:	2201      	movs	r2, #1
 8006180:	601a      	str	r2, [r3, #0]
 8006182:	e001      	b.n	8006188 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006184:	2300      	movs	r3, #0
 8006186:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006188:	697b      	ldr	r3, [r7, #20]
}
 800618a:	4618      	mov	r0, r3
 800618c:	3718      	adds	r7, #24
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	20000d0c 	.word	0x20000d0c
 8006198:	20000cec 	.word	0x20000cec
 800619c:	20000814 	.word	0x20000814
 80061a0:	20000ca4 	.word	0x20000ca4
 80061a4:	20000810 	.word	0x20000810
 80061a8:	20000cf8 	.word	0x20000cf8

080061ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80061b4:	4b06      	ldr	r3, [pc, #24]	; (80061d0 <vTaskInternalSetTimeOutState+0x24>)
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80061bc:	4b05      	ldr	r3, [pc, #20]	; (80061d4 <vTaskInternalSetTimeOutState+0x28>)
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	605a      	str	r2, [r3, #4]
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr
 80061d0:	20000cfc 	.word	0x20000cfc
 80061d4:	20000ce8 	.word	0x20000ce8

080061d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b088      	sub	sp, #32
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10a      	bne.n	80061fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80061e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ec:	f383 8811 	msr	BASEPRI, r3
 80061f0:	f3bf 8f6f 	isb	sy
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	613b      	str	r3, [r7, #16]
}
 80061fa:	bf00      	nop
 80061fc:	e7fe      	b.n	80061fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10a      	bne.n	800621a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006208:	f383 8811 	msr	BASEPRI, r3
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	60fb      	str	r3, [r7, #12]
}
 8006216:	bf00      	nop
 8006218:	e7fe      	b.n	8006218 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800621a:	f000 fe7b 	bl	8006f14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800621e:	4b1d      	ldr	r3, [pc, #116]	; (8006294 <xTaskCheckForTimeOut+0xbc>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	69ba      	ldr	r2, [r7, #24]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006236:	d102      	bne.n	800623e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006238:	2300      	movs	r3, #0
 800623a:	61fb      	str	r3, [r7, #28]
 800623c:	e023      	b.n	8006286 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	4b15      	ldr	r3, [pc, #84]	; (8006298 <xTaskCheckForTimeOut+0xc0>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	429a      	cmp	r2, r3
 8006248:	d007      	beq.n	800625a <xTaskCheckForTimeOut+0x82>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	69ba      	ldr	r2, [r7, #24]
 8006250:	429a      	cmp	r2, r3
 8006252:	d302      	bcc.n	800625a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006254:	2301      	movs	r3, #1
 8006256:	61fb      	str	r3, [r7, #28]
 8006258:	e015      	b.n	8006286 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	429a      	cmp	r2, r3
 8006262:	d20b      	bcs.n	800627c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	1ad2      	subs	r2, r2, r3
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f7ff ff9b 	bl	80061ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006276:	2300      	movs	r3, #0
 8006278:	61fb      	str	r3, [r7, #28]
 800627a:	e004      	b.n	8006286 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	2200      	movs	r2, #0
 8006280:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006282:	2301      	movs	r3, #1
 8006284:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006286:	f000 fe75 	bl	8006f74 <vPortExitCritical>

	return xReturn;
 800628a:	69fb      	ldr	r3, [r7, #28]
}
 800628c:	4618      	mov	r0, r3
 800628e:	3720      	adds	r7, #32
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	20000ce8 	.word	0x20000ce8
 8006298:	20000cfc 	.word	0x20000cfc

0800629c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800629c:	b480      	push	{r7}
 800629e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80062a0:	4b03      	ldr	r3, [pc, #12]	; (80062b0 <vTaskMissedYield+0x14>)
 80062a2:	2201      	movs	r2, #1
 80062a4:	601a      	str	r2, [r3, #0]
}
 80062a6:	bf00      	nop
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	20000cf8 	.word	0x20000cf8

080062b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80062bc:	f000 f852 	bl	8006364 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80062c0:	4b06      	ldr	r3, [pc, #24]	; (80062dc <prvIdleTask+0x28>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d9f9      	bls.n	80062bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80062c8:	4b05      	ldr	r3, [pc, #20]	; (80062e0 <prvIdleTask+0x2c>)
 80062ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ce:	601a      	str	r2, [r3, #0]
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80062d8:	e7f0      	b.n	80062bc <prvIdleTask+0x8>
 80062da:	bf00      	nop
 80062dc:	20000814 	.word	0x20000814
 80062e0:	e000ed04 	.word	0xe000ed04

080062e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062ea:	2300      	movs	r3, #0
 80062ec:	607b      	str	r3, [r7, #4]
 80062ee:	e00c      	b.n	800630a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	4613      	mov	r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	4413      	add	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4a12      	ldr	r2, [pc, #72]	; (8006344 <prvInitialiseTaskLists+0x60>)
 80062fc:	4413      	add	r3, r2
 80062fe:	4618      	mov	r0, r3
 8006300:	f7fe fcb6 	bl	8004c70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	3301      	adds	r3, #1
 8006308:	607b      	str	r3, [r7, #4]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2b37      	cmp	r3, #55	; 0x37
 800630e:	d9ef      	bls.n	80062f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006310:	480d      	ldr	r0, [pc, #52]	; (8006348 <prvInitialiseTaskLists+0x64>)
 8006312:	f7fe fcad 	bl	8004c70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006316:	480d      	ldr	r0, [pc, #52]	; (800634c <prvInitialiseTaskLists+0x68>)
 8006318:	f7fe fcaa 	bl	8004c70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800631c:	480c      	ldr	r0, [pc, #48]	; (8006350 <prvInitialiseTaskLists+0x6c>)
 800631e:	f7fe fca7 	bl	8004c70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006322:	480c      	ldr	r0, [pc, #48]	; (8006354 <prvInitialiseTaskLists+0x70>)
 8006324:	f7fe fca4 	bl	8004c70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006328:	480b      	ldr	r0, [pc, #44]	; (8006358 <prvInitialiseTaskLists+0x74>)
 800632a:	f7fe fca1 	bl	8004c70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800632e:	4b0b      	ldr	r3, [pc, #44]	; (800635c <prvInitialiseTaskLists+0x78>)
 8006330:	4a05      	ldr	r2, [pc, #20]	; (8006348 <prvInitialiseTaskLists+0x64>)
 8006332:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006334:	4b0a      	ldr	r3, [pc, #40]	; (8006360 <prvInitialiseTaskLists+0x7c>)
 8006336:	4a05      	ldr	r2, [pc, #20]	; (800634c <prvInitialiseTaskLists+0x68>)
 8006338:	601a      	str	r2, [r3, #0]
}
 800633a:	bf00      	nop
 800633c:	3708      	adds	r7, #8
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	20000814 	.word	0x20000814
 8006348:	20000c74 	.word	0x20000c74
 800634c:	20000c88 	.word	0x20000c88
 8006350:	20000ca4 	.word	0x20000ca4
 8006354:	20000cb8 	.word	0x20000cb8
 8006358:	20000cd0 	.word	0x20000cd0
 800635c:	20000c9c 	.word	0x20000c9c
 8006360:	20000ca0 	.word	0x20000ca0

08006364 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800636a:	e019      	b.n	80063a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800636c:	f000 fdd2 	bl	8006f14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006370:	4b10      	ldr	r3, [pc, #64]	; (80063b4 <prvCheckTasksWaitingTermination+0x50>)
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	3304      	adds	r3, #4
 800637c:	4618      	mov	r0, r3
 800637e:	f7fe fd01 	bl	8004d84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006382:	4b0d      	ldr	r3, [pc, #52]	; (80063b8 <prvCheckTasksWaitingTermination+0x54>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	3b01      	subs	r3, #1
 8006388:	4a0b      	ldr	r2, [pc, #44]	; (80063b8 <prvCheckTasksWaitingTermination+0x54>)
 800638a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800638c:	4b0b      	ldr	r3, [pc, #44]	; (80063bc <prvCheckTasksWaitingTermination+0x58>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	3b01      	subs	r3, #1
 8006392:	4a0a      	ldr	r2, [pc, #40]	; (80063bc <prvCheckTasksWaitingTermination+0x58>)
 8006394:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006396:	f000 fded 	bl	8006f74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f810 	bl	80063c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063a0:	4b06      	ldr	r3, [pc, #24]	; (80063bc <prvCheckTasksWaitingTermination+0x58>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1e1      	bne.n	800636c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80063a8:	bf00      	nop
 80063aa:	bf00      	nop
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	20000cb8 	.word	0x20000cb8
 80063b8:	20000ce4 	.word	0x20000ce4
 80063bc:	20000ccc 	.word	0x20000ccc

080063c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d108      	bne.n	80063e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 ff8a 	bl	80072f0 <vPortFree>
				vPortFree( pxTCB );
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 ff87 	bl	80072f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80063e2:	e018      	b.n	8006416 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d103      	bne.n	80063f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 ff7e 	bl	80072f0 <vPortFree>
	}
 80063f4:	e00f      	b.n	8006416 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d00a      	beq.n	8006416 <prvDeleteTCB+0x56>
	__asm volatile
 8006400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006404:	f383 8811 	msr	BASEPRI, r3
 8006408:	f3bf 8f6f 	isb	sy
 800640c:	f3bf 8f4f 	dsb	sy
 8006410:	60fb      	str	r3, [r7, #12]
}
 8006412:	bf00      	nop
 8006414:	e7fe      	b.n	8006414 <prvDeleteTCB+0x54>
	}
 8006416:	bf00      	nop
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
	...

08006420 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006426:	4b0c      	ldr	r3, [pc, #48]	; (8006458 <prvResetNextTaskUnblockTime+0x38>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d104      	bne.n	800643a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006430:	4b0a      	ldr	r3, [pc, #40]	; (800645c <prvResetNextTaskUnblockTime+0x3c>)
 8006432:	f04f 32ff 	mov.w	r2, #4294967295
 8006436:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006438:	e008      	b.n	800644c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800643a:	4b07      	ldr	r3, [pc, #28]	; (8006458 <prvResetNextTaskUnblockTime+0x38>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	4a04      	ldr	r2, [pc, #16]	; (800645c <prvResetNextTaskUnblockTime+0x3c>)
 800644a:	6013      	str	r3, [r2, #0]
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr
 8006458:	20000c9c 	.word	0x20000c9c
 800645c:	20000d04 	.word	0x20000d04

08006460 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006466:	4b0b      	ldr	r3, [pc, #44]	; (8006494 <xTaskGetSchedulerState+0x34>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d102      	bne.n	8006474 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800646e:	2301      	movs	r3, #1
 8006470:	607b      	str	r3, [r7, #4]
 8006472:	e008      	b.n	8006486 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006474:	4b08      	ldr	r3, [pc, #32]	; (8006498 <xTaskGetSchedulerState+0x38>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d102      	bne.n	8006482 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800647c:	2302      	movs	r3, #2
 800647e:	607b      	str	r3, [r7, #4]
 8006480:	e001      	b.n	8006486 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006482:	2300      	movs	r3, #0
 8006484:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006486:	687b      	ldr	r3, [r7, #4]
	}
 8006488:	4618      	mov	r0, r3
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr
 8006494:	20000cf0 	.word	0x20000cf0
 8006498:	20000d0c 	.word	0x20000d0c

0800649c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80064a8:	2300      	movs	r3, #0
 80064aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d056      	beq.n	8006560 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80064b2:	4b2e      	ldr	r3, [pc, #184]	; (800656c <xTaskPriorityDisinherit+0xd0>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	693a      	ldr	r2, [r7, #16]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d00a      	beq.n	80064d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80064bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c0:	f383 8811 	msr	BASEPRI, r3
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	60fb      	str	r3, [r7, #12]
}
 80064ce:	bf00      	nop
 80064d0:	e7fe      	b.n	80064d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10a      	bne.n	80064f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80064da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064de:	f383 8811 	msr	BASEPRI, r3
 80064e2:	f3bf 8f6f 	isb	sy
 80064e6:	f3bf 8f4f 	dsb	sy
 80064ea:	60bb      	str	r3, [r7, #8]
}
 80064ec:	bf00      	nop
 80064ee:	e7fe      	b.n	80064ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064f4:	1e5a      	subs	r2, r3, #1
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006502:	429a      	cmp	r2, r3
 8006504:	d02c      	beq.n	8006560 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800650a:	2b00      	cmp	r3, #0
 800650c:	d128      	bne.n	8006560 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	3304      	adds	r3, #4
 8006512:	4618      	mov	r0, r3
 8006514:	f7fe fc36 	bl	8004d84 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006524:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006530:	4b0f      	ldr	r3, [pc, #60]	; (8006570 <xTaskPriorityDisinherit+0xd4>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	429a      	cmp	r2, r3
 8006536:	d903      	bls.n	8006540 <xTaskPriorityDisinherit+0xa4>
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653c:	4a0c      	ldr	r2, [pc, #48]	; (8006570 <xTaskPriorityDisinherit+0xd4>)
 800653e:	6013      	str	r3, [r2, #0]
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006544:	4613      	mov	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4413      	add	r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4a09      	ldr	r2, [pc, #36]	; (8006574 <xTaskPriorityDisinherit+0xd8>)
 800654e:	441a      	add	r2, r3
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	3304      	adds	r3, #4
 8006554:	4619      	mov	r1, r3
 8006556:	4610      	mov	r0, r2
 8006558:	f7fe fbb7 	bl	8004cca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800655c:	2301      	movs	r3, #1
 800655e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006560:	697b      	ldr	r3, [r7, #20]
	}
 8006562:	4618      	mov	r0, r3
 8006564:	3718      	adds	r7, #24
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	20000810 	.word	0x20000810
 8006570:	20000cec 	.word	0x20000cec
 8006574:	20000814 	.word	0x20000814

08006578 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006582:	4b21      	ldr	r3, [pc, #132]	; (8006608 <prvAddCurrentTaskToDelayedList+0x90>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006588:	4b20      	ldr	r3, [pc, #128]	; (800660c <prvAddCurrentTaskToDelayedList+0x94>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	3304      	adds	r3, #4
 800658e:	4618      	mov	r0, r3
 8006590:	f7fe fbf8 	bl	8004d84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659a:	d10a      	bne.n	80065b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d007      	beq.n	80065b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065a2:	4b1a      	ldr	r3, [pc, #104]	; (800660c <prvAddCurrentTaskToDelayedList+0x94>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	3304      	adds	r3, #4
 80065a8:	4619      	mov	r1, r3
 80065aa:	4819      	ldr	r0, [pc, #100]	; (8006610 <prvAddCurrentTaskToDelayedList+0x98>)
 80065ac:	f7fe fb8d 	bl	8004cca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80065b0:	e026      	b.n	8006600 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4413      	add	r3, r2
 80065b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80065ba:	4b14      	ldr	r3, [pc, #80]	; (800660c <prvAddCurrentTaskToDelayedList+0x94>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80065c2:	68ba      	ldr	r2, [r7, #8]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d209      	bcs.n	80065de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065ca:	4b12      	ldr	r3, [pc, #72]	; (8006614 <prvAddCurrentTaskToDelayedList+0x9c>)
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	4b0f      	ldr	r3, [pc, #60]	; (800660c <prvAddCurrentTaskToDelayedList+0x94>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	3304      	adds	r3, #4
 80065d4:	4619      	mov	r1, r3
 80065d6:	4610      	mov	r0, r2
 80065d8:	f7fe fb9b 	bl	8004d12 <vListInsert>
}
 80065dc:	e010      	b.n	8006600 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065de:	4b0e      	ldr	r3, [pc, #56]	; (8006618 <prvAddCurrentTaskToDelayedList+0xa0>)
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	4b0a      	ldr	r3, [pc, #40]	; (800660c <prvAddCurrentTaskToDelayedList+0x94>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	3304      	adds	r3, #4
 80065e8:	4619      	mov	r1, r3
 80065ea:	4610      	mov	r0, r2
 80065ec:	f7fe fb91 	bl	8004d12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80065f0:	4b0a      	ldr	r3, [pc, #40]	; (800661c <prvAddCurrentTaskToDelayedList+0xa4>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d202      	bcs.n	8006600 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80065fa:	4a08      	ldr	r2, [pc, #32]	; (800661c <prvAddCurrentTaskToDelayedList+0xa4>)
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	6013      	str	r3, [r2, #0]
}
 8006600:	bf00      	nop
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	20000ce8 	.word	0x20000ce8
 800660c:	20000810 	.word	0x20000810
 8006610:	20000cd0 	.word	0x20000cd0
 8006614:	20000ca0 	.word	0x20000ca0
 8006618:	20000c9c 	.word	0x20000c9c
 800661c:	20000d04 	.word	0x20000d04

08006620 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b08a      	sub	sp, #40	; 0x28
 8006624:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006626:	2300      	movs	r3, #0
 8006628:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800662a:	f000 fb07 	bl	8006c3c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800662e:	4b1c      	ldr	r3, [pc, #112]	; (80066a0 <xTimerCreateTimerTask+0x80>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d021      	beq.n	800667a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006636:	2300      	movs	r3, #0
 8006638:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800663a:	2300      	movs	r3, #0
 800663c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800663e:	1d3a      	adds	r2, r7, #4
 8006640:	f107 0108 	add.w	r1, r7, #8
 8006644:	f107 030c 	add.w	r3, r7, #12
 8006648:	4618      	mov	r0, r3
 800664a:	f7fe faf7 	bl	8004c3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800664e:	6879      	ldr	r1, [r7, #4]
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	9202      	str	r2, [sp, #8]
 8006656:	9301      	str	r3, [sp, #4]
 8006658:	2302      	movs	r3, #2
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	2300      	movs	r3, #0
 800665e:	460a      	mov	r2, r1
 8006660:	4910      	ldr	r1, [pc, #64]	; (80066a4 <xTimerCreateTimerTask+0x84>)
 8006662:	4811      	ldr	r0, [pc, #68]	; (80066a8 <xTimerCreateTimerTask+0x88>)
 8006664:	f7ff f8de 	bl	8005824 <xTaskCreateStatic>
 8006668:	4603      	mov	r3, r0
 800666a:	4a10      	ldr	r2, [pc, #64]	; (80066ac <xTimerCreateTimerTask+0x8c>)
 800666c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800666e:	4b0f      	ldr	r3, [pc, #60]	; (80066ac <xTimerCreateTimerTask+0x8c>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d001      	beq.n	800667a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006676:	2301      	movs	r3, #1
 8006678:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10a      	bne.n	8006696 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006684:	f383 8811 	msr	BASEPRI, r3
 8006688:	f3bf 8f6f 	isb	sy
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	613b      	str	r3, [r7, #16]
}
 8006692:	bf00      	nop
 8006694:	e7fe      	b.n	8006694 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006696:	697b      	ldr	r3, [r7, #20]
}
 8006698:	4618      	mov	r0, r3
 800669a:	3718      	adds	r7, #24
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	20000d40 	.word	0x20000d40
 80066a4:	080075dc 	.word	0x080075dc
 80066a8:	080067e5 	.word	0x080067e5
 80066ac:	20000d44 	.word	0x20000d44

080066b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b08a      	sub	sp, #40	; 0x28
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
 80066bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80066be:	2300      	movs	r3, #0
 80066c0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10a      	bne.n	80066de <xTimerGenericCommand+0x2e>
	__asm volatile
 80066c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066cc:	f383 8811 	msr	BASEPRI, r3
 80066d0:	f3bf 8f6f 	isb	sy
 80066d4:	f3bf 8f4f 	dsb	sy
 80066d8:	623b      	str	r3, [r7, #32]
}
 80066da:	bf00      	nop
 80066dc:	e7fe      	b.n	80066dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80066de:	4b1a      	ldr	r3, [pc, #104]	; (8006748 <xTimerGenericCommand+0x98>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d02a      	beq.n	800673c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	2b05      	cmp	r3, #5
 80066f6:	dc18      	bgt.n	800672a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80066f8:	f7ff feb2 	bl	8006460 <xTaskGetSchedulerState>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d109      	bne.n	8006716 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006702:	4b11      	ldr	r3, [pc, #68]	; (8006748 <xTimerGenericCommand+0x98>)
 8006704:	6818      	ldr	r0, [r3, #0]
 8006706:	f107 0110 	add.w	r1, r7, #16
 800670a:	2300      	movs	r3, #0
 800670c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800670e:	f7fe fca1 	bl	8005054 <xQueueGenericSend>
 8006712:	6278      	str	r0, [r7, #36]	; 0x24
 8006714:	e012      	b.n	800673c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006716:	4b0c      	ldr	r3, [pc, #48]	; (8006748 <xTimerGenericCommand+0x98>)
 8006718:	6818      	ldr	r0, [r3, #0]
 800671a:	f107 0110 	add.w	r1, r7, #16
 800671e:	2300      	movs	r3, #0
 8006720:	2200      	movs	r2, #0
 8006722:	f7fe fc97 	bl	8005054 <xQueueGenericSend>
 8006726:	6278      	str	r0, [r7, #36]	; 0x24
 8006728:	e008      	b.n	800673c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800672a:	4b07      	ldr	r3, [pc, #28]	; (8006748 <xTimerGenericCommand+0x98>)
 800672c:	6818      	ldr	r0, [r3, #0]
 800672e:	f107 0110 	add.w	r1, r7, #16
 8006732:	2300      	movs	r3, #0
 8006734:	683a      	ldr	r2, [r7, #0]
 8006736:	f7fe fd8b 	bl	8005250 <xQueueGenericSendFromISR>
 800673a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800673c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800673e:	4618      	mov	r0, r3
 8006740:	3728      	adds	r7, #40	; 0x28
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	20000d40 	.word	0x20000d40

0800674c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b088      	sub	sp, #32
 8006750:	af02      	add	r7, sp, #8
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006756:	4b22      	ldr	r3, [pc, #136]	; (80067e0 <prvProcessExpiredTimer+0x94>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	3304      	adds	r3, #4
 8006764:	4618      	mov	r0, r3
 8006766:	f7fe fb0d 	bl	8004d84 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006770:	f003 0304 	and.w	r3, r3, #4
 8006774:	2b00      	cmp	r3, #0
 8006776:	d022      	beq.n	80067be <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	699a      	ldr	r2, [r3, #24]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	18d1      	adds	r1, r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	683a      	ldr	r2, [r7, #0]
 8006784:	6978      	ldr	r0, [r7, #20]
 8006786:	f000 f8d1 	bl	800692c <prvInsertTimerInActiveList>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d01f      	beq.n	80067d0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006790:	2300      	movs	r3, #0
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	2300      	movs	r3, #0
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	2100      	movs	r1, #0
 800679a:	6978      	ldr	r0, [r7, #20]
 800679c:	f7ff ff88 	bl	80066b0 <xTimerGenericCommand>
 80067a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d113      	bne.n	80067d0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80067a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ac:	f383 8811 	msr	BASEPRI, r3
 80067b0:	f3bf 8f6f 	isb	sy
 80067b4:	f3bf 8f4f 	dsb	sy
 80067b8:	60fb      	str	r3, [r7, #12]
}
 80067ba:	bf00      	nop
 80067bc:	e7fe      	b.n	80067bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067c4:	f023 0301 	bic.w	r3, r3, #1
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	6a1b      	ldr	r3, [r3, #32]
 80067d4:	6978      	ldr	r0, [r7, #20]
 80067d6:	4798      	blx	r3
}
 80067d8:	bf00      	nop
 80067da:	3718      	adds	r7, #24
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	20000d38 	.word	0x20000d38

080067e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80067ec:	f107 0308 	add.w	r3, r7, #8
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 f857 	bl	80068a4 <prvGetNextExpireTime>
 80067f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	4619      	mov	r1, r3
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f000 f803 	bl	8006808 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006802:	f000 f8d5 	bl	80069b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006806:	e7f1      	b.n	80067ec <prvTimerTask+0x8>

08006808 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006812:	f7ff fa43 	bl	8005c9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006816:	f107 0308 	add.w	r3, r7, #8
 800681a:	4618      	mov	r0, r3
 800681c:	f000 f866 	bl	80068ec <prvSampleTimeNow>
 8006820:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d130      	bne.n	800688a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10a      	bne.n	8006844 <prvProcessTimerOrBlockTask+0x3c>
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	429a      	cmp	r2, r3
 8006834:	d806      	bhi.n	8006844 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006836:	f7ff fa3f 	bl	8005cb8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800683a:	68f9      	ldr	r1, [r7, #12]
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7ff ff85 	bl	800674c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006842:	e024      	b.n	800688e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d008      	beq.n	800685c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800684a:	4b13      	ldr	r3, [pc, #76]	; (8006898 <prvProcessTimerOrBlockTask+0x90>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d101      	bne.n	8006858 <prvProcessTimerOrBlockTask+0x50>
 8006854:	2301      	movs	r3, #1
 8006856:	e000      	b.n	800685a <prvProcessTimerOrBlockTask+0x52>
 8006858:	2300      	movs	r3, #0
 800685a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800685c:	4b0f      	ldr	r3, [pc, #60]	; (800689c <prvProcessTimerOrBlockTask+0x94>)
 800685e:	6818      	ldr	r0, [r3, #0]
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	4619      	mov	r1, r3
 800686a:	f7fe ffa7 	bl	80057bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800686e:	f7ff fa23 	bl	8005cb8 <xTaskResumeAll>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d10a      	bne.n	800688e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006878:	4b09      	ldr	r3, [pc, #36]	; (80068a0 <prvProcessTimerOrBlockTask+0x98>)
 800687a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800687e:	601a      	str	r2, [r3, #0]
 8006880:	f3bf 8f4f 	dsb	sy
 8006884:	f3bf 8f6f 	isb	sy
}
 8006888:	e001      	b.n	800688e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800688a:	f7ff fa15 	bl	8005cb8 <xTaskResumeAll>
}
 800688e:	bf00      	nop
 8006890:	3710      	adds	r7, #16
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	20000d3c 	.word	0x20000d3c
 800689c:	20000d40 	.word	0x20000d40
 80068a0:	e000ed04 	.word	0xe000ed04

080068a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80068ac:	4b0e      	ldr	r3, [pc, #56]	; (80068e8 <prvGetNextExpireTime+0x44>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d101      	bne.n	80068ba <prvGetNextExpireTime+0x16>
 80068b6:	2201      	movs	r2, #1
 80068b8:	e000      	b.n	80068bc <prvGetNextExpireTime+0x18>
 80068ba:	2200      	movs	r2, #0
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d105      	bne.n	80068d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80068c8:	4b07      	ldr	r3, [pc, #28]	; (80068e8 <prvGetNextExpireTime+0x44>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	60fb      	str	r3, [r7, #12]
 80068d2:	e001      	b.n	80068d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80068d4:	2300      	movs	r3, #0
 80068d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80068d8:	68fb      	ldr	r3, [r7, #12]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	20000d38 	.word	0x20000d38

080068ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80068f4:	f7ff fa7e 	bl	8005df4 <xTaskGetTickCount>
 80068f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80068fa:	4b0b      	ldr	r3, [pc, #44]	; (8006928 <prvSampleTimeNow+0x3c>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	429a      	cmp	r2, r3
 8006902:	d205      	bcs.n	8006910 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006904:	f000 f936 	bl	8006b74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	601a      	str	r2, [r3, #0]
 800690e:	e002      	b.n	8006916 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006916:	4a04      	ldr	r2, [pc, #16]	; (8006928 <prvSampleTimeNow+0x3c>)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800691c:	68fb      	ldr	r3, [r7, #12]
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	20000d48 	.word	0x20000d48

0800692c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b086      	sub	sp, #24
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
 8006938:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800693a:	2300      	movs	r3, #0
 800693c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	429a      	cmp	r2, r3
 8006950:	d812      	bhi.n	8006978 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	1ad2      	subs	r2, r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	699b      	ldr	r3, [r3, #24]
 800695c:	429a      	cmp	r2, r3
 800695e:	d302      	bcc.n	8006966 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006960:	2301      	movs	r3, #1
 8006962:	617b      	str	r3, [r7, #20]
 8006964:	e01b      	b.n	800699e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006966:	4b10      	ldr	r3, [pc, #64]	; (80069a8 <prvInsertTimerInActiveList+0x7c>)
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	3304      	adds	r3, #4
 800696e:	4619      	mov	r1, r3
 8006970:	4610      	mov	r0, r2
 8006972:	f7fe f9ce 	bl	8004d12 <vListInsert>
 8006976:	e012      	b.n	800699e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	429a      	cmp	r2, r3
 800697e:	d206      	bcs.n	800698e <prvInsertTimerInActiveList+0x62>
 8006980:	68ba      	ldr	r2, [r7, #8]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	429a      	cmp	r2, r3
 8006986:	d302      	bcc.n	800698e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006988:	2301      	movs	r3, #1
 800698a:	617b      	str	r3, [r7, #20]
 800698c:	e007      	b.n	800699e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800698e:	4b07      	ldr	r3, [pc, #28]	; (80069ac <prvInsertTimerInActiveList+0x80>)
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	3304      	adds	r3, #4
 8006996:	4619      	mov	r1, r3
 8006998:	4610      	mov	r0, r2
 800699a:	f7fe f9ba 	bl	8004d12 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800699e:	697b      	ldr	r3, [r7, #20]
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3718      	adds	r7, #24
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	20000d3c 	.word	0x20000d3c
 80069ac:	20000d38 	.word	0x20000d38

080069b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b08e      	sub	sp, #56	; 0x38
 80069b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80069b6:	e0ca      	b.n	8006b4e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	da18      	bge.n	80069f0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80069be:	1d3b      	adds	r3, r7, #4
 80069c0:	3304      	adds	r3, #4
 80069c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80069c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10a      	bne.n	80069e0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80069ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ce:	f383 8811 	msr	BASEPRI, r3
 80069d2:	f3bf 8f6f 	isb	sy
 80069d6:	f3bf 8f4f 	dsb	sy
 80069da:	61fb      	str	r3, [r7, #28]
}
 80069dc:	bf00      	nop
 80069de:	e7fe      	b.n	80069de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80069e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069e6:	6850      	ldr	r0, [r2, #4]
 80069e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069ea:	6892      	ldr	r2, [r2, #8]
 80069ec:	4611      	mov	r1, r2
 80069ee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	f2c0 80aa 	blt.w	8006b4c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80069fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fe:	695b      	ldr	r3, [r3, #20]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d004      	beq.n	8006a0e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a06:	3304      	adds	r3, #4
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7fe f9bb 	bl	8004d84 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a0e:	463b      	mov	r3, r7
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7ff ff6b 	bl	80068ec <prvSampleTimeNow>
 8006a16:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2b09      	cmp	r3, #9
 8006a1c:	f200 8097 	bhi.w	8006b4e <prvProcessReceivedCommands+0x19e>
 8006a20:	a201      	add	r2, pc, #4	; (adr r2, 8006a28 <prvProcessReceivedCommands+0x78>)
 8006a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a26:	bf00      	nop
 8006a28:	08006a51 	.word	0x08006a51
 8006a2c:	08006a51 	.word	0x08006a51
 8006a30:	08006a51 	.word	0x08006a51
 8006a34:	08006ac5 	.word	0x08006ac5
 8006a38:	08006ad9 	.word	0x08006ad9
 8006a3c:	08006b23 	.word	0x08006b23
 8006a40:	08006a51 	.word	0x08006a51
 8006a44:	08006a51 	.word	0x08006a51
 8006a48:	08006ac5 	.word	0x08006ac5
 8006a4c:	08006ad9 	.word	0x08006ad9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a56:	f043 0301 	orr.w	r3, r3, #1
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	18d1      	adds	r1, r2, r3
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a70:	f7ff ff5c 	bl	800692c <prvInsertTimerInActiveList>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d069      	beq.n	8006b4e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a80:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a88:	f003 0304 	and.w	r3, r3, #4
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d05e      	beq.n	8006b4e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	441a      	add	r2, r3
 8006a98:	2300      	movs	r3, #0
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	2100      	movs	r1, #0
 8006aa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006aa2:	f7ff fe05 	bl	80066b0 <xTimerGenericCommand>
 8006aa6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006aa8:	6a3b      	ldr	r3, [r7, #32]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d14f      	bne.n	8006b4e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab2:	f383 8811 	msr	BASEPRI, r3
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	61bb      	str	r3, [r7, #24]
}
 8006ac0:	bf00      	nop
 8006ac2:	e7fe      	b.n	8006ac2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006aca:	f023 0301 	bic.w	r3, r3, #1
 8006ace:	b2da      	uxtb	r2, r3
 8006ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006ad6:	e03a      	b.n	8006b4e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ada:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ade:	f043 0301 	orr.w	r3, r3, #1
 8006ae2:	b2da      	uxtb	r2, r3
 8006ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10a      	bne.n	8006b0e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afc:	f383 8811 	msr	BASEPRI, r3
 8006b00:	f3bf 8f6f 	isb	sy
 8006b04:	f3bf 8f4f 	dsb	sy
 8006b08:	617b      	str	r3, [r7, #20]
}
 8006b0a:	bf00      	nop
 8006b0c:	e7fe      	b.n	8006b0c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b10:	699a      	ldr	r2, [r3, #24]
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	18d1      	adds	r1, r2, r3
 8006b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b1c:	f7ff ff06 	bl	800692c <prvInsertTimerInActiveList>
					break;
 8006b20:	e015      	b.n	8006b4e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b28:	f003 0302 	and.w	r3, r3, #2
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d103      	bne.n	8006b38 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006b30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b32:	f000 fbdd 	bl	80072f0 <vPortFree>
 8006b36:	e00a      	b.n	8006b4e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b3e:	f023 0301 	bic.w	r3, r3, #1
 8006b42:	b2da      	uxtb	r2, r3
 8006b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006b4a:	e000      	b.n	8006b4e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006b4c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b4e:	4b08      	ldr	r3, [pc, #32]	; (8006b70 <prvProcessReceivedCommands+0x1c0>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	1d39      	adds	r1, r7, #4
 8006b54:	2200      	movs	r2, #0
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7fe fc16 	bl	8005388 <xQueueReceive>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f47f af2a 	bne.w	80069b8 <prvProcessReceivedCommands+0x8>
	}
}
 8006b64:	bf00      	nop
 8006b66:	bf00      	nop
 8006b68:	3730      	adds	r7, #48	; 0x30
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	20000d40 	.word	0x20000d40

08006b74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b088      	sub	sp, #32
 8006b78:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b7a:	e048      	b.n	8006c0e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b7c:	4b2d      	ldr	r3, [pc, #180]	; (8006c34 <prvSwitchTimerLists+0xc0>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b86:	4b2b      	ldr	r3, [pc, #172]	; (8006c34 <prvSwitchTimerLists+0xc0>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	3304      	adds	r3, #4
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7fe f8f5 	bl	8004d84 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6a1b      	ldr	r3, [r3, #32]
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ba8:	f003 0304 	and.w	r3, r3, #4
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d02e      	beq.n	8006c0e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006bba:	68ba      	ldr	r2, [r7, #8]
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d90e      	bls.n	8006be0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	68ba      	ldr	r2, [r7, #8]
 8006bc6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006bce:	4b19      	ldr	r3, [pc, #100]	; (8006c34 <prvSwitchTimerLists+0xc0>)
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	3304      	adds	r3, #4
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	4610      	mov	r0, r2
 8006bda:	f7fe f89a 	bl	8004d12 <vListInsert>
 8006bde:	e016      	b.n	8006c0e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006be0:	2300      	movs	r3, #0
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	2300      	movs	r3, #0
 8006be6:	693a      	ldr	r2, [r7, #16]
 8006be8:	2100      	movs	r1, #0
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f7ff fd60 	bl	80066b0 <xTimerGenericCommand>
 8006bf0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10a      	bne.n	8006c0e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfc:	f383 8811 	msr	BASEPRI, r3
 8006c00:	f3bf 8f6f 	isb	sy
 8006c04:	f3bf 8f4f 	dsb	sy
 8006c08:	603b      	str	r3, [r7, #0]
}
 8006c0a:	bf00      	nop
 8006c0c:	e7fe      	b.n	8006c0c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c0e:	4b09      	ldr	r3, [pc, #36]	; (8006c34 <prvSwitchTimerLists+0xc0>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1b1      	bne.n	8006b7c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006c18:	4b06      	ldr	r3, [pc, #24]	; (8006c34 <prvSwitchTimerLists+0xc0>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006c1e:	4b06      	ldr	r3, [pc, #24]	; (8006c38 <prvSwitchTimerLists+0xc4>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a04      	ldr	r2, [pc, #16]	; (8006c34 <prvSwitchTimerLists+0xc0>)
 8006c24:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006c26:	4a04      	ldr	r2, [pc, #16]	; (8006c38 <prvSwitchTimerLists+0xc4>)
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	6013      	str	r3, [r2, #0]
}
 8006c2c:	bf00      	nop
 8006c2e:	3718      	adds	r7, #24
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	20000d38 	.word	0x20000d38
 8006c38:	20000d3c 	.word	0x20000d3c

08006c3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006c42:	f000 f967 	bl	8006f14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006c46:	4b15      	ldr	r3, [pc, #84]	; (8006c9c <prvCheckForValidListAndQueue+0x60>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d120      	bne.n	8006c90 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006c4e:	4814      	ldr	r0, [pc, #80]	; (8006ca0 <prvCheckForValidListAndQueue+0x64>)
 8006c50:	f7fe f80e 	bl	8004c70 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006c54:	4813      	ldr	r0, [pc, #76]	; (8006ca4 <prvCheckForValidListAndQueue+0x68>)
 8006c56:	f7fe f80b 	bl	8004c70 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006c5a:	4b13      	ldr	r3, [pc, #76]	; (8006ca8 <prvCheckForValidListAndQueue+0x6c>)
 8006c5c:	4a10      	ldr	r2, [pc, #64]	; (8006ca0 <prvCheckForValidListAndQueue+0x64>)
 8006c5e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006c60:	4b12      	ldr	r3, [pc, #72]	; (8006cac <prvCheckForValidListAndQueue+0x70>)
 8006c62:	4a10      	ldr	r2, [pc, #64]	; (8006ca4 <prvCheckForValidListAndQueue+0x68>)
 8006c64:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006c66:	2300      	movs	r3, #0
 8006c68:	9300      	str	r3, [sp, #0]
 8006c6a:	4b11      	ldr	r3, [pc, #68]	; (8006cb0 <prvCheckForValidListAndQueue+0x74>)
 8006c6c:	4a11      	ldr	r2, [pc, #68]	; (8006cb4 <prvCheckForValidListAndQueue+0x78>)
 8006c6e:	2110      	movs	r1, #16
 8006c70:	200a      	movs	r0, #10
 8006c72:	f7fe f919 	bl	8004ea8 <xQueueGenericCreateStatic>
 8006c76:	4603      	mov	r3, r0
 8006c78:	4a08      	ldr	r2, [pc, #32]	; (8006c9c <prvCheckForValidListAndQueue+0x60>)
 8006c7a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006c7c:	4b07      	ldr	r3, [pc, #28]	; (8006c9c <prvCheckForValidListAndQueue+0x60>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d005      	beq.n	8006c90 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006c84:	4b05      	ldr	r3, [pc, #20]	; (8006c9c <prvCheckForValidListAndQueue+0x60>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	490b      	ldr	r1, [pc, #44]	; (8006cb8 <prvCheckForValidListAndQueue+0x7c>)
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7fe fd6c 	bl	8005768 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c90:	f000 f970 	bl	8006f74 <vPortExitCritical>
}
 8006c94:	bf00      	nop
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	20000d40 	.word	0x20000d40
 8006ca0:	20000d10 	.word	0x20000d10
 8006ca4:	20000d24 	.word	0x20000d24
 8006ca8:	20000d38 	.word	0x20000d38
 8006cac:	20000d3c 	.word	0x20000d3c
 8006cb0:	20000dec 	.word	0x20000dec
 8006cb4:	20000d4c 	.word	0x20000d4c
 8006cb8:	080075e4 	.word	0x080075e4

08006cbc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	3b04      	subs	r3, #4
 8006ccc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006cd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	3b04      	subs	r3, #4
 8006cda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	f023 0201 	bic.w	r2, r3, #1
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	3b04      	subs	r3, #4
 8006cea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006cec:	4a0c      	ldr	r2, [pc, #48]	; (8006d20 <pxPortInitialiseStack+0x64>)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	3b14      	subs	r3, #20
 8006cf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	3b04      	subs	r3, #4
 8006d02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f06f 0202 	mvn.w	r2, #2
 8006d0a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	3b20      	subs	r3, #32
 8006d10:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006d12:	68fb      	ldr	r3, [r7, #12]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3714      	adds	r7, #20
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr
 8006d20:	08006d25 	.word	0x08006d25

08006d24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d2e:	4b12      	ldr	r3, [pc, #72]	; (8006d78 <prvTaskExitError+0x54>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d36:	d00a      	beq.n	8006d4e <prvTaskExitError+0x2a>
	__asm volatile
 8006d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3c:	f383 8811 	msr	BASEPRI, r3
 8006d40:	f3bf 8f6f 	isb	sy
 8006d44:	f3bf 8f4f 	dsb	sy
 8006d48:	60fb      	str	r3, [r7, #12]
}
 8006d4a:	bf00      	nop
 8006d4c:	e7fe      	b.n	8006d4c <prvTaskExitError+0x28>
	__asm volatile
 8006d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	60bb      	str	r3, [r7, #8]
}
 8006d60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006d62:	bf00      	nop
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d0fc      	beq.n	8006d64 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006d6a:	bf00      	nop
 8006d6c:	bf00      	nop
 8006d6e:	3714      	adds	r7, #20
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr
 8006d78:	2000000c 	.word	0x2000000c
 8006d7c:	00000000 	.word	0x00000000

08006d80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006d80:	4b07      	ldr	r3, [pc, #28]	; (8006da0 <pxCurrentTCBConst2>)
 8006d82:	6819      	ldr	r1, [r3, #0]
 8006d84:	6808      	ldr	r0, [r1, #0]
 8006d86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d8a:	f380 8809 	msr	PSP, r0
 8006d8e:	f3bf 8f6f 	isb	sy
 8006d92:	f04f 0000 	mov.w	r0, #0
 8006d96:	f380 8811 	msr	BASEPRI, r0
 8006d9a:	4770      	bx	lr
 8006d9c:	f3af 8000 	nop.w

08006da0 <pxCurrentTCBConst2>:
 8006da0:	20000810 	.word	0x20000810
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006da4:	bf00      	nop
 8006da6:	bf00      	nop

08006da8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006da8:	4808      	ldr	r0, [pc, #32]	; (8006dcc <prvPortStartFirstTask+0x24>)
 8006daa:	6800      	ldr	r0, [r0, #0]
 8006dac:	6800      	ldr	r0, [r0, #0]
 8006dae:	f380 8808 	msr	MSP, r0
 8006db2:	f04f 0000 	mov.w	r0, #0
 8006db6:	f380 8814 	msr	CONTROL, r0
 8006dba:	b662      	cpsie	i
 8006dbc:	b661      	cpsie	f
 8006dbe:	f3bf 8f4f 	dsb	sy
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	df00      	svc	0
 8006dc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006dca:	bf00      	nop
 8006dcc:	e000ed08 	.word	0xe000ed08

08006dd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b086      	sub	sp, #24
 8006dd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006dd6:	4b46      	ldr	r3, [pc, #280]	; (8006ef0 <xPortStartScheduler+0x120>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a46      	ldr	r2, [pc, #280]	; (8006ef4 <xPortStartScheduler+0x124>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d10a      	bne.n	8006df6 <xPortStartScheduler+0x26>
	__asm volatile
 8006de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de4:	f383 8811 	msr	BASEPRI, r3
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	613b      	str	r3, [r7, #16]
}
 8006df2:	bf00      	nop
 8006df4:	e7fe      	b.n	8006df4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006df6:	4b3e      	ldr	r3, [pc, #248]	; (8006ef0 <xPortStartScheduler+0x120>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a3f      	ldr	r2, [pc, #252]	; (8006ef8 <xPortStartScheduler+0x128>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d10a      	bne.n	8006e16 <xPortStartScheduler+0x46>
	__asm volatile
 8006e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e04:	f383 8811 	msr	BASEPRI, r3
 8006e08:	f3bf 8f6f 	isb	sy
 8006e0c:	f3bf 8f4f 	dsb	sy
 8006e10:	60fb      	str	r3, [r7, #12]
}
 8006e12:	bf00      	nop
 8006e14:	e7fe      	b.n	8006e14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e16:	4b39      	ldr	r3, [pc, #228]	; (8006efc <xPortStartScheduler+0x12c>)
 8006e18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	22ff      	movs	r2, #255	; 0xff
 8006e26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e30:	78fb      	ldrb	r3, [r7, #3]
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006e38:	b2da      	uxtb	r2, r3
 8006e3a:	4b31      	ldr	r3, [pc, #196]	; (8006f00 <xPortStartScheduler+0x130>)
 8006e3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e3e:	4b31      	ldr	r3, [pc, #196]	; (8006f04 <xPortStartScheduler+0x134>)
 8006e40:	2207      	movs	r2, #7
 8006e42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e44:	e009      	b.n	8006e5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006e46:	4b2f      	ldr	r3, [pc, #188]	; (8006f04 <xPortStartScheduler+0x134>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	4a2d      	ldr	r2, [pc, #180]	; (8006f04 <xPortStartScheduler+0x134>)
 8006e4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e50:	78fb      	ldrb	r3, [r7, #3]
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	005b      	lsls	r3, r3, #1
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e5a:	78fb      	ldrb	r3, [r7, #3]
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e62:	2b80      	cmp	r3, #128	; 0x80
 8006e64:	d0ef      	beq.n	8006e46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006e66:	4b27      	ldr	r3, [pc, #156]	; (8006f04 <xPortStartScheduler+0x134>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f1c3 0307 	rsb	r3, r3, #7
 8006e6e:	2b04      	cmp	r3, #4
 8006e70:	d00a      	beq.n	8006e88 <xPortStartScheduler+0xb8>
	__asm volatile
 8006e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e76:	f383 8811 	msr	BASEPRI, r3
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	60bb      	str	r3, [r7, #8]
}
 8006e84:	bf00      	nop
 8006e86:	e7fe      	b.n	8006e86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006e88:	4b1e      	ldr	r3, [pc, #120]	; (8006f04 <xPortStartScheduler+0x134>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	021b      	lsls	r3, r3, #8
 8006e8e:	4a1d      	ldr	r2, [pc, #116]	; (8006f04 <xPortStartScheduler+0x134>)
 8006e90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e92:	4b1c      	ldr	r3, [pc, #112]	; (8006f04 <xPortStartScheduler+0x134>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e9a:	4a1a      	ldr	r2, [pc, #104]	; (8006f04 <xPortStartScheduler+0x134>)
 8006e9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	b2da      	uxtb	r2, r3
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006ea6:	4b18      	ldr	r3, [pc, #96]	; (8006f08 <xPortStartScheduler+0x138>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a17      	ldr	r2, [pc, #92]	; (8006f08 <xPortStartScheduler+0x138>)
 8006eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006eb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006eb2:	4b15      	ldr	r3, [pc, #84]	; (8006f08 <xPortStartScheduler+0x138>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a14      	ldr	r2, [pc, #80]	; (8006f08 <xPortStartScheduler+0x138>)
 8006eb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006ebc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006ebe:	f000 f8dd 	bl	800707c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006ec2:	4b12      	ldr	r3, [pc, #72]	; (8006f0c <xPortStartScheduler+0x13c>)
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006ec8:	f000 f8fc 	bl	80070c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006ecc:	4b10      	ldr	r3, [pc, #64]	; (8006f10 <xPortStartScheduler+0x140>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a0f      	ldr	r2, [pc, #60]	; (8006f10 <xPortStartScheduler+0x140>)
 8006ed2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006ed6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006ed8:	f7ff ff66 	bl	8006da8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006edc:	f7ff f854 	bl	8005f88 <vTaskSwitchContext>
	prvTaskExitError();
 8006ee0:	f7ff ff20 	bl	8006d24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3718      	adds	r7, #24
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	e000ed00 	.word	0xe000ed00
 8006ef4:	410fc271 	.word	0x410fc271
 8006ef8:	410fc270 	.word	0x410fc270
 8006efc:	e000e400 	.word	0xe000e400
 8006f00:	20000e3c 	.word	0x20000e3c
 8006f04:	20000e40 	.word	0x20000e40
 8006f08:	e000ed20 	.word	0xe000ed20
 8006f0c:	2000000c 	.word	0x2000000c
 8006f10:	e000ef34 	.word	0xe000ef34

08006f14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
	__asm volatile
 8006f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1e:	f383 8811 	msr	BASEPRI, r3
 8006f22:	f3bf 8f6f 	isb	sy
 8006f26:	f3bf 8f4f 	dsb	sy
 8006f2a:	607b      	str	r3, [r7, #4]
}
 8006f2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006f2e:	4b0f      	ldr	r3, [pc, #60]	; (8006f6c <vPortEnterCritical+0x58>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	3301      	adds	r3, #1
 8006f34:	4a0d      	ldr	r2, [pc, #52]	; (8006f6c <vPortEnterCritical+0x58>)
 8006f36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006f38:	4b0c      	ldr	r3, [pc, #48]	; (8006f6c <vPortEnterCritical+0x58>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d10f      	bne.n	8006f60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f40:	4b0b      	ldr	r3, [pc, #44]	; (8006f70 <vPortEnterCritical+0x5c>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00a      	beq.n	8006f60 <vPortEnterCritical+0x4c>
	__asm volatile
 8006f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4e:	f383 8811 	msr	BASEPRI, r3
 8006f52:	f3bf 8f6f 	isb	sy
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	603b      	str	r3, [r7, #0]
}
 8006f5c:	bf00      	nop
 8006f5e:	e7fe      	b.n	8006f5e <vPortEnterCritical+0x4a>
	}
}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr
 8006f6c:	2000000c 	.word	0x2000000c
 8006f70:	e000ed04 	.word	0xe000ed04

08006f74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006f7a:	4b12      	ldr	r3, [pc, #72]	; (8006fc4 <vPortExitCritical+0x50>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10a      	bne.n	8006f98 <vPortExitCritical+0x24>
	__asm volatile
 8006f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f86:	f383 8811 	msr	BASEPRI, r3
 8006f8a:	f3bf 8f6f 	isb	sy
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	607b      	str	r3, [r7, #4]
}
 8006f94:	bf00      	nop
 8006f96:	e7fe      	b.n	8006f96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006f98:	4b0a      	ldr	r3, [pc, #40]	; (8006fc4 <vPortExitCritical+0x50>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	4a09      	ldr	r2, [pc, #36]	; (8006fc4 <vPortExitCritical+0x50>)
 8006fa0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006fa2:	4b08      	ldr	r3, [pc, #32]	; (8006fc4 <vPortExitCritical+0x50>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d105      	bne.n	8006fb6 <vPortExitCritical+0x42>
 8006faa:	2300      	movs	r3, #0
 8006fac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	f383 8811 	msr	BASEPRI, r3
}
 8006fb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006fb6:	bf00      	nop
 8006fb8:	370c      	adds	r7, #12
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	2000000c 	.word	0x2000000c
	...

08006fd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006fd0:	f3ef 8009 	mrs	r0, PSP
 8006fd4:	f3bf 8f6f 	isb	sy
 8006fd8:	4b15      	ldr	r3, [pc, #84]	; (8007030 <pxCurrentTCBConst>)
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	f01e 0f10 	tst.w	lr, #16
 8006fe0:	bf08      	it	eq
 8006fe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006fe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fea:	6010      	str	r0, [r2, #0]
 8006fec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ff0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006ff4:	f380 8811 	msr	BASEPRI, r0
 8006ff8:	f3bf 8f4f 	dsb	sy
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	f7fe ffc2 	bl	8005f88 <vTaskSwitchContext>
 8007004:	f04f 0000 	mov.w	r0, #0
 8007008:	f380 8811 	msr	BASEPRI, r0
 800700c:	bc09      	pop	{r0, r3}
 800700e:	6819      	ldr	r1, [r3, #0]
 8007010:	6808      	ldr	r0, [r1, #0]
 8007012:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007016:	f01e 0f10 	tst.w	lr, #16
 800701a:	bf08      	it	eq
 800701c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007020:	f380 8809 	msr	PSP, r0
 8007024:	f3bf 8f6f 	isb	sy
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	f3af 8000 	nop.w

08007030 <pxCurrentTCBConst>:
 8007030:	20000810 	.word	0x20000810
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007034:	bf00      	nop
 8007036:	bf00      	nop

08007038 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
	__asm volatile
 800703e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007042:	f383 8811 	msr	BASEPRI, r3
 8007046:	f3bf 8f6f 	isb	sy
 800704a:	f3bf 8f4f 	dsb	sy
 800704e:	607b      	str	r3, [r7, #4]
}
 8007050:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007052:	f7fe fedf 	bl	8005e14 <xTaskIncrementTick>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d003      	beq.n	8007064 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800705c:	4b06      	ldr	r3, [pc, #24]	; (8007078 <xPortSysTickHandler+0x40>)
 800705e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007062:	601a      	str	r2, [r3, #0]
 8007064:	2300      	movs	r3, #0
 8007066:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	f383 8811 	msr	BASEPRI, r3
}
 800706e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007070:	bf00      	nop
 8007072:	3708      	adds	r7, #8
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	e000ed04 	.word	0xe000ed04

0800707c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800707c:	b480      	push	{r7}
 800707e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007080:	4b0b      	ldr	r3, [pc, #44]	; (80070b0 <vPortSetupTimerInterrupt+0x34>)
 8007082:	2200      	movs	r2, #0
 8007084:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007086:	4b0b      	ldr	r3, [pc, #44]	; (80070b4 <vPortSetupTimerInterrupt+0x38>)
 8007088:	2200      	movs	r2, #0
 800708a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800708c:	4b0a      	ldr	r3, [pc, #40]	; (80070b8 <vPortSetupTimerInterrupt+0x3c>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a0a      	ldr	r2, [pc, #40]	; (80070bc <vPortSetupTimerInterrupt+0x40>)
 8007092:	fba2 2303 	umull	r2, r3, r2, r3
 8007096:	099b      	lsrs	r3, r3, #6
 8007098:	4a09      	ldr	r2, [pc, #36]	; (80070c0 <vPortSetupTimerInterrupt+0x44>)
 800709a:	3b01      	subs	r3, #1
 800709c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800709e:	4b04      	ldr	r3, [pc, #16]	; (80070b0 <vPortSetupTimerInterrupt+0x34>)
 80070a0:	2207      	movs	r2, #7
 80070a2:	601a      	str	r2, [r3, #0]
}
 80070a4:	bf00      	nop
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	e000e010 	.word	0xe000e010
 80070b4:	e000e018 	.word	0xe000e018
 80070b8:	20000000 	.word	0x20000000
 80070bc:	10624dd3 	.word	0x10624dd3
 80070c0:	e000e014 	.word	0xe000e014

080070c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80070c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80070d4 <vPortEnableVFP+0x10>
 80070c8:	6801      	ldr	r1, [r0, #0]
 80070ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80070ce:	6001      	str	r1, [r0, #0]
 80070d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80070d2:	bf00      	nop
 80070d4:	e000ed88 	.word	0xe000ed88

080070d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80070de:	f3ef 8305 	mrs	r3, IPSR
 80070e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2b0f      	cmp	r3, #15
 80070e8:	d914      	bls.n	8007114 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80070ea:	4a17      	ldr	r2, [pc, #92]	; (8007148 <vPortValidateInterruptPriority+0x70>)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	4413      	add	r3, r2
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80070f4:	4b15      	ldr	r3, [pc, #84]	; (800714c <vPortValidateInterruptPriority+0x74>)
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	7afa      	ldrb	r2, [r7, #11]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d20a      	bcs.n	8007114 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80070fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007102:	f383 8811 	msr	BASEPRI, r3
 8007106:	f3bf 8f6f 	isb	sy
 800710a:	f3bf 8f4f 	dsb	sy
 800710e:	607b      	str	r3, [r7, #4]
}
 8007110:	bf00      	nop
 8007112:	e7fe      	b.n	8007112 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007114:	4b0e      	ldr	r3, [pc, #56]	; (8007150 <vPortValidateInterruptPriority+0x78>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800711c:	4b0d      	ldr	r3, [pc, #52]	; (8007154 <vPortValidateInterruptPriority+0x7c>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	429a      	cmp	r2, r3
 8007122:	d90a      	bls.n	800713a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007128:	f383 8811 	msr	BASEPRI, r3
 800712c:	f3bf 8f6f 	isb	sy
 8007130:	f3bf 8f4f 	dsb	sy
 8007134:	603b      	str	r3, [r7, #0]
}
 8007136:	bf00      	nop
 8007138:	e7fe      	b.n	8007138 <vPortValidateInterruptPriority+0x60>
	}
 800713a:	bf00      	nop
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	e000e3f0 	.word	0xe000e3f0
 800714c:	20000e3c 	.word	0x20000e3c
 8007150:	e000ed0c 	.word	0xe000ed0c
 8007154:	20000e40 	.word	0x20000e40

08007158 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b08a      	sub	sp, #40	; 0x28
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007160:	2300      	movs	r3, #0
 8007162:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007164:	f7fe fd9a 	bl	8005c9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007168:	4b5b      	ldr	r3, [pc, #364]	; (80072d8 <pvPortMalloc+0x180>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d101      	bne.n	8007174 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007170:	f000 f920 	bl	80073b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007174:	4b59      	ldr	r3, [pc, #356]	; (80072dc <pvPortMalloc+0x184>)
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4013      	ands	r3, r2
 800717c:	2b00      	cmp	r3, #0
 800717e:	f040 8093 	bne.w	80072a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d01d      	beq.n	80071c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007188:	2208      	movs	r2, #8
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4413      	add	r3, r2
 800718e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f003 0307 	and.w	r3, r3, #7
 8007196:	2b00      	cmp	r3, #0
 8007198:	d014      	beq.n	80071c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f023 0307 	bic.w	r3, r3, #7
 80071a0:	3308      	adds	r3, #8
 80071a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f003 0307 	and.w	r3, r3, #7
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00a      	beq.n	80071c4 <pvPortMalloc+0x6c>
	__asm volatile
 80071ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b2:	f383 8811 	msr	BASEPRI, r3
 80071b6:	f3bf 8f6f 	isb	sy
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	617b      	str	r3, [r7, #20]
}
 80071c0:	bf00      	nop
 80071c2:	e7fe      	b.n	80071c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d06e      	beq.n	80072a8 <pvPortMalloc+0x150>
 80071ca:	4b45      	ldr	r3, [pc, #276]	; (80072e0 <pvPortMalloc+0x188>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d869      	bhi.n	80072a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80071d4:	4b43      	ldr	r3, [pc, #268]	; (80072e4 <pvPortMalloc+0x18c>)
 80071d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80071d8:	4b42      	ldr	r3, [pc, #264]	; (80072e4 <pvPortMalloc+0x18c>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071de:	e004      	b.n	80071ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80071e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80071e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d903      	bls.n	80071fc <pvPortMalloc+0xa4>
 80071f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d1f1      	bne.n	80071e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80071fc:	4b36      	ldr	r3, [pc, #216]	; (80072d8 <pvPortMalloc+0x180>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007202:	429a      	cmp	r2, r3
 8007204:	d050      	beq.n	80072a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007206:	6a3b      	ldr	r3, [r7, #32]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2208      	movs	r2, #8
 800720c:	4413      	add	r3, r2
 800720e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	6a3b      	ldr	r3, [r7, #32]
 8007216:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	1ad2      	subs	r2, r2, r3
 8007220:	2308      	movs	r3, #8
 8007222:	005b      	lsls	r3, r3, #1
 8007224:	429a      	cmp	r2, r3
 8007226:	d91f      	bls.n	8007268 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4413      	add	r3, r2
 800722e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	f003 0307 	and.w	r3, r3, #7
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00a      	beq.n	8007250 <pvPortMalloc+0xf8>
	__asm volatile
 800723a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723e:	f383 8811 	msr	BASEPRI, r3
 8007242:	f3bf 8f6f 	isb	sy
 8007246:	f3bf 8f4f 	dsb	sy
 800724a:	613b      	str	r3, [r7, #16]
}
 800724c:	bf00      	nop
 800724e:	e7fe      	b.n	800724e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007252:	685a      	ldr	r2, [r3, #4]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	1ad2      	subs	r2, r2, r3
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800725c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007262:	69b8      	ldr	r0, [r7, #24]
 8007264:	f000 f908 	bl	8007478 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007268:	4b1d      	ldr	r3, [pc, #116]	; (80072e0 <pvPortMalloc+0x188>)
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	4a1b      	ldr	r2, [pc, #108]	; (80072e0 <pvPortMalloc+0x188>)
 8007274:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007276:	4b1a      	ldr	r3, [pc, #104]	; (80072e0 <pvPortMalloc+0x188>)
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	4b1b      	ldr	r3, [pc, #108]	; (80072e8 <pvPortMalloc+0x190>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	429a      	cmp	r2, r3
 8007280:	d203      	bcs.n	800728a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007282:	4b17      	ldr	r3, [pc, #92]	; (80072e0 <pvPortMalloc+0x188>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a18      	ldr	r2, [pc, #96]	; (80072e8 <pvPortMalloc+0x190>)
 8007288:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800728a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728c:	685a      	ldr	r2, [r3, #4]
 800728e:	4b13      	ldr	r3, [pc, #76]	; (80072dc <pvPortMalloc+0x184>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	431a      	orrs	r2, r3
 8007294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007296:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729a:	2200      	movs	r2, #0
 800729c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800729e:	4b13      	ldr	r3, [pc, #76]	; (80072ec <pvPortMalloc+0x194>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	3301      	adds	r3, #1
 80072a4:	4a11      	ldr	r2, [pc, #68]	; (80072ec <pvPortMalloc+0x194>)
 80072a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80072a8:	f7fe fd06 	bl	8005cb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	f003 0307 	and.w	r3, r3, #7
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00a      	beq.n	80072cc <pvPortMalloc+0x174>
	__asm volatile
 80072b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ba:	f383 8811 	msr	BASEPRI, r3
 80072be:	f3bf 8f6f 	isb	sy
 80072c2:	f3bf 8f4f 	dsb	sy
 80072c6:	60fb      	str	r3, [r7, #12]
}
 80072c8:	bf00      	nop
 80072ca:	e7fe      	b.n	80072ca <pvPortMalloc+0x172>
	return pvReturn;
 80072cc:	69fb      	ldr	r3, [r7, #28]
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3728      	adds	r7, #40	; 0x28
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	20001a04 	.word	0x20001a04
 80072dc:	20001a18 	.word	0x20001a18
 80072e0:	20001a08 	.word	0x20001a08
 80072e4:	200019fc 	.word	0x200019fc
 80072e8:	20001a0c 	.word	0x20001a0c
 80072ec:	20001a10 	.word	0x20001a10

080072f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d04d      	beq.n	800739e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007302:	2308      	movs	r3, #8
 8007304:	425b      	negs	r3, r3
 8007306:	697a      	ldr	r2, [r7, #20]
 8007308:	4413      	add	r3, r2
 800730a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	685a      	ldr	r2, [r3, #4]
 8007314:	4b24      	ldr	r3, [pc, #144]	; (80073a8 <vPortFree+0xb8>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4013      	ands	r3, r2
 800731a:	2b00      	cmp	r3, #0
 800731c:	d10a      	bne.n	8007334 <vPortFree+0x44>
	__asm volatile
 800731e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	60fb      	str	r3, [r7, #12]
}
 8007330:	bf00      	nop
 8007332:	e7fe      	b.n	8007332 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00a      	beq.n	8007352 <vPortFree+0x62>
	__asm volatile
 800733c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007340:	f383 8811 	msr	BASEPRI, r3
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	f3bf 8f4f 	dsb	sy
 800734c:	60bb      	str	r3, [r7, #8]
}
 800734e:	bf00      	nop
 8007350:	e7fe      	b.n	8007350 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	685a      	ldr	r2, [r3, #4]
 8007356:	4b14      	ldr	r3, [pc, #80]	; (80073a8 <vPortFree+0xb8>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4013      	ands	r3, r2
 800735c:	2b00      	cmp	r3, #0
 800735e:	d01e      	beq.n	800739e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d11a      	bne.n	800739e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	685a      	ldr	r2, [r3, #4]
 800736c:	4b0e      	ldr	r3, [pc, #56]	; (80073a8 <vPortFree+0xb8>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	43db      	mvns	r3, r3
 8007372:	401a      	ands	r2, r3
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007378:	f7fe fc90 	bl	8005c9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	685a      	ldr	r2, [r3, #4]
 8007380:	4b0a      	ldr	r3, [pc, #40]	; (80073ac <vPortFree+0xbc>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4413      	add	r3, r2
 8007386:	4a09      	ldr	r2, [pc, #36]	; (80073ac <vPortFree+0xbc>)
 8007388:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800738a:	6938      	ldr	r0, [r7, #16]
 800738c:	f000 f874 	bl	8007478 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007390:	4b07      	ldr	r3, [pc, #28]	; (80073b0 <vPortFree+0xc0>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	3301      	adds	r3, #1
 8007396:	4a06      	ldr	r2, [pc, #24]	; (80073b0 <vPortFree+0xc0>)
 8007398:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800739a:	f7fe fc8d 	bl	8005cb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800739e:	bf00      	nop
 80073a0:	3718      	adds	r7, #24
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	20001a18 	.word	0x20001a18
 80073ac:	20001a08 	.word	0x20001a08
 80073b0:	20001a14 	.word	0x20001a14

080073b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80073ba:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80073be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80073c0:	4b27      	ldr	r3, [pc, #156]	; (8007460 <prvHeapInit+0xac>)
 80073c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f003 0307 	and.w	r3, r3, #7
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00c      	beq.n	80073e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	3307      	adds	r3, #7
 80073d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f023 0307 	bic.w	r3, r3, #7
 80073da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80073dc:	68ba      	ldr	r2, [r7, #8]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	1ad3      	subs	r3, r2, r3
 80073e2:	4a1f      	ldr	r2, [pc, #124]	; (8007460 <prvHeapInit+0xac>)
 80073e4:	4413      	add	r3, r2
 80073e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80073ec:	4a1d      	ldr	r2, [pc, #116]	; (8007464 <prvHeapInit+0xb0>)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80073f2:	4b1c      	ldr	r3, [pc, #112]	; (8007464 <prvHeapInit+0xb0>)
 80073f4:	2200      	movs	r2, #0
 80073f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	4413      	add	r3, r2
 80073fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007400:	2208      	movs	r2, #8
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	1a9b      	subs	r3, r3, r2
 8007406:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f023 0307 	bic.w	r3, r3, #7
 800740e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	4a15      	ldr	r2, [pc, #84]	; (8007468 <prvHeapInit+0xb4>)
 8007414:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007416:	4b14      	ldr	r3, [pc, #80]	; (8007468 <prvHeapInit+0xb4>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2200      	movs	r2, #0
 800741c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800741e:	4b12      	ldr	r3, [pc, #72]	; (8007468 <prvHeapInit+0xb4>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2200      	movs	r2, #0
 8007424:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	1ad2      	subs	r2, r2, r3
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007434:	4b0c      	ldr	r3, [pc, #48]	; (8007468 <prvHeapInit+0xb4>)
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	4a0a      	ldr	r2, [pc, #40]	; (800746c <prvHeapInit+0xb8>)
 8007442:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	4a09      	ldr	r2, [pc, #36]	; (8007470 <prvHeapInit+0xbc>)
 800744a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800744c:	4b09      	ldr	r3, [pc, #36]	; (8007474 <prvHeapInit+0xc0>)
 800744e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007452:	601a      	str	r2, [r3, #0]
}
 8007454:	bf00      	nop
 8007456:	3714      	adds	r7, #20
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr
 8007460:	20000e44 	.word	0x20000e44
 8007464:	200019fc 	.word	0x200019fc
 8007468:	20001a04 	.word	0x20001a04
 800746c:	20001a0c 	.word	0x20001a0c
 8007470:	20001a08 	.word	0x20001a08
 8007474:	20001a18 	.word	0x20001a18

08007478 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007480:	4b28      	ldr	r3, [pc, #160]	; (8007524 <prvInsertBlockIntoFreeList+0xac>)
 8007482:	60fb      	str	r3, [r7, #12]
 8007484:	e002      	b.n	800748c <prvInsertBlockIntoFreeList+0x14>
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	60fb      	str	r3, [r7, #12]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	429a      	cmp	r2, r3
 8007494:	d8f7      	bhi.n	8007486 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	68ba      	ldr	r2, [r7, #8]
 80074a0:	4413      	add	r3, r2
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d108      	bne.n	80074ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	685a      	ldr	r2, [r3, #4]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	441a      	add	r2, r3
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	441a      	add	r2, r3
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d118      	bne.n	8007500 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	4b15      	ldr	r3, [pc, #84]	; (8007528 <prvInsertBlockIntoFreeList+0xb0>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d00d      	beq.n	80074f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	685a      	ldr	r2, [r3, #4]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	441a      	add	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	601a      	str	r2, [r3, #0]
 80074f4:	e008      	b.n	8007508 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80074f6:	4b0c      	ldr	r3, [pc, #48]	; (8007528 <prvInsertBlockIntoFreeList+0xb0>)
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	601a      	str	r2, [r3, #0]
 80074fe:	e003      	b.n	8007508 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	429a      	cmp	r2, r3
 800750e:	d002      	beq.n	8007516 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007516:	bf00      	nop
 8007518:	3714      	adds	r7, #20
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop
 8007524:	200019fc 	.word	0x200019fc
 8007528:	20001a04 	.word	0x20001a04

0800752c <__libc_init_array>:
 800752c:	b570      	push	{r4, r5, r6, lr}
 800752e:	4d0d      	ldr	r5, [pc, #52]	; (8007564 <__libc_init_array+0x38>)
 8007530:	4c0d      	ldr	r4, [pc, #52]	; (8007568 <__libc_init_array+0x3c>)
 8007532:	1b64      	subs	r4, r4, r5
 8007534:	10a4      	asrs	r4, r4, #2
 8007536:	2600      	movs	r6, #0
 8007538:	42a6      	cmp	r6, r4
 800753a:	d109      	bne.n	8007550 <__libc_init_array+0x24>
 800753c:	4d0b      	ldr	r5, [pc, #44]	; (800756c <__libc_init_array+0x40>)
 800753e:	4c0c      	ldr	r4, [pc, #48]	; (8007570 <__libc_init_array+0x44>)
 8007540:	f000 f82e 	bl	80075a0 <_init>
 8007544:	1b64      	subs	r4, r4, r5
 8007546:	10a4      	asrs	r4, r4, #2
 8007548:	2600      	movs	r6, #0
 800754a:	42a6      	cmp	r6, r4
 800754c:	d105      	bne.n	800755a <__libc_init_array+0x2e>
 800754e:	bd70      	pop	{r4, r5, r6, pc}
 8007550:	f855 3b04 	ldr.w	r3, [r5], #4
 8007554:	4798      	blx	r3
 8007556:	3601      	adds	r6, #1
 8007558:	e7ee      	b.n	8007538 <__libc_init_array+0xc>
 800755a:	f855 3b04 	ldr.w	r3, [r5], #4
 800755e:	4798      	blx	r3
 8007560:	3601      	adds	r6, #1
 8007562:	e7f2      	b.n	800754a <__libc_init_array+0x1e>
 8007564:	080076a0 	.word	0x080076a0
 8007568:	080076a0 	.word	0x080076a0
 800756c:	080076a0 	.word	0x080076a0
 8007570:	080076a4 	.word	0x080076a4

08007574 <memcpy>:
 8007574:	440a      	add	r2, r1
 8007576:	4291      	cmp	r1, r2
 8007578:	f100 33ff 	add.w	r3, r0, #4294967295
 800757c:	d100      	bne.n	8007580 <memcpy+0xc>
 800757e:	4770      	bx	lr
 8007580:	b510      	push	{r4, lr}
 8007582:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007586:	f803 4f01 	strb.w	r4, [r3, #1]!
 800758a:	4291      	cmp	r1, r2
 800758c:	d1f9      	bne.n	8007582 <memcpy+0xe>
 800758e:	bd10      	pop	{r4, pc}

08007590 <memset>:
 8007590:	4402      	add	r2, r0
 8007592:	4603      	mov	r3, r0
 8007594:	4293      	cmp	r3, r2
 8007596:	d100      	bne.n	800759a <memset+0xa>
 8007598:	4770      	bx	lr
 800759a:	f803 1b01 	strb.w	r1, [r3], #1
 800759e:	e7f9      	b.n	8007594 <memset+0x4>

080075a0 <_init>:
 80075a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075a2:	bf00      	nop
 80075a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075a6:	bc08      	pop	{r3}
 80075a8:	469e      	mov	lr, r3
 80075aa:	4770      	bx	lr

080075ac <_fini>:
 80075ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ae:	bf00      	nop
 80075b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075b2:	bc08      	pop	{r3}
 80075b4:	469e      	mov	lr, r3
 80075b6:	4770      	bx	lr
